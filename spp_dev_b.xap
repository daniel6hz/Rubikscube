	MODULE	crt0
	.LARGE			; Not really, but we need the space for DEBUG

; Define the segment layout

	.SEG	VAREND
	.PACK	{INIT, VAR, VAREND}, {H'400, H'800}
	.PACK	{CONST, INITC}, {H'7400, H'D400}

; This segment holds stabs debug info and doesn't make it onto bluecore

	.CSEG	DEBUG
	ORG	H'10000

; Put labels at selected positions so
; we can deduce segment size and placement

	.SEG	INIT
INIT:
	.SEG	VAR
VAR:
	.SEG	VAREND
VAREND:
	.SEG	CONST
CONST:
	.SEG	INITC
INITC:

$XAP_AH	EQU H'ffe0
$XAP_AL	EQU H'ffe1
$XAP_UXL	EQU H'ffe2
$XAP_UY	EQU H'ffe3

; Put the version number at the start of the CONST segment

	.SEG	CONST
	DC	1541 ;  updated by Makefile from syscalls

; ****************************************************************************
; Startup code
; ****************************************************************************

	.CODE
	ORG	H'0000
	
	ld	al,#VAR-INIT ; Size of INIT segment
	ld	ah,#INIT
	ld	x,#INITC
	bc2
	; AL is now zero
	ld	ah,#VAREND-VAR	;  Size of BSS segment
	beq	skip_zero
	ld 	x,#VAR
loop_zero:
	st	al,@(0,x)
	add	x,#1
	sub	ah,#1
	bne	loop_zero
skip_zero:

	; call init code, normally empty
	bsr	$__init

	ld	ah,#0
	ld	al,#0
	bsr	$_main

	; Main may exit by returning or by explicitly calling $exit.
	; In either case exit code will be in AH
	; Note 'real' programs are unlikely to exit.

	bra	$_exit

$_abort:
	; Exit abnormally
	ld	ah,#1
	bra	$_exit


_exit	EQU	$_exit
	ENDMOD
	MODULE	calloc
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/lib/gcc-lib/xap-local-xap/3.3.3/install-tools/include
;# -I. -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;#(clobber:QI (reg:QI 0 AH))
;# import $_malloc
;# import $_memset
;# end scan referenced symbols
	.CODE
$_calloc:
	enter	#4
?LBB_calloc:
	ld	X,@$XAP_AL
?LBB2:
	ld	AL,@$XAP_AH
	smult	@$XAP_UXL
	st	AL,@(H'0002,Y)
	ld	AH,@$XAP_AL
;	bsr	$_malloc
	DC	((256*3)+9)
	st	AH,@(H'0001,Y)
	cmp	AH,#H'0000
	beq	?L2
	ld	AL,@(H'0002,Y)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	bsr	$_memset
?L2:
?LBE2:
	ld	AH,@(H'0001,Y)
?LBE_calloc:
	leave	#4
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 6 used[1] = 1 total = 7
;# Function pattern *movqi3 used[0] = 2 total = 2
;# Function pattern *mulqi3 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 1 total = 1
	MODULE	memcpy
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/lib/gcc-lib/xap-local-xap/3.3.3/install-tools/include
;# -I. -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
$_memcpy:
	enter	#1
?LBB_memcpy:
	st	AH,@H'fff9
	ld	AH,@(H'0001,Y)
	ld	X,@H'fff9
?LBB2:
	st	X,@H'fff8
	st	AL,@H'fffa
	add	AH,#-H'0001
	cmp	AH,#-H'0001
	beq	?L7
?L5:
	ld	X,@H'fffa
	ld	AL,@(0,X)
	ld	X,@H'fff8
	st	AL,@(0,X)
	ld	AL,#H'0001
	add	AL,@H'fffa
	st	AL,@H'fffa
	ld	X,#H'0001
	add	X,@H'fff8
	st	X,@H'fff8
	add	AH,#-H'0001
	cmp	AH,#-H'0001
	bne	?L5
?L7:
?LBE2:
	ld	AH,@H'fff9
?LBE_memcpy:
	leave	#1
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 6 used[1] = 4 total = 10
;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *movqi8 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 2 used[2] = 2 total = 4
;# Function pattern movstrqi+5 used[0] = 2 total = 2
	MODULE	memset
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/lib/gcc-lib/xap-local-xap/3.3.3/install-tools/include
;# -I. -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_memcpy
;# end scan referenced symbols
	.CODE
$_memset:
	enter	#3
?LBB_memset:
	st	AH,@(H'0001,Y)
	ld	AH,@$XAP_AL
	ld	AL,@(H'0003,Y)
?LBB2:
	cmp	AL,#H'0000
	beq	?L2
	ld	X,@(H'0001,Y)
?LBB3:
	st	AH,@(0,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0001
	add	AL,#-H'0001
	st	AL,@(0,Y)
	ld	AL,@$XAP_UXL
	bsr	$_memcpy
?L2:
?LBE3:
?LBE2:
	ld	AH,@(H'0001,Y)
?LBE_memset:
	leave	#3
	ENDMOD

;# Function pattern *movqi2 used[0] = 6 used[1] = 1 total = 7
;# Function pattern *movqi3 used[0] = 2 total = 2
;# Function pattern *addqi2 used[0] = 2 total = 2
;# Function pattern *call_value1 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 1 total = 1
	MODULE	memcmp
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/lib/gcc-lib/xap-local-xap/3.3.3/install-tools/include
;# -I. -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
$_memcmp:
	enter	#1
?LBB_memcmp:
	ld	X,@(H'0001,Y)
?LBB2:
	st	AL,@H'fff8
	ld	AL,#-H'0001
	add	AL,@$XAP_UXL
	st	AL,@(-1,Y)
	cmp	AL,#-H'0001
	beq	?L11
?L9:
	ld	X,@$XAP_AH
	ld	AL,@(0,X)
	ld	X,@H'fff8
	cmp	AL,@(0,X)
	bcc	?L5
	ld	AH,#-H'0001
	bra	(?L1)
?L5:
	ld	X,@$XAP_AH
	ld	AL,@(0,X)
	ld	X,@H'fff8
	cmp	AL,@(0,X)
	bcz	?L7
	ld	AH,#H'0001
	bra	(?L1)
?L7:
	add	AH,#H'0001
	ld	AL,#H'0001
	add	AL,@H'fff8
	st	AL,@H'fff8
	ld	X,#-H'0001
	add	X,@(-1,Y)
	st	X,@(-1,Y)
	cmp	X,#-H'0001
	bne	?L9
?L11:
	ld	AH,#H'0000
?L1:
?LBE2:
?LBE_memcmp:
	leave	#1
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 6 used[1] = 2 total = 8
;# Function pattern *movqi3 used[0] = 2 total = 2
;# Function pattern *movqi8 used[0] = 4 total = 4
;# Function pattern *addqi2 used[0] = 1 used[2] = 3 total = 4
;# Function pattern jump used[0] = 2 total = 2
;# Function pattern movstrqi+5 used[0] = 4 total = 4
	MODULE	_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/lib/gcc-lib/xap-local-xap/3.3.3/install-tools/include
;# -I. -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
$__init:
	enter	#1
?LBB__init:
?LBE__init:
	leave	#1
	ENDMOD

	MODULE	malloc
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_malloc:
	DC	((256*3)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	malloc
	MODULE	free
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_free:
	DC	((256*4)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	free
	MODULE	realloc
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_realloc:
	DC	((256*5)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	realloc
	MODULE	exit
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_exit:
	DC	((256*7)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	exit
	MODULE	udiv
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/lib/gcc-lib/xap-local-xap/3.3.3/install-tools/include
;# -I. -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $__udivmod
;# end scan referenced symbols
	.CODE
$___udivhi3:
	enter	#6
?LBB___udivhi3:
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
?LBB2:
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0003
	st	AL,@(H'0002,Y)
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$__udivmod
?LBE2:
?LBE___udivhi3:
	leave	#6
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 1 total = 1
;# Function pattern *movhi used[2] = 2 used[3] = 2 total = 4
;# Function pattern *addqi0 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 1 total = 1
	MODULE	MessageSendLater
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageSendLater:
	DC	((256*9)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	MessageSendLater
	MODULE	MessageCancelFirst
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageCancelFirst:
	DC	((256*10)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	MessageCancelFirst
	MODULE	Panic
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_Panic:
	DC	((256*14)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	Panic
	MODULE	PanicNull
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PanicNull:
	DC	((256*15)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PanicNull
	MODULE	PsStore
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PsStore:
	DC	((256*17)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PsStore
	MODULE	PsRetrieve
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PsRetrieve:
	DC	((256*18)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PsRetrieve
	MODULE	PsFullRetrieve
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PsFullRetrieve:
	DC	((256*21)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PsFullRetrieve
	MODULE	MessagePioTask
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessagePioTask:
	DC	((256*36)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	MessagePioTask
	MODULE	PioDebounce
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PioDebounce:
	DC	((256*37)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PioDebounce
	MODULE	PioGet
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PioGet:
	DC	((256*38)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PioGet
	MODULE	PioSet
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PioSet:
	DC	((256*39)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PioSet
	MODULE	PioSetDir
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PioSetDir:
	DC	((256*41)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PioSetDir
	MODULE	PanicUnlessMalloc
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_PanicUnlessMalloc:
	DC	((256*47)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	PanicUnlessMalloc
	MODULE	SinkClaim
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_SinkClaim:
	DC	((256*63)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	SinkClaim
	MODULE	SinkMap
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_SinkMap:
	DC	((256*64)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	SinkMap
	MODULE	SinkFlush
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_SinkFlush:
	DC	((256*65)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	SinkFlush
	MODULE	StreamConfigure
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_StreamConfigure:
	DC	((256*70)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	StreamConfigure
	MODULE	StreamSourceFromSink
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_StreamSourceFromSink:
	DC	((256*74)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	StreamSourceFromSink
	MODULE	SinkGetBdAddr
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_SinkGetBdAddr:
	DC	((256*84)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	SinkGetBdAddr
	MODULE	MessageSinkTask
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageSinkTask:
	DC	((256*85)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	MessageSinkTask
	MODULE	MessageSinkGetTask
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageSinkGetTask:
	DC	((256*86)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	MessageSinkGetTask
	MODULE	StreamSinksFromBdAddr
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_StreamSinksFromBdAddr:
	DC	((256*87)+9)
	rts
trapset_11	EQU	$trapset_11
	ENDMOD	StreamSinksFromBdAddr
	MODULE	VmSendRfcommPrim
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmSendRfcommPrim:
	DC	((256*102)+9)
	rts
trapset_14	EQU	$trapset_14
	ENDMOD	VmSendRfcommPrim
	MODULE	StreamRfcommSink
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_StreamRfcommSink:
	DC	((256*103)+9)
	rts
trapset_14	EQU	$trapset_14
	ENDMOD	StreamRfcommSink
	MODULE	StreamUartSink
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_StreamUartSink:
	DC	((256*104)+9)
	rts
trapset_15	EQU	$trapset_15
	ENDMOD	StreamUartSink
	MODULE	VmSendL2capPrim
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmSendL2capPrim:
	DC	((256*106)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	VmSendL2capPrim
	MODULE	VmSendDmPrim
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmSendDmPrim:
	DC	((256*107)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	VmSendDmPrim
	MODULE	VmSendSdpPrim
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmSendSdpPrim:
	DC	((256*108)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	VmSendSdpPrim
	MODULE	VmGetHandleFromPointer
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmGetHandleFromPointer:
	DC	((256*109)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	VmGetHandleFromPointer
	MODULE	VmGetPointerFromHandle
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmGetPointerFromHandle:
	DC	((256*110)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	VmGetPointerFromHandle
	MODULE	MessageBlueStackTask
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageBlueStackTask:
	DC	((256*111)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	MessageBlueStackTask
	MODULE	StreamL2capSink
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_StreamL2capSink:
	DC	((256*112)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	StreamL2capSink
	MODULE	VmUseExtendedBluestackPrimitives
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_VmUseExtendedBluestackPrimitives:
	DC	((256*148)+9)
	rts
trapset_16	EQU	$trapset_16
	ENDMOD	VmUseExtendedBluestackPrimitives
	MODULE	MessageSend
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/lib/gcc-lib/xap-local-xap/3.3.3/install-tools/include
;# -I. -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_MessageSendLater
;# end scan referenced symbols
	.CODE
$_MessageSend:
	enter	#4
?LBB_MessageSend:
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	ld	X,#-H'0001
	st	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE_MessageSend:
	leave	#4
	ENDMOD

;# Function pattern *movqi2 used[0] = 2 total = 2
;# Function pattern *call1 used[0] = 1 total = 1
;# Function pattern movstrqi+2 used[0] = 1 total = 1
	MODULE	MessageCancelAll
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/lib/gcc-lib/xap-local-xap/3.3.3/install-tools/include
;# -I. -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_MessageCancelFirst
;# end scan referenced symbols
	.CODE
$_MessageCancelAll:
	enter	#4
?LBB_MessageCancelAll:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB2:
	ld	AL,#H'0000
	bra	(?L6)
?L5:
	ld	AL,@(H'0002,Y)
	add	AL,#H'0001
?L6:
	st	AL,@(H'0002,Y)
	ld	AH,@(0,Y)
	ld	AL,@(H'0001,Y)
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	cmp	AH,#H'0000
	bne	?L5
?LBE2:
	ld	AH,@(H'0002,Y)
?LBE_MessageCancelAll:
	leave	#4
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 3 used[1] = 3 total = 6
;# Function pattern *movqi3 used[0] = 2 total = 2
;# Function pattern *addqi2 used[0] = 1 total = 1
;# Function pattern jump used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 1 total = 1
	MODULE	MessageLoop
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/lib/gcc-lib/xap-local-xap/3.3.3/install-tools/include
;# -I. -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_MessageWait
;# import $_MessageFree
;# end scan referenced symbols
	.CODE
$_MessageLoop:
	enter	#5
?LBB_MessageLoop:
?L2:
?LBB2:
?LBB3:
	ld	AH,@$XAP_UY
	add	AH,#H'0001
;	bsr	$_MessageWait
	DC	((256*11)+9)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,Y)
	ld	AH,@(H'0003,Y)
	st	AH,@(0,Y)
	ld	AH,@$XAP_UXL
	ld	X,@(0,X)
	bsr	0,X
	ld	AH,@(H'0002,Y)
	ld	AL,@(H'0003,Y)
;	bsr	$_MessageFree
	DC	((256*13)+9)
?LBE3:
	bra	(?L2)
?LBE2:
?LBE_MessageLoop:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
	ENDMOD

;# Function pattern *movqi2 used[0] = 2 total = 2
;# Function pattern *movqi8 used[0] = 5 total = 5
;# Function pattern *addqi0 used[0] = 1 total = 1
;# Function pattern jump used[0] = 1 total = 1
;# Function pattern *call1 used[0] = 2 total = 2
;# Function pattern *call4_sm used[1] = 1 total = 1
	MODULE	MessageSendConditionallyOnTask
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/lib/gcc-lib/xap-local-xap/3.3.3/install-tools/include
;# -I. -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_MessageSendConditionally
;# end scan referenced symbols
	.CODE
$_MessageSendConditionallyOnTask:
	enter	#3
?LBB_MessageSendConditionallyOnTask:
	st	AL,@H'fff8
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,Y)
	ld	AL,@H'fff8
;	bsr	$_MessageSendConditionally
	DC	((256*12)+9)
?LBE_MessageSendConditionallyOnTask:
	leave	#3
	ENDMOD

;# Function pattern *movqi2 used[0] = 2 used[1] = 1 total = 3
;# Function pattern *call1 used[0] = 1 total = 1
;# Function pattern movstrqi+2 used[0] = 1 total = 1
	MODULE	udivmod
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed: 
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/lib/gcc-lib/xap-local-xap/3.3.3/install-tools/include
;# -I. -Ic:/src/active/bluelab362/result/image/bluelab_full/tools/include
;# -iprefix -isystem -D__GNUC__=3 -D__GNUC_MINOR__=3
;# -D__GNUC_PATCHLEVEL__=3 -MD -MQ -mno-leaf-optim -ansi -auxbase-strip -g
;# -g -O -pedantic -Wall -Wmissing-prototypes -Wstrict-prototypes
;# -Wsign-compare -Wredundant-decls -Werror -Wall -W -Wmissing-prototypes
;# -Wstrict-prototypes -Wsign-compare -Wredundant-decls -Werror -ansi
;# -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import _count_leading_zeros
;# end scan referenced symbols
	.CODE
$__udivmod:
	enter	#6
?LBB__udivmod:
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
?LBB2:
	cmp	AH,#hwrd(H'0001+H'0001)
	bcs	?L17
	bne	?L8
	cmp	AL,#lwrd(H'0001+H'0001)
	bcc	?L8
?L17:
	ld	AL,#H'0000
	ld	X,@(H'0008,Y)
	st	AL,@(H'0001,X)
	st	AL,@(0,X)
	ld	AH,@(0,Y)
	ld	AL,@(1,Y)
	bra	(?L7)
?L8:
	ld	AH,@(0,Y)
	ld	AL,@(1,Y)
	cmp	AH,@(H'0006,Y)
	bcs	?L18
	bne	?L10
	cmp	AL,@(H'0007,Y)
	bcc	?L10
?L18:
	ld	X,@(H'0008,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	ld	AL,#H'0000
	ld	AH,#H'0000
	bra	(?L7)
?L10:
?LBB3:
	ld	AH,#H'0000
	st	AH,@(H'0003,Y)
	st	AH,@(H'0002,Y)
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
	bsr	_count_leading_zeros
	st	AH,@(H'0004,Y)
	ld	AH,@(0,Y)
	ld	AL,@(1,Y)
	bsr	_count_leading_zeros
	nadd	AH,@(H'0004,Y)
	st	AH,@(H'0004,Y)
?L12:
?LBB4:
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
	asl	@(H'0004,Y)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,@(0,Y)
	ld	AL,@(1,Y)
	cmp	AH,@H'fff8
	bcs	?L14
	bne	?L19
	cmp	AL,@H'fff9
	bcs	?L14
?L19:
	sub	AL,@H'fff9
	subc	AH,@H'fff8
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,#H'0000
	ld	AL,#H'0001
	asl	@(H'0004,Y)
	add	AL,@(H'0003,Y)
	addc	AH,@(H'0002,Y)
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
?L14:
	ld	AL,@(H'0004,Y)
?LBE4:
	add	AL,#-H'0001
	st	AL,@(H'0004,Y)
	cmp	AL,#-H'0001
	bne	?L12
	ld	AH,@(0,Y)
	ld	AL,@(1,Y)
	ld	X,@(H'0008,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	ld	AH,@(H'0002,Y)
	ld	AL,@(H'0003,Y)
?L7:
?LBE3:
?LBE2:
?LBE__udivmod:
	leave	#6
;.stabn	192,0,0,?LBB3
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;#(clobber:QI (reg:QI 1 AL))
;#(clobber:QI (reg:QI 1 AL))
;#(clobber:QI (reg:QI 1 AL))
;#(clobber:QI (reg:QI 1 AL))
;# end scan referenced symbols
_count_leading_zeros:
	enter	#1
?LBB_count_leading_zeros:
	st	AH,@H'fff8
	st	AL,@H'fff9
?LBB5:
	lsr	#H'0010
	st	AH,@H'fffa
	st	AL,@H'fffb
	ld	X,@H'fffb
	ld	AL,#H'000F
	st	AL,@(-1,Y)
	tst	@H'fffb
	bne	?L2
	ld	X,@H'fff9
	ld	AL,#H'001F
	st	AL,@(-1,Y)
?L2:
	ld	AH,@$XAP_UXL
	lsr	#H'0008
	cmp	AH,#H'0000
	beq	?L3
	ld	X,@$XAP_AH
	ld	AL,#-H'0008
	add	AL,@(-1,Y)
	st	AL,@(-1,Y)
?L3:
	ld	AH,@$XAP_UXL
	lsr	#H'0004
	cmp	AH,#H'0000
	beq	?L4
	ld	X,@$XAP_AH
	ld	AL,#-H'0004
	add	AL,@(-1,Y)
	st	AL,@(-1,Y)
?L4:
	ld	AH,@$XAP_UXL
	lsr	#H'0002
	cmp	AH,#H'0000
	beq	?L5
	ld	X,@$XAP_AH
	ld	AL,#-H'0002
	add	AL,@(-1,Y)
	st	AL,@(-1,Y)
?L5:
	ld	AH,@$XAP_UXL
	lsr	#H'0001
	cmp	AH,#H'0000
	beq	?L6
	ld	AL,#-H'0001
	add	AL,@(-1,Y)
	st	AL,@(-1,Y)
?L6:
?LBE5:
	ld	AH,@(-1,Y)
?LBE_count_leading_zeros:
	leave	#1
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
	ENDMOD

;# Function pattern *movqi2 used[0] = 20 used[1] = 3 total = 23
;# Function pattern *movqi3 used[0] = 10 total = 10
;# Function pattern *movhi used[2] = 10 used[3] = 8 total = 18
;# Function pattern *addhi3 used[0] = 1 total = 1
;# Function pattern *subhi3 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 1 used[2] = 4 total = 5
;# Function pattern *subqi3 used[1] = 1 total = 1
;# Function pattern *ashlhi3 used[0] = 2 total = 2
;# Function pattern *lshrqi3 used[0] = 4 total = 4
;# Function pattern *lshrhi3 used[0] = 1 total = 1
;# Function pattern jump used[0] = 2 total = 2
;# Function pattern *call_value1 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 4 used[1] = 1 total = 5
;# Function pattern movstrqi+5 used[0] = 1 total = 1
;# Function pattern movstrqi+7 used[0] = 1 used[1] = 2 total = 3
	MODULE	MessageWait
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageWait:
	DC	((256*11)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	MessageWait
	MODULE	MessageSendConditionally
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageSendConditionally:
	DC	((256*12)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	MessageSendConditionally
	MODULE	MessageFree
	.ENHANCED
	.CSEG	CODE
	.LARGE
$_MessageFree:
	DC	((256*13)+9)
	rts
trapset_1	EQU	$trapset_1
	ENDMOD	MessageFree
	MODULE	trapset_1
	.CSEG	CODE
	.LARGE
	.ENHANCED
$trapset_1:
	ENDMOD	trapset_1
	MODULE	trapset_11
	.CSEG	CODE
	.LARGE
	.ENHANCED
$trapset_11:
	ENDMOD	trapset_11
	MODULE	trapset_14
	.CSEG	CODE
	.LARGE
	.ENHANCED
$trapset_14:
	ENDMOD	trapset_14
	MODULE	trapset_15
	.CSEG	CODE
	.LARGE
	.ENHANCED
$trapset_15:
	ENDMOD	trapset_15
	MODULE	trapset_16
	.CSEG	CODE
	.LARGE
	.ENHANCED
$trapset_16:
	ENDMOD	trapset_16
	MODULE	e_t_c

	.ALL
e_t_c:
	ENDMOD
	MODULE	main
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:/BlueLab/tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import _theSppApp
;# import $_SinkClaim
;# import $_SinkMap
;# import $_memcpy
;# import $_SinkFlush
;# import $_PanicNull
;# end scan referenced symbols
	.CODE
_SppSendByte:
	enter	#4
?LBB_SppSendByte:
	st	AH,@(H'0001,Y)
?LBB2:
	ld	AL,@_theSppApp+H'0010
	st	AL,@(H'0002,Y)
	cmp	AL,#H'0000
	beq	?L1
	ld	AH,@$XAP_AL
	ld	AL,#H'0001
;	bsr	$_SinkClaim
	DC	((256*63)+9)
	cmp	AH,#-H'0001
	beq	?L1
	ld	AH,@(H'0002,Y)
;	bsr	$_SinkMap
	DC	((256*64)+9)
	ld	AL,#H'0001
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	bsr	$_memcpy
	ld	AH,@(H'0002,Y)
	ld	AL,#H'0001
;	bsr	$_SinkFlush
	DC	((256*65)+9)
;	bsr	$_PanicNull
	DC	((256*15)+9)
?L1:
?LBE2:
?LBE_SppSendByte:
	leave	#4
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
;# begin scan referenced symbols
;# end scan referenced symbols
$_getAppTask:
	enter	#1
?LBB_getAppTask:
	ld	AH,#(_theSppApp)
?LBE_getAppTask:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
_unhandledSppState:
	enter	#1
?LBB_unhandledSppState:
?LBE_unhandledSppState:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_setSppState:
	enter	#1
?LBB_setSppState:
	st	AH,@_theSppApp+H'000F
?LBE_setSppState:
	leave	#1
;# begin scan referenced symbols
;# import $_sppDevInit
;# import $_Panic
;# import $_setSppState
;#(clobber (reg:QI 3 X))
;# import $_ConnectionWriteScanEnable
;# import $_MessageCancelFirst
;# import $_SppDisconnect
;#(clobber (reg:QI 3 X))
;# import $_sppDevAuthoriseConnectInd
;# import $_PioSet
;# import $_sppDevInquire
;#(clobber (reg:QI 3 X))
;# import _unhandledSppState
;# import $_sppDevUpdateLed
;# import $_sppDevHandlePinCodeRequest
;# import $_sppDevAuthoriseResponse
;# import $_sppDevSetTrustLevel
;#(clobber:QI (reg:QI 0 AH))
;#(clobber:QI (reg:QI 0 AH))
;#(clobber:QI (reg:QI 0 AH))
;#(clobber:QI (reg:QI 0 AH))
;# import _SppSendByte
;# end scan referenced symbols
_app_handler:
	enter	#5
?LBB_app_handler:
	st	AL,@(0,Y)
?LBB3:
	ld	AL,@_theSppApp+H'000F
	st	AL,@(H'0001,Y)
	ld	AL,@(0,Y)
	cmp	AL,#(H'0001+H'6F04)
	bcc	?L82
	cmp	AL,#H'6F03
	bcc	?L8
	cmp	AL,#H'010D
	beq	?L62
	cmp	AL,#(H'0001+H'010D)
	bcc	?L83
	cmp	AL,#H'0000
	beq	?L69
	cmp	AL,#H'0100
	beq	?L53
	bra	(?L8)
?L83:
	ld	AL,@(0,Y)
	cmp	AL,#H'6F01
	beq	?L23
	cmp	AL,#(H'0001+H'6F01)
	bcc	?L35
	cmp	AL,#H'6F00
	beq	?L13
	bra	(?L8)
?L82:
	ld	AL,@(0,Y)
	cmp	AL,#H'7013
	beq	?L65
	cmp	AL,#(H'0001+H'7013)
	bcc	?L84
	cmp	AL,#H'6F05
	beq	?L44
	cmp	AL,#H'7000
	beq	?L10
	bra	(?L8)
?L84:
	ld	AL,@(0,Y)
	cmp	AL,#H'7016
	beq	?L64
	cmp	AL,#(H'0001+H'7016)
	bcc	?L8
	cmp	AL,#H'7015
	beq	?L63
	bra	(?L8)
?L10:
	ld	X,@(H'0005,Y)
	tst	@(0,X)
	bne	?L11
	bsr	$_sppDevInit
	bra	(?L8)
?L11:
;	bsr	$_Panic
	DC	((256*14)+9)
	bra	(?L8)
?L13:
	tst	@(H'0001,Y)
	bne	?L60
	ld	X,@(H'0005,Y)
	tst	@(H'0001,X)
	bne	?L8
	ld	AH,#H'0001
	bsr	$_setSppState
	ld	X,@(H'0005,Y)
	ld	AL,@(0,X)
	st	AL,@_theSppApp+H'000A
	bra	(?L90)
?L23:
	ld	AL,@(H'0001,Y)
	cmp	AL,#(H'0001+H'0004)
	bcc	?L60
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE34,X)
	brxl
	.SEG	CONST
?JTBASE34:
	.CODE
?L34:
	.SEG	CONST
	dc	?L60-?L34
	dc	?L60-?L34
	dc	?L28-?L34
	dc	?L25-?L34
	dc	?L60-?L34
	.CODE
?L25:
	ld	X,@(H'0005,Y)
	tst	@(H'0001,X)
	bne	?L26
	ld	AL,@(H'0002,X)
	st	AL,@_theSppApp+H'0010
	ld	AH,#H'0004
	bsr	$_setSppState
	ld	AH,#H'0000
	bsr	$_ConnectionWriteScanEnable
	ld	AH,#(_theSppApp)
	ld	AL,#H'0100
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	bra	(?L8)
?L26:
	ld	AH,#H'0002
	bra	(?L89)
?L28:
	ld	X,@(H'0005,Y)
	tst	@(H'0001,X)
	bne	?L8
	ld	AH,@_theSppApp+H'000A
	bsr	$_SppDisconnect
	bra	(?L8)
?L35:
	ld	AL,@(H'0001,Y)
	cmp	AL,#(H'0001+H'0004)
	bcc	?L60
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE43,X)
	brxl
	.SEG	CONST
?JTBASE43:
	.CODE
?L43:
	.SEG	CONST
	dc	?L60-?L43
	dc	?L60-?L43
	dc	?L37-?L43
	dc	?L60-?L43
	dc	?L60-?L43
	.CODE
?L37:
	ld	AH,#(_theSppApp)
	ld	AL,@(H'0005,Y)
	bsr	$_sppDevAuthoriseConnectInd
	ld	AH,#H'0003
	bsr	$_setSppState
	ld	AL,#H'0000
	st	AL,@_theSppApp+H'0010
	bra	(?L8)
?L44:
	ld	AH,#H'0000
	ld	AL,#H'0000
;	bsr	$_PioSet
	DC	((256*39)+9)
	ld	AL,@(H'0001,Y)
	cmp	AL,#H'0003
	bcz	?L60
	cmp	AL,#H'0004
	bne	?L60
?L90:
	ld	AH,#(_theSppApp)
	bsr	$_sppDevInquire
	bra	(?L8)
?L53:
	ld	X,@(H'0001,Y)
	cmp	X,#(H'0001+H'0004)
	bcc	?L60
	ld	X,@(?JTBASE61,X)
	brxl
	.SEG	CONST
?JTBASE61:
	.CODE
?L61:
	.SEG	CONST
	dc	?L60-?L61
	dc	?L60-?L61
	dc	?L55-?L61
	dc	?L60-?L61
	dc	?L60-?L61
	.CODE
?L55:
	ld	AH,#H'0000
	bsr	$_ConnectionWriteScanEnable
	ld	AH,#H'0001
?L89:
	bsr	$_setSppState
	bra	(?L8)
?L60:
	ld	AH,@(H'0001,Y)
	ld	AL,@(0,Y)
	bsr	_unhandledSppState
	bra	(?L8)
?L62:
	ld	AH,@_theSppApp+H'000F
	bsr	$_sppDevUpdateLed
	bra	(?L8)
?L63:
	ld	AH,@(H'0005,Y)
	bsr	$_sppDevHandlePinCodeRequest
	bra	(?L8)
?L64:
	ld	AH,@(H'0005,Y)
	bsr	$_sppDevAuthoriseResponse
	bra	(?L8)
?L65:
	ld	AH,@(H'0005,Y)
	bsr	$_sppDevSetTrustLevel
	bra	(?L8)
?L69:
	ld	X,@(H'0005,Y)
?LBB4:
	ld	X,@(0,X)
	st	X,@(H'0002,Y)
	ld	AL,#H'0000
	st	AL,@(H'0003,Y)
?L79:
	ld	AL,#H'0001
	asl	@(H'0003,Y)
	ld	AH,@$XAP_AL
	ld	AL,@(H'0002,Y)
	and	AL,@$XAP_AH
	cmp	AL,#H'0000
	beq	?L74
	ld	AL,@$XAP_AH
	and	AL,@_theSppApp+H'0011
	cmp	AL,#H'0000
	bne	?L72
	ld	AL,@(H'0003,Y)
	asl	#H'0004
	add	AL,#H'0001
	bra	(?L88)
?L74:
	ld	AL,#H'0001
	asl	@(H'0003,Y)
	and	AL,@_theSppApp+H'0011
	cmp	AL,#H'0000
	beq	?L72
	ld	AL,@(H'0003,Y)
	asl	#H'0004
?L88:
	ld	AH,@$XAP_AL
	bsr	_SppSendByte
?L72:
	ld	AL,@(H'0003,Y)
	add	AL,#H'0001
	st	AL,@(H'0003,Y)
	cmp	AL,#H'000B
	bcz	?L79
	ld	X,@(H'0002,Y)
	st	X,@_theSppApp+H'0011
?L8:
?LBE4:
?LBE3:
?LBE_app_handler:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# end scan referenced symbols
_EncryptCode:
	enter	#1
?LBB_EncryptCode:
?LBE_EncryptCode:
	leave	#1
;# begin scan referenced symbols
;# import _EncryptCode
;# import $_StreamUartSink
;# import $_StreamSourceFromSink
;# import _app_handler
;# import $_sppDevLedInit
;# import $_ConnectionInit
;# import $_pioInit
;# import $_MessageLoop
;# end scan referenced symbols
$_main:
	enter	#1
?LBB_main:
	bsr	_EncryptCode
;	bsr	$_StreamUartSink
	DC	((256*104)+9)
;	bsr	$_StreamSourceFromSink
	DC	((256*74)+9)
	cmp	AH,#H'0000
	beq	?L106
	ld	AL,#lwrd(_app_handler)
	st	AL,@_theSppApp
	ld	AH,#H'0000
	bsr	$_setSppState
	bsr	$_sppDevLedInit
	ld	AH,#(_theSppApp)
	bsr	$_ConnectionInit
	ld	AH,#(_theSppApp+H'0001)
	ld	AL,#(_theSppApp)
	bsr	$_pioInit
	bsr	$_MessageLoop
?L106:
	ld	AH,#H'0000
?LBE_main:
	leave	#1
	.SEG	VAR
_theSppApp:
	DS	18
	ENDMOD

;# Function pattern *movqi2 used[0] = 20 used[1] = 12 total = 32
;# Function pattern *movqi3 used[0] = 49 total = 49
;# Function pattern *addqi0 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 2 total = 2
;# Function pattern *andqi3 used[0] = 3 total = 3
;# Function pattern *ashlqi3 used[0] = 4 total = 4
;# Function pattern jump used[0] = 19 total = 19
;# Function pattern *call1 used[0] = 24 total = 24
;# Function pattern *call_value1 used[0] = 8 total = 8
;# Function pattern tablejump_1 used[0] = 3 total = 3
;# Function pattern movstrqi+3 used[0] = 6 used[1] = 5 total = 11
;# Function pattern movstrqi+4 used[1] = 8 total = 8
;# Function pattern movstrqi+5 used[0] = 14 total = 14
	MODULE	spp_button
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:/BlueLab/tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
_pio_encode:
	enter	#1
?LBB_pio_encode:
	ld	AH,#H'0000
?LBE_pio_encode:
	leave	#1
	.SEG	CONST
_enter_messages:
	dc	H'0000
	dc	H'0000
;# begin scan referenced symbols
;# import _enter_messages
;#(clobber:QI (reg:QI 1 AL))
;# import $_MessageCancelAll
;#(clobber:QI (reg:QI 1 AL))
;# import $_MessageSendLater
;#(clobber:QI (reg:QI 1 AL))
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
_send_pio_enter_messages:
	enter	#9
?LBB_send_pio_enter_messages:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	X,@$XAP_AL
?LBB2:
	add	X,@$XAP_AL
	ld	AL,@(_enter_messages,X)
	st	AL,@(H'0005,Y)
	ld	X,@(_enter_messages+H'0001,X)
	st	X,@(H'0007,Y)
	ld	X,@$XAP_AL
	add	X,#-H'0001
	st	X,@(H'0006,Y)
	cmp	X,#-H'0001
	beq	?L19
?L17:
	ld	X,@(H'0007,Y)
	ld	AH,@(0,X)
	lsr	#H'000E
	and	AH,#H'0001
	cmp	AH,#H'0000
	beq	?L9
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	cmp	AL,@(H'0004,Y)
	bne	?L10
	ld	AH,@$XAP_UXL
	ld	AL,#H'0001
	bsr	$_MessageCancelAll
	cmp	AH,#H'0000
	beq	?L11
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	AH,@(H'0001,X)
	st	AL,@(0,Y)
	bra	(?L21)
?L11:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	bra	(?L20)
?L10:
	ld	AL,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	AH,@$XAP_UXL
	ld	AL,#H'0001
	bsr	$_MessageCancelAll
	ld	X,#H'0000
	st	X,@(0,Y)
?L20:
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0001,X)
	lsr	#H'0001
	ld	AL,@$XAP_AH
	ld	AH,#H'0000
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@(H'0003,Y)
	ld	AL,#H'0001
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
	bra	(?L14)
?L9:
	ld	X,@(H'0007,Y)
	ld	AH,@(0,X)
	lsr	#H'000F
	cmp	AH,#H'0000
	bne	?L15
	st	AH,@(0,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0001,X)
?L21:
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0002,X)
	bsr	$_MessageSend
	bra	(?L14)
?L15:
	ld	AL,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	nadd	AL,@(H'0005,Y)
	add	AL,#-H'0001
	st	AL,@(H'0007,X)
?L14:
	ld	X,@(H'0007,Y)
	add	X,#H'0003
	st	X,@(H'0007,Y)
	ld	AL,@(H'0006,Y)
	add	AL,#-H'0001
	st	AL,@(H'0006,Y)
	cmp	AL,#-H'0001
	bne	?L17
?L19:
?LBE2:
?LBE_send_pio_enter_messages:
	leave	#9
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	.SEG	CONST
_timed_messages:
	dc	H'0000
	dc	H'0000
;# begin scan referenced symbols
;# import $_malloc
;# import $_PanicNull
;#(clobber:QI (reg:QI 1 AL))
;# end scan referenced symbols
	.CODE
_send_pio_timed_message:
	enter	#6
?LBB_send_pio_timed_message:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
?LBB3:
	ld	AH,#H'0001
;	bsr	$_malloc
	DC	((256*3)+9)
;	bsr	$_PanicNull
	DC	((256*15)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0004,Y)
	st	AL,@(0,X)
	tst	@(H'0006,Y)
	beq	?L26
	st	AH,@(0,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0001,X)
	lsr	#H'0001
	ld	AL,@$XAP_AH
	ld	AH,#H'0000
	bra	(?L28)
?L26:
	st	AH,@(0,Y)
	ld	X,@(H'0004,Y)
	ld	AL,@(0,X)
	and	AL,#H'7FFF
	ld	AH,#H'0000
?L28:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@(H'0003,Y)
	ld	AL,#H'0000
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE3:
?LBE_send_pio_timed_message:
	leave	#6
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# import _timed_messages
;# import _send_pio_timed_message
;# end scan referenced symbols
_send_pio_timed_messages:
	enter	#5
?LBB_send_pio_timed_messages:
	st	AH,@(H'0001,Y)
?LBB4:
	ld	X,@$XAP_AL
	add	X,@$XAP_AL
	ld	AH,@(_timed_messages,X)
	ld	X,@(_timed_messages+H'0001,X)
	st	X,@(H'0003,Y)
	add	AH,#-H'0001
	st	AH,@(H'0002,Y)
	cmp	AH,#-H'0001
	beq	?L35
?L33:
	ld	AL,@(H'0003,Y)
	ld	AH,@$XAP_AL
	add	AH,#H'0003
	st	AH,@(H'0003,Y)
	ld	AH,#H'0000
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	bsr	_send_pio_timed_message
	ld	AL,@(H'0002,Y)
	add	AL,#-H'0001
	st	AL,@(H'0002,Y)
	cmp	AL,#-H'0001
	bne	?L33
?L35:
?LBE4:
?LBE_send_pio_timed_messages:
	leave	#5
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;# begin scan referenced symbols
;# import _pio_encode
;#(clobber:QI (reg:QI 0 AH))
;# import _send_pio_enter_messages
;# import _send_pio_timed_messages
;# end scan referenced symbols
_pioChanged:
	enter	#8
?LBB_pioChanged:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0008,Y)
	ld	AH,@$XAP_AL
?LBB5:
	and	AH,#-H'1000
	st	AH,@(H'0005,Y)
	and	AL,#H'0FFF
	st	AL,@(H'0004,Y)
	ld	X,@(H'0002,Y)
	cmp	AL,@(H'0004,X)
	beq	?L39
?LBB6:
	ld	AH,#H'0001
;	bsr	$_malloc
	DC	((256*3)+9)
	ld	X,@$XAP_AH
	ld	AH,@(H'0004,Y)
	st	AH,@(0,X)
	st	X,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'0000
	bsr	$_MessageSend
	ld	AH,@(H'0004,Y)
	ld	X,@(H'0002,Y)
	st	AH,@(H'0004,X)
?L39:
?LBE6:
	ld	AH,@(H'0005,Y)
	bsr	_pio_encode
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	beq	?L40
	cmp	AH,@(H'0002,X)
	beq	?L40
	ld	AL,@(H'0005,Y)
?LBB7:
	xor	AL,@(H'0006,X)
	and	AL,@(H'0006,X)
	cmp	AL,@(H'0006,X)
	bne	?L41
?LBB8:
	ld	AL,@(H'0002,X)
	add	AL,@$XAP_AL
	st	AL,@(H'0006,Y)
	ld	AL,@(H'0007,X)
	smult	#H'0003
	ld	X,@(H'0006,Y)
	add	AL,@(_enter_messages+H'0001,X)
	st	AL,@(H'0006,Y)
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0002,X)
	bsr	$_MessageSend
?L41:
?LBE8:
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(H'0002,X)
?L40:
	ld	X,@(H'0002,Y)
?LBE7:
	tst	@(H'0008,X)
	beq	?L42
	ld	AH,#H'0000
	st	AH,@(0,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0008,X)
	bsr	$_MessageSend
	ld	AH,#H'0000
	ld	X,@(H'0002,Y)
	st	AH,@(H'0008,X)
?L42:
	ld	AH,@(H'0001,Y)
	ld	AL,#H'0000
	bsr	$_MessageCancelAll
	tst	@(H'0003,Y)
	beq	?L43
	ld	AH,@(H'0002,Y)
	ld	AL,@(H'0003,Y)
	bsr	_send_pio_enter_messages
	ld	AH,@(H'0002,Y)
	ld	AL,@(H'0003,Y)
	bsr	_send_pio_timed_messages
?L43:
	ld	AH,@(H'0005,Y)
	ld	X,@(H'0002,Y)
	st	AH,@(H'0006,X)
?LBE5:
?LBE_pioChanged:
	leave	#8
;.stabn	192,0,0,?LBB5
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;.stabn	224,0,0,?LBE5
;# begin scan referenced symbols
;#(clobber:QI (reg:QI 1 AL))
;#(clobber:QI (reg:QI 1 AL))
;# import _pioChanged
;# end scan referenced symbols
_pioHandler:
	enter	#4
?LBB_pioHandler:
	ld	X,@(H'0004,Y)
?LBB9:
	st	AH,@(H'0001,Y)
	cmp	AL,#H'0001
	beq	?L47
	cmp	AL,#H'0001
	bcs	?L49
	cmp	AL,#-H'7FDD
	beq	?L55
	bra	(?L47)
?L49:
?LBB10:
	ld	X,@(0,X)
	st	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	and	AL,#H'0001
	cmp	AL,#H'0000
	beq	?L50
	ld	AL,@(H'0002,X)
	bra	(?L59)
?L50:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	bsr	$_MessageSend
	ld	AL,#H'0000
?L59:
	ld	X,@(H'0001,Y)
	st	AL,@(H'0008,X)
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AH,@(0,X)
	lsr	#H'000F
	cmp	AH,#H'0000
	beq	?L47
	ld	AH,@(H'0001,X)
	lsr	#H'0001
	cmp	AH,#H'0000
	beq	?L53
	ld	AL,#H'0001
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,@$XAP_UXL
	bra	(?L60)
?L53:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0002,Y)
?L60:
	bsr	_send_pio_timed_message
?LBE10:
	bra	(?L47)
?L55:
?LBB11:
	ld	AL,@(0,X)
	ld	X,@(H'0001,Y)
	xor	AL,@(H'0005,X)
	st	AL,@(0,Y)
	ld	AL,@$XAP_UXL
	bsr	_pioChanged
?L47:
?LBE11:
?LBE9:
?LBE_pioHandler:
	leave	#4
;.stabn	192,0,0,?LBB9
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;.stabn	224,0,0,?LBE9
;# begin scan referenced symbols
;# import $_PioGet
;# import _pioHandler
;# import $_PsFullRetrieve
;# import $_MessagePioTask
;# import $_PioDebounce
;# end scan referenced symbols
$_pioInit:
	enter	#7
?LBB_pioInit:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
?LBB12:
	ld	AH,#H'0004
;	bsr	$_malloc
	DC	((256*3)+9)
	st	AH,@(H'0004,Y)
;	bsr	$_PioGet
	DC	((256*38)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#-H'0001
	st	AL,@(H'0001,Y)
	ld	AL,#lwrd(_pioHandler)
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	AL,#H'0001
	st	AL,@(0,Y)
	ld	AH,#H'039F
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsFullRetrieve
	DC	((256*21)+9)
	ld	AL,@(H'0001,Y)
	xor	AL,#-H'0001
	st	AL,@(H'0001,Y)
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(H'0002,X)
	st	AL,@(H'0003,X)
	st	AL,@(H'0007,X)
	st	AL,@(H'0006,X)
	st	AL,@(H'0008,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0005,X)
	ld	AL,@(H'0005,Y)
	xor	AL,@(H'0001,Y)
	xor	AL,#-H'0001
	and	AL,#H'0FFE
	st	AL,@(H'0004,X)
	ld	AH,@$XAP_UXL
;	bsr	$_MessagePioTask
	DC	((256*36)+9)
	ld	X,#H'0000
	st	X,@(0,Y)
	ld	AH,#H'0FFF
	ld	AL,#H'0001
;	bsr	$_PioDebounce
	DC	((256*37)+9)
	ld	AH,@(H'0005,Y)
	and	AH,#H'0FFE
	ld	X,@(H'0004,Y)
	st	AH,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0002,X)
	st	AL,@(H'0001,X)
	st	X,@(0,Y)
	ld	AH,@(H'0002,Y)
	ld	AL,#-H'7FDD
	bsr	$_MessageSend
?LBE12:
?LBE_pioInit:
	leave	#7
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
	ENDMOD

;# Function pattern *movqi2 used[0] = 80 used[1] = 14 total = 94
;# Function pattern *movqi3 used[0] = 106 total = 106
;# Function pattern *movqi8 used[0] = 2 total = 2
;# Function pattern *movhi used[3] = 2 total = 2
;# Function pattern *addqi0 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 10 used[2] = 1 total = 11
;# Function pattern *andqi3 used[0] = 8 total = 8
;# Function pattern *xorqi3 used[0] = 3 total = 3
;# Function pattern *subqi3 used[1] = 1 total = 1
;# Function pattern *mulqi3_const used[0] = 1 total = 1
;# Function pattern *lshrqi3 used[0] = 6 total = 6
;# Function pattern one_cmplqi2 used[0] = 2 total = 2
;# Function pattern *zero_extendqihi2_1 used[0] = 3 total = 3
;# Function pattern jump used[0] = 9 total = 9
;# Function pattern *call1 used[0] = 14 total = 14
;# Function pattern *call_value1 used[0] = 11 total = 11
;# Function pattern movstrqi+2 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 6 used[1] = 4 total = 10
;# Function pattern movstrqi+5 used[0] = 11 total = 11
	MODULE	spp_dev_auth
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:/BlueLab/tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PsFullRetrieve
;# import $_ConnectionSmPinCodeResponse
;# end scan referenced symbols
	.CODE
$_sppDevHandlePinCodeRequest:
	enter	#19
?LBB_sppDevHandlePinCodeRequest:
	st	AH,@(H'0011,Y)
?LBB2:
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AH,#H'035B
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsFullRetrieve
	DC	((256*21)+9)
	ld	X,@$XAP_AH
	cmp	AH,#H'0000
	beq	?L3
	cmp	AH,#H'0010
	bcz	?L2
?L3:
	ld	X,#H'0000
?L2:
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	st	AL,@(0,Y)
	ld	AH,@(H'0011,Y)
	ld	AL,@$XAP_UXL
	bsr	$_ConnectionSmPinCodeResponse
?LBE2:
?LBE_sppDevHandlePinCodeRequest:
	leave	#19
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
;# begin scan referenced symbols
;# import $_ConnectionSmAuthoriseResponse
;# end scan referenced symbols
$_sppDevAuthoriseResponse:
	enter	#5
?LBB_sppDevAuthoriseResponse:
	ld	X,@$XAP_AH
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AL,@(H'0007,X)
	st	AL,@(H'0002,Y)
	ld	AL,#H'0001
	st	AL,@(H'0003,Y)
	ld	AH,@$XAP_UXL
	ld	AL,@(H'0004,X)
	bsr	$_ConnectionSmAuthoriseResponse
?LBE_sppDevAuthoriseResponse:
	leave	#5
;# begin scan referenced symbols
;# import $_SppConnectResponse
;# end scan referenced symbols
$_sppDevAuthoriseConnectInd:
	enter	#2
?LBB_sppDevAuthoriseConnectInd:
	ld	X,@$XAP_AL
	add	AL,#H'0001
	st	AL,@(0,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0001
	bsr	$_SppConnectResponse
?LBE_sppDevAuthoriseConnectInd:
	leave	#2
;# begin scan referenced symbols
;# import $_ConnectionSmSetTrustLevel
;# end scan referenced symbols
$_sppDevSetTrustLevel:
	enter	#1
?LBB_sppDevSetTrustLevel:
	ld	X,@$XAP_AH
	tst	@(0,X)
	bne	?L7
	add	AH,#H'0001
	ld	AL,#H'0001
	bsr	$_ConnectionSmSetTrustLevel
?L7:
?LBE_sppDevSetTrustLevel:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 12 used[1] = 1 total = 13
;# Function pattern *movqi3 used[0] = 9 total = 9
;# Function pattern *movhi used[2] = 1 used[3] = 1 total = 2
;# Function pattern *addqi0 used[0] = 2 total = 2
;# Function pattern *addqi2 used[0] = 2 total = 2
;# Function pattern *call1 used[0] = 4 total = 4
;# Function pattern *call_value1 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 1 used[1] = 1 total = 2
;# Function pattern movstrqi+5 used[0] = 1 total = 1
	MODULE	spp_dev_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:/BlueLab/tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_getAppTask
;# import $_SppInit
;# end scan referenced symbols
	.CODE
$_sppDevInit:
	enter	#2
?LBB_sppDevInit:
	bsr	$_getAppTask
	ld	AL,#H'00FF
	st	AL,@(0,Y)
	ld	AL,#H'0001
	bsr	$_SppInit
?LBE_sppDevInit:
	leave	#2
	ENDMOD

;# Function pattern *movqi2 used[0] = 1 total = 1
;# Function pattern *movqi3 used[0] = 2 total = 2
;# Function pattern *call1 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 1 total = 1
	MODULE	spp_dev_inquire
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:/BlueLab/tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_ConnectionSmRegisterIncomingService
;# import $_ConnectionWriteClassOfDevice
;# import $_setSppState
;# import $_ConnectionWriteInquiryscanActivity
;# import $_ConnectionSmSetSdpSecurityIn
;# import $_ConnectionWriteScanEnable
;# end scan referenced symbols
	.CODE
$_sppDevInquire:
	enter	#4
?LBB_sppDevInquire:
	ld	AL,#H'0001
	st	AL,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(0,Y)
	st	AL,@(H'0002,Y)
	ld	AH,#H'0000
	bsr	$_ConnectionSmRegisterIncomingService
	ld	AL,#H'1F00
	ld	AH,#H'0000
	bsr	$_ConnectionWriteClassOfDevice
	ld	AH,#H'0002
	bsr	$_setSppState
	ld	AH,#H'0800
	ld	AL,#H'0012
	bsr	$_ConnectionWriteInquiryscanActivity
	ld	AH,#H'0001
	bsr	$_ConnectionSmSetSdpSecurityIn
	ld	AH,#H'0003
	bsr	$_ConnectionWriteScanEnable
?LBE_sppDevInquire:
	leave	#4
	ENDMOD

;# Function pattern *movqi2 used[0] = 3 total = 3
;# Function pattern *movqi3 used[0] = 10 total = 10
;# Function pattern *call1 used[0] = 6 total = 6
	MODULE	spp_dev_led
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:/BlueLab/tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PioSetDir
;# import $_PioSet
;# end scan referenced symbols
	.CODE
$_sppDevLedInit:
	enter	#1
?LBB_sppDevLedInit:
	ld	AH,#H'0000
	ld	AL,#H'0000
;	bsr	$_PioSetDir
	DC	((256*41)+9)
	ld	AH,#H'0000
	ld	AL,#H'0000
;	bsr	$_PioSet
	DC	((256*39)+9)
?LBE_sppDevLedInit:
	leave	#1
;# begin scan referenced symbols
;# import $_PioGet
;# import $_getAppTask
;# import $_MessageCancelAll
;#(clobber (reg:QI 3 X))
;# import $_MessageSendLater
;# end scan referenced symbols
$_sppDevUpdateLed:
	enter	#5
?LBB_sppDevUpdateLed:
	st	AH,@(H'0003,Y)
?LBB2:
;	bsr	$_PioGet
	DC	((256*38)+9)
	bsr	$_getAppTask
	ld	AL,#H'010D
	bsr	$_MessageCancelAll
	ld	AL,@(H'0003,Y)
	cmp	AL,#(H'0001+H'0004)
	bcc	?L2
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE18,X)
	brxl
	.SEG	CONST
?JTBASE18:
	.CODE
?L18:
	.SEG	CONST
	dc	?L2-?L18
	dc	?L7-?L18
	dc	?L9-?L18
	dc	?L12-?L18
	dc	?L15-?L18
	.CODE
?L7:
	tst	#H'0000
	beq	?L2
	bra	(?L20)
?L9:
	ld	AH,#H'0000
	ld	AL,#H'0000
;	bsr	$_PioSet
	DC	((256*39)+9)
	bsr	$_getAppTask
	ld	X,#H'0000
	st	X,@(0,Y)
	ld	AL,#H'0064
	bra	(?L19)
?L12:
	ld	AH,#H'0000
	ld	AL,#H'0000
;	bsr	$_PioSet
	DC	((256*39)+9)
	bsr	$_getAppTask
	ld	X,#H'0000
	st	X,@(0,Y)
	ld	AL,#H'02BC
?L19:
	st	AL,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'010D
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
	bra	(?L2)
?L15:
	tst	#H'0000
	bne	?L2
?L20:
	ld	AH,#H'0000
	ld	AL,#H'0000
;	bsr	$_PioSet
	DC	((256*39)+9)
?L2:
?LBE2:
?LBE_sppDevUpdateLed:
	leave	#5
	ENDMOD

;# Function pattern *movqi2 used[0] = 4 total = 4
;# Function pattern *movqi3 used[0] = 13 total = 13
;# Function pattern jump used[0] = 3 total = 3
;# Function pattern *call1 used[0] = 6 total = 6
;# Function pattern *call_value1 used[0] = 5 total = 5
;# Function pattern tablejump_1 used[0] = 1 total = 1
;# Function pattern movstrqi+2 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[1] = 2 total = 2
;# Function pattern movstrqi+4 used[1] = 1 total = 1
	MODULE	dm_baseband_cod
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_connectionGetCmTask
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
$_ConnectionWriteClassOfDevice:
	enter	#5
?LBB_ConnectionWriteClassOfDevice:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0002,Y)
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#H'001A
	bsr	$_MessageSend
?LBE2:
?LBE_ConnectionWriteClassOfDevice:
	leave	#5
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionReadClassOfDevice:
	enter	#4
?LBB_ConnectionReadClassOfDevice:
	st	AH,@(H'0001,Y)
?LBB3:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	ld	AL,#H'0019
	bsr	$_MessageSend
?LBE3:
?LBE_ConnectionReadClassOfDevice:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
	ENDMOD

;# Function pattern *movqi2 used[0] = 6 total = 6
;# Function pattern *movqi3 used[0] = 6 total = 6
;# Function pattern *movhi used[2] = 1 used[3] = 2 total = 3
;# Function pattern *call1 used[0] = 2 total = 2
;# Function pattern *call_value1 used[0] = 4 total = 4
;# Function pattern movstrqi+2 used[0] = 1 total = 1
	MODULE	dm_baseband_scan
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_connectionGetCmTask
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
$_ConnectionWritePagescanActivity:
	enter	#5
?LBB_ConnectionWritePagescanActivity:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
?LBB3:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'001B
	bsr	$_MessageSend
?LBE3:
?LBE2:
?LBE_ConnectionWritePagescanActivity:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionWriteInquiryscanActivity:
	enter	#5
?LBB_ConnectionWriteInquiryscanActivity:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB4:
?LBB5:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'001C
	bsr	$_MessageSend
?LBE5:
?LBE4:
?LBE_ConnectionWriteInquiryscanActivity:
	leave	#5
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionWriteScanEnable:
	enter	#4
?LBB_ConnectionWriteScanEnable:
	st	AH,@(H'0001,Y)
?LBB6:
?LBB7:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	ld	AL,#H'001D
	bsr	$_MessageSend
?LBE7:
?LBE6:
?LBE_ConnectionWriteScanEnable:
	leave	#4
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
	ENDMOD

;# Function pattern *movqi2 used[0] = 16 total = 16
;# Function pattern *movqi3 used[0] = 8 total = 8
;# Function pattern *call1 used[0] = 3 total = 3
;# Function pattern *call_value1 used[0] = 6 total = 6
;# Function pattern movstrqi+2 used[0] = 3 total = 3
	MODULE	dm_security_authorise
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_connectionGetCmTask
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
$_ConnectionSmAuthoriseResponse:
	enter	#5
?LBB_ConnectionSmAuthoriseResponse:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
?LBB3:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0004,X)
	ld	AH,@(H'0005,Y)
	ld	AL,@(H'0006,Y)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	AL,@(H'0007,Y)
	st	AL,@(H'0007,X)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0008,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'0011
	bsr	$_MessageSend
?LBE3:
?LBE2:
?LBE_ConnectionSmAuthoriseResponse:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# import $_memcpy
;# end scan referenced symbols
$_ConnectionSmPinCodeResponse:
	enter	#5
?LBB_ConnectionSmPinCodeResponse:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB4:
?LBB5:
	ld	AH,#H'0015
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0004,X)
	cmp	AL,#H'0000
	beq	?L3
	ld	AH,@$XAP_UXL
	add	AH,#H'0005
	st	AL,@(0,Y)
	ld	AL,@(H'0005,Y)
	bsr	$_memcpy
?L3:
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'0012
	bsr	$_MessageSend
?LBE5:
?LBE4:
?LBE_ConnectionSmPinCodeResponse:
	leave	#5
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;# begin scan referenced symbols
;# import $_connectionAuthDeleteDevice
;# end scan referenced symbols
$_ConnectionSmDeleteAuthDevice:
	enter	#1
?LBB_ConnectionSmDeleteAuthDevice:
	bsr	$_connectionAuthDeleteDevice
?LBE_ConnectionSmDeleteAuthDevice:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionSmAddAuthDevice:
	enter	#5
?LBB_ConnectionSmAddAuthDevice:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB6:
?LBB7:
	ld	AH,#H'0016
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0005
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AL,@(H'0006,Y)
	bsr	$_memcpy
	ld	AL,@(H'0007,Y)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0015,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'0014
	bsr	$_MessageSend
?LBE7:
?LBE6:
?LBE_ConnectionSmAddAuthDevice:
	leave	#5
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionSmGetAuthDevice:
	enter	#5
?LBB_ConnectionSmGetAuthDevice:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB8:
?LBB9:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#H'0015
	bsr	$_MessageSend
?LBE9:
?LBE8:
?LBE_ConnectionSmGetAuthDevice:
	leave	#5
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
;# begin scan referenced symbols
;# import $_connectionAuthSetTrustLevel
;# end scan referenced symbols
$_ConnectionSmSetTrustLevel:
	enter	#1
?LBB_ConnectionSmSetTrustLevel:
	bsr	$_connectionAuthSetTrustLevel
?LBE_ConnectionSmSetTrustLevel:
	leave	#1
;# begin scan referenced symbols
;# import $_connectionAuthUpdateMru
;# end scan referenced symbols
$_ConnectionSmUpdateMruDevice:
	enter	#1
?LBB_ConnectionSmUpdateMruDevice:
	bsr	$_connectionAuthUpdateMru
?LBE_ConnectionSmUpdateMruDevice:
	leave	#1
;# begin scan referenced symbols
;# import $_connectionAuthDeleteAllDevice
;# end scan referenced symbols
$_ConnectionSmDeleteAllAuthDevices:
	enter	#1
?LBB_ConnectionSmDeleteAllAuthDevices:
	bsr	$_connectionAuthDeleteAllDevice
?LBE_ConnectionSmDeleteAllAuthDevices:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 44 used[1] = 2 total = 46
;# Function pattern *movqi3 used[0] = 62 total = 62
;# Function pattern *movhi used[2] = 1 used[3] = 1 total = 2
;# Function pattern *addqi2 used[0] = 2 total = 2
;# Function pattern *call1 used[0] = 4 total = 4
;# Function pattern *call_value1 used[0] = 14 total = 14
;# Function pattern movstrqi+2 used[0] = 3 total = 3
;# Function pattern movstrqi+3 used[0] = 1 total = 1
	MODULE	dm_security_sdp
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_connectionGetCmTask
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
$_ConnectionSmSetSdpSecurityIn:
	enter	#4
?LBB_ConnectionSmSetSdpSecurityIn:
	st	AH,@(H'0001,Y)
?LBB2:
?LBB3:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	ld	AL,#H'0017
	bsr	$_MessageSend
?LBE3:
?LBE2:
?LBE_ConnectionSmSetSdpSecurityIn:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionSmSetSdpSecurityOut:
	enter	#5
?LBB_ConnectionSmSetSdpSecurityOut:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB4:
?LBB5:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#H'0018
	bsr	$_MessageSend
?LBE5:
?LBE4:
?LBE_ConnectionSmSetSdpSecurityOut:
	leave	#5
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
	ENDMOD

;# Function pattern *movqi2 used[0] = 14 total = 14
;# Function pattern *movqi3 used[0] = 18 total = 18
;# Function pattern *call1 used[0] = 2 total = 2
;# Function pattern *call_value1 used[0] = 4 total = 4
;# Function pattern movstrqi+2 used[0] = 1 total = 1
	MODULE	dm_security_service
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_connectionGetCmTask
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
$_ConnectionSmRegisterIncomingService:
	enter	#4
?LBB_ConnectionSmRegisterIncomingService:
	st	AH,@(H'0001,Y)
?LBB2:
?LBB3:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AH,@(H'0001,Y)
	ld	X,@(H'0002,Y)
	st	AH,@(0,X)
	ld	AH,@(H'0004,Y)
	ld	AL,@(H'0005,Y)
	ld	X,@(H'0002,Y)
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	ld	AL,#H'0000
	st	AL,@(H'0003,X)
	ld	AH,@(H'0006,Y)
	st	AH,@(H'0004,X)
	st	AL,@(H'0005,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0002,Y)
	st	AL,@(0,Y)
	ld	AL,#H'000C
	bsr	$_MessageSend
?LBE3:
?LBE2:
?LBE_ConnectionSmRegisterIncomingService:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionSmUnRegisterIncomingService:
	enter	#4
?LBB_ConnectionSmUnRegisterIncomingService:
	st	AH,@(H'0001,Y)
?LBB4:
?LBB5:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AH,@(H'0004,Y)
	ld	AL,@(H'0005,Y)
	ld	X,@(H'0002,Y)
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0002,Y)
	st	AL,@(0,Y)
	ld	AL,#H'000E
	bsr	$_MessageSend
?LBE5:
?LBE4:
?LBE_ConnectionSmUnRegisterIncomingService:
	leave	#4
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionSmRegisterOutgoingService:
	enter	#5
?LBB_ConnectionSmRegisterOutgoingService:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB6:
?LBB7:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0004,X)
	ld	AH,@(H'0005,Y)
	ld	AL,@(H'0006,Y)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	AL,@(H'0007,Y)
	st	AL,@(H'0007,X)
	ld	AL,#H'0000
	st	AL,@(H'0008,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'000D
	bsr	$_MessageSend
?LBE7:
?LBE6:
?LBE_ConnectionSmRegisterOutgoingService:
	leave	#5
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionSmUnRegisterOutgoingService:
	enter	#5
?LBB_ConnectionSmUnRegisterOutgoingService:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB8:
?LBB9:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0004,X)
	ld	AH,@(H'0005,Y)
	ld	AL,@(H'0006,Y)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#H'000F
	bsr	$_MessageSend
?LBE9:
?LBE8:
?LBE_ConnectionSmUnRegisterOutgoingService:
	leave	#5
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
	ENDMOD

;# Function pattern *movqi2 used[0] = 33 total = 33
;# Function pattern *movqi3 used[0] = 45 total = 45
;# Function pattern *movhi used[2] = 4 used[3] = 4 total = 8
;# Function pattern *call1 used[0] = 4 total = 4
;# Function pattern *call_value1 used[0] = 8 total = 8
;# Function pattern movstrqi+2 used[0] = 1 total = 1
	MODULE	init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.SEG	CONST
$_defaultMsgFilter:
	dc	H'0001
;# begin scan referenced symbols
;# import _theCm
;# end scan referenced symbols
	.CODE
_initLocks:
	enter	#1
?LBB_initLocks:
	ld	AL,#H'0000
	st	AL,@_theCm+H'0005
	st	AL,@_theCm+H'000C
	st	AL,@_theCm+H'000D
	st	AL,@_theCm+H'000E
	st	AL,@_theCm+H'000F
	st	AL,@_theCm+H'0014
	st	AL,@_theCm+H'0015
	st	AL,@_theCm+H'0016
	st	AL,@_theCm+H'0017
	st	AL,@_theCm+H'0018
	st	AL,@_theCm+H'001D
	st	AL,@_theCm+H'001E
?LBE_initLocks:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionGetCmTask:
	enter	#1
?LBB_connectionGetCmTask:
	ld	AH,#(_theCm)
?LBE_connectionGetCmTask:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionGetMsgFilter:
	enter	#1
?LBB_connectionGetMsgFilter:
	ld	AH,@_theCm+H'0004
?LBE_connectionGetMsgFilter:
	leave	#1
;# begin scan referenced symbols
;# import $_defaultMsgFilter
;# import $_ConnectionInitEx
;# end scan referenced symbols
$_ConnectionInit:
	enter	#1
?LBB_ConnectionInit:
	ld	AL,#($_defaultMsgFilter)
	bsr	$_ConnectionInitEx
?LBE_ConnectionInit:
	leave	#1
;# begin scan referenced symbols
;# import $_VmUseExtendedBluestackPrimitives
;# import $_connectionBluestackHandler
;# import $_connectionGetCmTask
;# import $_MessageBlueStackTask
;# import _initLocks
;# import $_MessageSend
;# end scan referenced symbols
$_ConnectionInitEx:
	enter	#3
?LBB_ConnectionInitEx:
	st	AH,@(H'0001,Y)
	st	AL,@_theCm+H'0004
;	bsr	$_VmUseExtendedBluestackPrimitives
	DC	((256*148)+9)
	ld	AL,#lwrd($_connectionBluestackHandler)
	st	AL,@_theCm
	bsr	$_connectionGetCmTask
;	bsr	$_MessageBlueStackTask
	DC	((256*111)+9)
	bsr	_initLocks
	ld	AL,@(H'0001,Y)
	st	AL,@_theCm+H'0002
	bsr	$_connectionGetCmTask
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AL,#H'0001
	bsr	$_MessageSend
?LBE_ConnectionInitEx:
	leave	#3
;# begin scan referenced symbols
;# import $_ConnectionSmSetSecurityMode
;# import $_connectionDmInfoInit
;# import $_connectionSendInitCfm
;#(clobber (reg:QI 3 X))
;# import $_connectionDmInit
;# import $_connectionRfcInit
;# import $_connectionL2capInit
;# import $_connectionUdpInit
;# import $_connectionTcpInit
;# import $_connectionSdpInit
;# import $_connectionSmInit
;# end scan referenced symbols
$_connectionHandleInternalInit:
	enter	#2
?LBB_connectionHandleInternalInit:
	ld	AL,@$XAP_AH
	or	AL,@_theCm+H'0003
	st	AL,@_theCm+H'0003
	cmp	AL,#H'007F
	bne	?L8
	bsr	$_connectionGetCmTask
	ld	AL,#H'0001
	st	AL,@(0,Y)
	ld	AL,#H'0002
	bsr	$_ConnectionSmSetSecurityMode
	bsr	$_connectionDmInfoInit
	ld	AH,@_theCm+H'0002
	ld	AL,#H'0000
	bsr	$_connectionSendInitCfm
	bra	(?L7)
?L8:
	cmp	AH,#(H'0001+H'0040)
	bcc	?L7
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE20,X)
	brxl
	.SEG	CONST
?JTBASE20:
	.CODE
?L20:
	.SEG	CONST
	dc	?L11-?L20
	dc	?L12-?L20
	dc	?L13-?L20
	dc	?L7-?L20
	dc	?L14-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L15-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L16-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L17-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	dc	?L7-?L20
	.CODE
?L11:
	bsr	$_connectionDmInit
	bra	(?L7)
?L12:
	bsr	$_connectionRfcInit
	bra	(?L7)
?L13:
	bsr	$_connectionL2capInit
	bra	(?L7)
?L14:
	bsr	$_connectionUdpInit
	bra	(?L7)
?L15:
	bsr	$_connectionTcpInit
	bra	(?L7)
?L16:
	ld	AH,#(_theCm+H'0017)
	bsr	$_connectionSdpInit
	bra	(?L7)
?L17:
	bsr	$_connectionSmInit
	st	AH,@_theCm+H'0008
?L7:
?LBE_connectionHandleInternalInit:
	leave	#2
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# end scan referenced symbols
$_connectionSendInternalInitCfm:
	enter	#4
?LBB_connectionSendInternalInitCfm:
	st	AH,@(H'0001,Y)
?LBB2:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	ld	AL,#H'0002
	bsr	$_MessageSend
?LBE2:
?LBE_connectionSendInternalInitCfm:
	leave	#4
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
;# begin scan referenced symbols
;# import $_MessageCancelFirst
;# end scan referenced symbols
$_connectionSendInitCfm:
	enter	#4
?LBB_connectionSendInitCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB3:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7000
	bsr	$_MessageSend
	tst	@(H'0002,Y)
	bne	?L23
	bsr	$_connectionGetCmTask
	ld	AL,#H'0000
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
?L23:
?LBE3:
?LBE_connectionSendInitCfm:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
	.SEG	VAR
_theCm:
	DS	32
	ENDMOD

;# Function pattern *movqi2 used[0] = 31 used[1] = 1 total = 32
;# Function pattern *movqi3 used[0] = 19 total = 19
;# Function pattern *iorqi3 used[0] = 1 total = 1
;# Function pattern jump used[0] = 7 total = 7
;# Function pattern *call1 used[0] = 15 total = 15
;# Function pattern *call_value1 used[0] = 10 total = 10
;# Function pattern tablejump_1 used[0] = 1 total = 1
;# Function pattern movstrqi+2 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[1] = 1 total = 1
;# Function pattern movstrqi+4 used[1] = 1 total = 1
;# Function pattern movstrqi+5 used[0] = 1 total = 1
	MODULE	bluestack_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
_handleUnexpected:
	enter	#1
?LBB_handleUnexpected:
?LBE_handleUnexpected:
	leave	#1
;# begin scan referenced symbols
;#(clobber (reg:QI 3 X))
;# import $_connectionHandleInternalInit
;# import $_MessageSendLater
;# import $_MessageCancelFirst
;# import $_connectionSendInitCfm
;# import $_connectionHandleInquiryStart
;# import $_connectionHandleInquiryCancel
;# import $_connectionHandleReadRemoteName
;# import $_connectionHandleReadLocalName
;# import $_connectionHandleChangeLocalName
;# import $_connectionHandleAuthenticationReq
;# import $_connectionHandleAuthenticationTimeout
;# import $_handleSetSdpSecurityInReq
;# import $_handleSetSdpSecurityOutReq
;# import $_handleSetSecurityModeReq
;# import $_handleRegisterReq
;# import $_handleUnRegisterReq
;# import $_handleRegisterOutgoingReq
;# import $_handleUnRegisterOutgoingReq
;# import $_handleEncryptReq
;# import $_handlePinRequestRes
;# import $_handleAuthoriseRes
;# import $_handleAddAuthDeviceReq
;# import $_handleGetAuthDeviceReq
;# import $_connectionHandleReadClassOfDeviceRequest
;# import $_connectionHandleWritePageScanActivityRequset
;# import $_connectionHandleWriteInquiryScanActivityRequest
;# import $_connectionHandleWriteScanEnableRequest
;# import $_connectionHandleWriteCodRequset
;# import $_connectionHandleWriteCachedPageModeRequest
;# import $_connectionHandleWriteCachedClkOffsetRequest
;# import $_connectionHandleClearParamCacheRequest
;# import $_connectionHandleWriteFlushTimeoutRequest
;# import $_connectionHandleWriteIacLapRequest
;# import $_connectionHandleWriteInquiryModeRequest
;# import $_connectionHandleReadInquiryModeRequest
;# import $_connectionHandleReadAddrRequest
;# import $_connectionHandleReadLinkQualityRequest
;# import $_connectionHandleReadRssiRequest
;# import $_connectionHandleReadclkOffsetRequest
;# import $_connectionHandleReadRemoteSupportedFeaturesRequest
;# import $_connectionHandleSdpRegisterRequest
;# import $_connectionHandleSdpUnregisterRequest
;# import $_connectionHandleSdpServerConfigMtu
;# import $_connectionHandleSdpClientConfigMtu
;# import $_connectionHandleSdpOpenSearchRequest
;# import $_connectionHandleSdpCloseSearchRequest
;# import $_connectionHandleSdpServiceSearchRequest
;# import $_connectionHandleSdpAttributeSearchRequest
;# import $_connectionHandleSdpServiceSearchAttrRequest
;# import $_connectionHandleSdpTerminatePrimitiveRequest
;# import $_connectionHandleL2capRegisterReq
;# import $_connectionHandleL2capUnregisterReq
;# import $_connectionHandleL2capConnectReq
;# import $_connectionHandleL2capConnectRes
;# import $_connectionHandleL2capDisconnectReq
;# import $_connectionHandleL2capRegisterTimeout
;# import $_connectionHandleL2capConnectTimeout
;# import $_connectionHandleRfcommRegisterReq
;# import $_connectionHandleRfcommConnectReq
;# import $_connectionHandleRfcommConnectRes
;# import $_connectionHandleRfcommDisconnectReq
;# import $_connectionHandleRfcommControlReq
;# import $_connectionHandleRfcommRegisterTimeout
;# import $_connectionHandleRfcommConnectTimeout
;# import $_connectionHandleSyncRegisterReq
;# import $_connectionHandleSyncUnregisterReq
;# import $_connectionHandleSyncConnectReq
;# import $_connectionHandleSyncConnectRes
;# import $_connectionHandleSyncDisconnectReq
;# import $_connectionHandleSyncRenegotiateReq
;# import $_connectionHandleSyncRegisterTimeoutInd
;# import $_connectionHandleSyncUnregisterTimeoutInd
;# import $_connectionHandleLinkPolicyUpdate
;# import $_connectionHandleLinkPolicySetRoleReq
;# import $_connectionHandleLinkPolicyGetRoleReq
;# import $_connectionHandleEnterDutModeReq
;# import $_connectionSmHandleGetAttributeReq
;# import $_connectionSmHandleGetIndexedAttributeReq
;# import $_connectionHandleL2capInterlockDisconnectRsp
;#(clobber (reg:QI 3 X))
;# import $_connectionSendInternalInitCfm
;# import $_connectionHandleDmAclOpenInd
;# import $_connectionHandleDmEnAclOpenInd
;# import $_connectionHandleDmAclOpenCfm
;# import $_connectionHandleDmAclClosedInd
;# import $_connectionHandleDmEnAclClosedInd
;# import $_connectionHandleReadRemoteSupportedFeaturesCfm
;# import $_connectionHandleSmAddDeviceCfm
;# import $_connectionHandleSmAddDeviceCfmReady
;# import $_connectionHandleSmLinkKeyReqInd
;# import $_connectionHandleSmLinkKeyInd
;# import $_connectionHandleSmPinReqInd
;# import $_connectionHandleSmAuthoriseInd
;# import $_connectionHandleDutSecurityDisabled
;# import $_connectionHandleSetSecurityModeCfm
;# import $_connectionHandleEncryptionChange
;# import $_connectionHandleInquiryResult
;# import $_connectionHandleInquiryResultWithRssi
;# import $_connectionHandleInquiryComplete
;# import $_connectionHandleWriteIacLapComplete
;# import $_connectionHandleWriteInquiryModeComplete
;# import $_connectionHandleReadInquiryModeComplete
;# import $_connectionHandleReadClassOfDeviceComplete
;# import $_connectionHandleReadBdAddrComplete
;# import $_connectionHandleReadLinkQualityComplete
;# import $_connectionHandleReadRssiComplete
;# import $_connectionHandleReadClkOffsetComplete
;# import $_connectionLinkPolicyHandleWritePowerStatesCfm
;# import $_connectionHandleSyncRegisterCfm
;# import $_connectionHandleSyncConnectCfm
;# import $_connectionHandleSyncConnectCompleteInd
;# import $_connectionHandleSyncConnectInd
;# import $_connectionHandleSyncDisconnectInd
;# import $_connectionHandleSyncDisconnectCfm
;# import $_connectionHandleSyncRenegotiateInd
;# import $_connectionHandleSyncRenegotiateCfm
;# import $_connectionHandleDmSwitchRoleComplete
;# import $_connectionHandleRoleDiscoveryComplete
;# import $_connectionHandleQosSetupCfm
;# import $_connectionHandleRemoteNameComplete
;# import $_connectionHandleLocalNameComplete
;# import $_connectionHandleEncryptCfm
;# import $_connectionHandleDutCfm
;# import $_connectionHandleDmHciModeChangeEvent
;#(clobber (reg:QI 3 X))
;# import $_connectionHandleRfcommRegisterCfm
;# import $_connectionHandleRfcommStartCfm
;# import $_connectionHandleRfcommStartInd
;# import $_connectionHandleRfcommStartCmpInd
;# import $_connectionHandleRfcommParnegInd
;# import $_connectionHandleRfcommParnegCfm
;# import $_connectionHandleRfcommEstablishInd
;# import $_connectionHandleRfcommEstablishCfm
;# import $_connectionHandleRfcommControlInd
;# import $_connectionHandleRfcommCloseInd
;# import $_connectionHandleRfcommReleaseInd
;# import $_connectionHandleRfcommPortNegInd
;#(clobber (reg:QI 3 X))
;# import $_connectionHandleL2capRegisterCfm
;# import $_connectionHandleL2capConnectInd
;# import $_connectionHandleL2capConnectCfm
;# import $_connectionHandleL2capConfigInd
;# import $_connectionHandleL2capConfigCfm
;# import $_connectionHandleL2capDisconnectInd
;# import $_connectionHandleL2capDisconnectCfm
;#(clobber (reg:QI 3 X))
;# import $_connectionHandleSdpRegisterCfm
;# import $_connectionHandleSdpUnregisterCfm
;# import $_connectionHandleSdpOpenSearchCfm
;# import $_connectionHandleSdpCloseSearchInd
;# import $_connectionHandleSdpServiceSearchCfm
;# import $_connectionHandleSdpAttributeSearchCfm
;# import $_connectionHandleSdpServiceSearchAttributeCfm
;# import _handleUnexpected
;# end scan referenced symbols
$_connectionBluestackHandler:
	enter	#6
?LBB_connectionBluestackHandler:
?LBB2:
	st	AH,@(H'0003,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0001,X)
	st	AH,@(H'0004,Y)
	cmp	AL,#(H'0001+H'004F)
	bcc	?L632
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE1268,X)
	brxl
	.SEG	CONST
?JTBASE1268:
	.CODE
?L1268:
	.SEG	CONST
	dc	?L31-?L1268
	dc	?L13-?L1268
	dc	?L22-?L1268
	dc	?L32-?L1268
	dc	?L40-?L1268
	dc	?L48-?L1268
	dc	?L56-?L1268
	dc	?L264-?L1268
	dc	?L272-?L1268
	dc	?L72-?L1268
	dc	?L80-?L1268
	dc	?L104-?L1268
	dc	?L112-?L1268
	dc	?L128-?L1268
	dc	?L120-?L1268
	dc	?L136-?L1268
	dc	?L144-?L1268
	dc	?L160-?L1268
	dc	?L152-?L1268
	dc	?L632-?L1268
	dc	?L168-?L1268
	dc	?L176-?L1268
	dc	?L632-?L1268
	dc	?L88-?L1268
	dc	?L96-?L1268
	dc	?L184-?L1268
	dc	?L216-?L1268
	dc	?L192-?L1268
	dc	?L200-?L1268
	dc	?L208-?L1268
	dc	?L224-?L1268
	dc	?L232-?L1268
	dc	?L240-?L1268
	dc	?L248-?L1268
	dc	?L64-?L1268
	dc	?L256-?L1268
	dc	?L280-?L1268
	dc	?L288-?L1268
	dc	?L296-?L1268
	dc	?L304-?L1268
	dc	?L312-?L1268
	dc	?L320-?L1268
	dc	?L328-?L1268
	dc	?L336-?L1268
	dc	?L344-?L1268
	dc	?L352-?L1268
	dc	?L360-?L1268
	dc	?L368-?L1268
	dc	?L376-?L1268
	dc	?L384-?L1268
	dc	?L392-?L1268
	dc	?L400-?L1268
	dc	?L408-?L1268
	dc	?L416-?L1268
	dc	?L424-?L1268
	dc	?L432-?L1268
	dc	?L440-?L1268
	dc	?L448-?L1268
	dc	?L624-?L1268
	dc	?L456-?L1268
	dc	?L464-?L1268
	dc	?L472-?L1268
	dc	?L480-?L1268
	dc	?L496-?L1268
	dc	?L504-?L1268
	dc	?L488-?L1268
	dc	?L512-?L1268
	dc	?L520-?L1268
	dc	?L528-?L1268
	dc	?L536-?L1268
	dc	?L544-?L1268
	dc	?L552-?L1268
	dc	?L560-?L1268
	dc	?L568-?L1268
	dc	?L576-?L1268
	dc	?L584-?L1268
	dc	?L592-?L1268
	dc	?L600-?L1268
	dc	?L608-?L1268
	dc	?L616-?L1268
	.CODE
?L13:
	tst	@(H'0004,Y)
	bne	?L19
	ld	AL,#H'0001
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	AH,#H'0000
	bsr	$_connectionHandleInternalInit
	ld	AH,@(H'0004,Y)
	st	AH,@(0,Y)
	ld	AL,#H'2710
	st	AL,@(H'0002,Y)
	st	AH,@(H'0001,Y)
	ld	AH,@(H'0003,Y)
	ld	AL,#H'0000
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
	bra	(?L11)
?L22:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0001
	bne	?L19
	ld	X,@(H'0006,Y)
	ld	AH,@(0,X)
	bsr	$_connectionHandleInternalInit
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	cmp	AL,#H'007F
	bne	?L11
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
	bra	(?L11)
?L31:
	ld	AH,@(H'0003,Y)
	ld	AL,#H'0002
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	AH,@(H'0002,X)
	ld	AL,#H'0001
	bsr	$_connectionSendInitCfm
	bra	(?L11)
?L32:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleInquiryStart
	bra	(?L11)
?L40:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleInquiryCancel
	bra	(?L11)
?L48:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadRemoteName
	bra	(?L11)
?L56:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadLocalName
	bra	(?L11)
?L64:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleChangeLocalName
	bra	(?L11)
?L72:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0008
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleAuthenticationReq
	bra	(?L11)
?L80:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0008
	bsr	$_connectionHandleAuthenticationTimeout
	bra	(?L11)
?L88:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_handleSetSdpSecurityInReq
	bra	(?L11)
?L96:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_handleSetSdpSecurityOutReq
	bra	(?L11)
?L104:
	tst	@(H'0004,Y)
	beq	?L19
	ld	AH,@(H'0004,Y)
	cmp	AH,#(H'0001+H'0003)
	bcc	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0008
	ld	AL,@(H'0006,Y)
	bsr	$_handleSetSecurityModeReq
	bra	(?L11)
?L112:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_handleRegisterReq
	bra	(?L11)
?L120:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_handleUnRegisterReq
	bra	(?L11)
?L128:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_handleRegisterOutgoingReq
	bra	(?L11)
?L136:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_handleUnRegisterOutgoingReq
	bra	(?L11)
?L144:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0008
	ld	AL,@(H'0006,Y)
	bsr	$_handleEncryptReq
	bra	(?L11)
?L152:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_handlePinRequestRes
	bra	(?L11)
?L160:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_handleAuthoriseRes
	bra	(?L11)
?L168:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0008
	ld	AL,@(H'0006,Y)
	bsr	$_handleAddAuthDeviceReq
	bra	(?L11)
?L176:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0008
	ld	AL,@(H'0006,Y)
	bsr	$_handleGetAuthDeviceReq
	bra	(?L11)
?L184:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0015
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadClassOfDeviceRequest
	bra	(?L11)
?L192:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleWritePageScanActivityRequset
	bra	(?L11)
?L200:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleWriteInquiryScanActivityRequest
	bra	(?L11)
?L208:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0001
	bcz	?L19
	cmp	AH,#(H'0001+H'0003)
	bcc	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleWriteScanEnableRequest
	bra	(?L11)
?L216:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleWriteCodRequset
	bra	(?L11)
?L224:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleWriteCachedPageModeRequest
	bra	(?L11)
?L232:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleWriteCachedClkOffsetRequest
	bra	(?L11)
?L240:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleClearParamCacheRequest
	bra	(?L11)
?L248:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleWriteFlushTimeoutRequest
	bra	(?L11)
?L256:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleWriteIacLapRequest
	bra	(?L11)
?L264:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleWriteInquiryModeRequest
	bra	(?L11)
?L272:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadInquiryModeRequest
	bra	(?L11)
?L280:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0015
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadAddrRequest
	bra	(?L11)
?L288:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0015
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadLinkQualityRequest
	bra	(?L11)
?L296:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0015
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadRssiRequest
	bra	(?L11)
?L304:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0015
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadclkOffsetRequest
	bra	(?L11)
?L312:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0015
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadRemoteSupportedFeaturesRequest
	bra	(?L11)
?L320:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpRegisterRequest
	bra	(?L11)
?L328:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpUnregisterRequest
	bra	(?L11)
?L336:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpServerConfigMtu
	bra	(?L11)
?L344:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpClientConfigMtu
	bra	(?L11)
?L352:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpOpenSearchRequest
	bra	(?L11)
?L360:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpCloseSearchRequest
	bra	(?L11)
?L368:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpServiceSearchRequest
	bra	(?L11)
?L376:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpAttributeSearchRequest
	bra	(?L11)
?L384:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpServiceSearchAttrRequest
	bra	(?L11)
?L392:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpTerminatePrimitiveRequest
	bra	(?L11)
?L400:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capRegisterReq
	bra	(?L11)
?L408:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capUnregisterReq
	bra	(?L11)
?L416:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capConnectReq
	bra	(?L11)
?L424:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capConnectRes
	bra	(?L11)
?L432:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capDisconnectReq
	bra	(?L11)
?L440:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capRegisterTimeout
	bra	(?L11)
?L448:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capConnectTimeout
	bra	(?L11)
?L456:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'001D
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleRfcommRegisterReq
	bra	(?L11)
?L464:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'001D
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleRfcommConnectReq
	bra	(?L11)
?L472:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleRfcommConnectRes
	bra	(?L11)
?L480:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleRfcommDisconnectReq
	bra	(?L11)
?L488:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleRfcommControlReq
	bra	(?L11)
?L496:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleRfcommRegisterTimeout
	bra	(?L11)
?L504:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'001D
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleRfcommConnectTimeout
	bra	(?L11)
?L512:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncRegisterReq
	bra	(?L11)
?L520:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncUnregisterReq
	bra	(?L11)
?L528:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncConnectReq
	bra	(?L11)
?L536:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncConnectRes
	bra	(?L11)
?L544:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncDisconnectReq
	bra	(?L11)
?L552:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncRenegotiateReq
	bra	(?L11)
?L560:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncRegisterTimeoutInd
	bra	(?L11)
?L568:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncUnregisterTimeoutInd
	bra	(?L11)
?L576:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleLinkPolicyUpdate
	bra	(?L11)
?L584:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'001F
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleLinkPolicySetRoleReq
	bra	(?L11)
?L592:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0003,Y)
	add	AH,#H'001F
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleLinkPolicyGetRoleReq
	bra	(?L11)
?L600:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AL,#H'0003
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	bsr	$_connectionHandleEnterDutModeReq
	bra	(?L11)
?L608:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	bsr	$_connectionSmHandleGetAttributeReq
	bra	(?L11)
?L616:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	bsr	$_connectionSmHandleGetIndexedAttributeReq
	bra	(?L11)
?L624:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L19
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capInterlockDisconnectRsp
	bra	(?L11)
?L632:
	ld	AH,#H'7FFC
	add	AH,@$XAP_AL
	cmp	AH,#(H'0001+H'000B)
	bcc	?L1266
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE1267,X)
	brxl
	.SEG	CONST
?JTBASE1267:
	.CODE
?L1267:
	.SEG	CONST
	dc	?L634-?L1267
	dc	?L1141-?L1267
	dc	?L1031-?L1267
	dc	?L1203-?L1267
	dc	?L1266-?L1267
	dc	?L1266-?L1267
	dc	?L1266-?L1267
	dc	?L1266-?L1267
	dc	?L1266-?L1267
	dc	?L1266-?L1267
	dc	?L11-?L1267
	dc	?L11-?L1267
	.CODE
?L634:
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	cmp	AL,#(H'0001+H'280A)
	bcc	?L1008
	cmp	AL,#H'2808
	bcc	?L11
	cmp	AL,#H'0C4A
	beq	?L11
	cmp	AL,#(H'0001+H'0C4A)
	bcc	?L1009
	cmp	AL,#H'042C
	beq	?L839
	cmp	AL,#(H'0001+H'042C)
	bcc	?L1010
	cmp	AL,#H'0424
	beq	?L751
	cmp	AL,#(H'0001+H'0424)
	bcc	?L1011
	cmp	AL,#H'0001
	beq	?L636
	cmp	AL,#H'0421
	beq	?L775
	bra	(?L642)
?L1011:
	cmp	AL,#H'0429
	beq	?L951
	cmp	AL,#(H'0001+H'0429)
	bcc	?L1012
	cmp	AL,#H'0425
	beq	?L767
	bra	(?L642)
?L1012:
	cmp	AL,#H'042A
	beq	?L685
	bra	(?L642)
?L1010:
	cmp	AL,#H'0812
	beq	?L935
	cmp	AL,#(H'0001+H'0812)
	bcc	?L1013
	cmp	AL,#H'080F
	beq	?L983
	cmp	AL,#H'0810
	beq	?L943
	bra	(?L642)
?L1013:
	cmp	AL,#H'0815
	beq	?L11
	cmp	AL,#(H'0001+H'0815)
	bcc	?L1014
	cmp	AL,#H'0813
	beq	?L927
	bra	(?L642)
?L1014:
	cmp	AL,#H'0C42
	beq	?L11
	bra	(?L642)
?L1009:
	cmp	AL,#H'0C5D
	beq	?L11
	cmp	AL,#(H'0001+H'0C5D)
	bcc	?L1015
	cmp	AL,#H'0C53
	beq	?L11
	cmp	AL,#(H'0001+H'0C53)
	bcc	?L1016
	cmp	AL,#H'0C4B
	beq	?L959
	cmp	AL,#H'0C51
	beq	?L11
	bra	(?L642)
?L1016:
	cmp	AL,#H'0C58
	beq	?L807
	cmp	AL,#(H'0001+H'0C58)
	bcc	?L1017
	cmp	AL,#H'0C55
	beq	?L11
	bra	(?L642)
?L1017:
	cmp	AL,#H'0C59
	beq	?L11
	bra	(?L642)
?L1015:
	cmp	AL,#H'100E
	beq	?L815
	cmp	AL,#(H'0001+H'100E)
	bcc	?L1018
	cmp	AL,#H'0C69
	beq	?L783
	cmp	AL,#(H'0001+H'0C69)
	bcc	?L1019
	cmp	AL,#H'0C66
	beq	?L11
	bra	(?L642)
?L1019:
	cmp	AL,#H'100C
	beq	?L11
	bra	(?L642)
?L1018:
	cmp	AL,#H'140A
	beq	?L831
	cmp	AL,#(H'0001+H'140A)
	bcc	?L1020
	cmp	AL,#H'1409
	beq	?L823
	bra	(?L642)
?L1020:
	cmp	AL,#H'1808
	beq	?L975
	bra	(?L642)
?L1008:
	cmp	AL,#H'3004
	beq	?L653
	cmp	AL,#(H'0001+H'3004)
	bcc	?L1021
	cmp	AL,#H'2C16
	beq	?L701
	cmp	AL,#(H'0001+H'2C16)
	bcc	?L1022
	cmp	AL,#H'280E
	beq	?L669
	cmp	AL,#(H'0001+H'280E)
	bcc	?L1023
	cmp	AL,#H'280C
	beq	?L661
	cmp	AL,#H'280D
	beq	?L645
	bra	(?L642)
?L1023:
	cmp	AL,#H'2C14
	beq	?L693
	cmp	AL,#(H'0001+H'2C14)
	bcc	?L11
	cmp	AL,#H'2C13
	beq	?L734
	bra	(?L642)
?L1022:
	cmp	AL,#H'2C1A
	beq	?L11
	cmp	AL,#(H'0001+H'2C1A)
	bcc	?L1024
	cmp	AL,#H'2C18
	beq	?L709
	cmp	AL,#(H'0001+H'2C18)
	bcc	?L725
	bra	(?L717)
?L1024:
	cmp	AL,#H'2C1C
	beq	?L743
	cmp	AL,#H'2C1C
	bcs	?L967
	cmp	AL,#H'3001
	beq	?L11
	bra	(?L642)
?L1021:
	cmp	AL,#H'7C0B
	beq	?L855
	cmp	AL,#(H'0001+H'7C0B)
	bcc	?L1025
	cmp	AL,#H'780B
	beq	?L791
	cmp	AL,#(H'0001+H'780B)
	bcc	?L1026
	cmp	AL,#H'3005
	beq	?L677
	cmp	AL,#H'780A
	beq	?L799
	bra	(?L642)
?L1026:
	cmp	AL,#H'7901
	beq	?L847
	cmp	AL,#(H'0001+H'7901)
	bcc	?L1027
	cmp	AL,#H'7816
	beq	?L759
	bra	(?L642)
?L1027:
	cmp	AL,#H'7C06
	beq	?L887
	bra	(?L642)
?L1025:
	cmp	AL,#H'7C20
	beq	?L871
	cmp	AL,#(H'0001+H'7C20)
	bcc	?L1028
	cmp	AL,#H'7C0E
	beq	?L911
	cmp	AL,#(H'0001+H'7C0E)
	bcc	?L1029
	cmp	AL,#H'7C0C
	beq	?L863
	bra	(?L642)
?L1029:
	cmp	AL,#H'7C0F
	beq	?L919
	bra	(?L642)
?L1028:
	cmp	AL,#H'7C23
	beq	?L895
	cmp	AL,#(H'0001+H'7C23)
	bcc	?L1030
	cmp	AL,#H'7C21
	beq	?L879
	bra	(?L642)
?L1030:
	cmp	AL,#H'7C24
	beq	?L903
	bra	(?L642)
?L636:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0001
	bne	?L642
	ld	AH,#H'0001
	bsr	$_connectionSendInternalInitCfm
	bra	(?L11)
?L645:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0001
	bcz	?L642
	cmp	AL,#(H'0001+H'0003)
	bcc	?L642
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleDmAclOpenInd
	bra	(?L11)
?L653:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0001
	bcz	?L642
	cmp	AH,#(H'0001+H'0003)
	bcc	?L642
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleDmEnAclOpenInd
	bra	(?L11)
?L661:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0001
	bcz	?L642
	cmp	AH,#(H'0001+H'0003)
	bcc	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0008
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleDmAclOpenCfm
	bra	(?L11)
?L669:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0001
	bcz	?L642
	cmp	AL,#(H'0001+H'0003)
	bcc	?L642
	ld	AL,@(H'0003,Y)
	add	AL,#H'0008
	ld	X,@(H'0006,Y)
	st	X,@(0,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionHandleDmAclClosedInd
	bra	(?L11)
?L677:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0001
	bcz	?L642
	cmp	AH,#(H'0001+H'0003)
	bcc	?L642
	ld	AL,@(H'0003,Y)
	add	AL,#H'0008
	ld	X,@(H'0006,Y)
	st	X,@(0,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionHandleDmEnAclClosedInd
	bra	(?L11)
?L685:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0015
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadRemoteSupportedFeaturesCfm
	bra	(?L11)
?L693:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0001
	beq	?L698
	cmp	AL,#H'0001
	bcs	?L642
	cmp	AL,#H'0002
	beq	?L699
	bra	(?L642)
?L698:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0008
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSmAddDeviceCfm
	bra	(?L11)
?L699:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0008
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSmAddDeviceCfmReady
	bra	(?L11)
?L701:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSmLinkKeyReqInd
	bra	(?L11)
?L709:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSmLinkKeyInd
	bra	(?L11)
?L717:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSmPinReqInd
	bra	(?L11)
?L725:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSmAuthoriseInd
	bra	(?L11)
?L734:
	ld	AH,@(H'0004,Y)
	cmp	AH,#(H'0001+H'0002)
	bcc	?L742
	cmp	AH,#H'0001
	bcc	?L740
	bra	(?L642)
?L742:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0003
	bne	?L642
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleDutSecurityDisabled
	bra	(?L11)
?L740:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0008
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSetSecurityModeCfm
	bra	(?L11)
?L743:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleEncryptionChange
	bra	(?L11)
?L751:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleInquiryResult
	bra	(?L11)
?L759:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleInquiryResultWithRssi
	bra	(?L11)
?L767:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	bsr	$_connectionHandleInquiryComplete
	bra	(?L11)
?L775:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	bsr	$_connectionHandleInquiryComplete
	bra	(?L11)
?L783:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleWriteIacLapComplete
	bra	(?L11)
?L791:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleWriteInquiryModeComplete
	bra	(?L11)
?L799:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadInquiryModeComplete
	bra	(?L11)
?L807:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0015
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadClassOfDeviceComplete
	bra	(?L11)
?L815:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0015
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadBdAddrComplete
	bra	(?L11)
?L823:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0015
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadLinkQualityComplete
	bra	(?L11)
?L831:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0015
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadRssiComplete
	bra	(?L11)
?L839:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0015
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleReadClkOffsetComplete
	bra	(?L11)
?L847:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	AH,@(H'0006,Y)
	bsr	$_connectionLinkPolicyHandleWritePowerStatesCfm
	bra	(?L11)
?L855:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncRegisterCfm
	bra	(?L11)
?L863:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncRegisterCfm
	bra	(?L11)
?L871:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncConnectCfm
	bra	(?L11)
?L879:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncConnectCompleteInd
	bra	(?L11)
?L887:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncConnectInd
	bra	(?L11)
?L895:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncDisconnectInd
	bra	(?L11)
?L903:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncDisconnectCfm
	bra	(?L11)
?L911:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncRenegotiateInd
	bra	(?L11)
?L919:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleSyncRenegotiateCfm
	bra	(?L11)
?L927:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'001F
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleDmSwitchRoleComplete
	bra	(?L11)
?L935:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'001F
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleRoleDiscoveryComplete
	bra	(?L11)
?L943:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleQosSetupCfm
	bra	(?L11)
?L951:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleRemoteNameComplete
	bra	(?L11)
?L959:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0005
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleLocalNameComplete
	bra	(?L11)
?L967:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L642
	ld	AH,@(H'0003,Y)
	add	AH,#H'0008
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleEncryptCfm
	bra	(?L11)
?L975:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bcz	?L642
	cmp	AL,#H'0003
	bne	?L642
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleDutCfm
	bra	(?L11)
?L983:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0001
	bcz	?L642
	cmp	AH,#(H'0001+H'0003)
	bcc	?L642
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleDmHciModeChangeEvent
	bra	(?L11)
?L1031:
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	cmp	AL,#(H'0001+H'002F)
	bcc	?L1039
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE1140,X)
	brxl
	.SEG	CONST
?JTBASE1140:
	.CODE
?L1140:
	.SEG	CONST
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1033-?L1140
	dc	?L1039-?L1140
	dc	?L1042-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1058-?L1140
	dc	?L1050-?L1140
	dc	?L1066-?L1140
	dc	?L1039-?L1140
	dc	?L1114-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1098-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L11-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1106-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1082-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1130-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1122-?L1140
	dc	?L1074-?L1140
	dc	?L1039-?L1140
	dc	?L1039-?L1140
	dc	?L1090-?L1140
	.CODE
?L1033:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0001
	bne	?L1039
	ld	AH,#H'0002
	bsr	$_connectionSendInternalInitCfm
	bra	(?L11)
?L1042:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L1039
	ld	AH,@(H'0003,Y)
	add	AH,#H'001D
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleRfcommRegisterCfm
	bra	(?L11)
?L1050:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L1039
	ld	AH,@(H'0003,Y)
	add	AH,#H'001D
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleRfcommStartCfm
	bra	(?L11)
?L1058:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L1039
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleRfcommStartInd
	bra	(?L11)
?L1066:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L1039
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleRfcommStartCmpInd
	bra	(?L11)
?L1074:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L1039
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleRfcommParnegInd
	bra	(?L11)
?L1082:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L1039
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleRfcommParnegCfm
	bra	(?L11)
?L1090:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L1039
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleRfcommEstablishInd
	bra	(?L11)
?L1098:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L1039
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleRfcommEstablishCfm
	bra	(?L11)
?L1106:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L1039
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleRfcommControlInd
	bra	(?L11)
?L1114:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L1039
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleRfcommCloseInd
	bra	(?L11)
?L1122:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L1039
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleRfcommReleaseInd
	bra	(?L11)
?L1130:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L1039
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleRfcommPortNegInd
	bra	(?L11)
?L1141:
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	cmp	AL,#(H'0001+H'0012)
	bcc	?L1149
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE1202,X)
	brxl
	.SEG	CONST
?JTBASE1202:
	.CODE
?L1202:
	.SEG	CONST
	dc	?L1149-?L1202
	dc	?L1149-?L1202
	dc	?L1143-?L1202
	dc	?L1149-?L1202
	dc	?L1149-?L1202
	dc	?L1152-?L1202
	dc	?L1160-?L1202
	dc	?L1149-?L1202
	dc	?L1149-?L1202
	dc	?L1168-?L1202
	dc	?L1176-?L1202
	dc	?L1149-?L1202
	dc	?L1149-?L1202
	dc	?L1149-?L1202
	dc	?L1149-?L1202
	dc	?L1149-?L1202
	dc	?L1184-?L1202
	dc	?L1192-?L1202
	dc	?L11-?L1202
	.CODE
?L1143:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L1149
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capRegisterCfm
	bra	(?L11)
?L1152:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L1149
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capConnectInd
	bra	(?L11)
?L1160:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L1149
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capConnectCfm
	bra	(?L11)
?L1168:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L1149
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capConfigInd
	bra	(?L11)
?L1176:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L1149
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capConfigCfm
	bra	(?L11)
?L1184:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L1149
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capDisconnectInd
	bra	(?L11)
?L1192:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L1149
	ld	AH,@(H'0006,Y)
	bsr	$_connectionHandleL2capDisconnectCfm
	bra	(?L11)
?L1203:
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	add	AL,#-H'0009
	cmp	AL,#(H'0001+H'000C)
	bcc	?L1211
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE1263,X)
	brxl
	.SEG	CONST
?JTBASE1263:
	.CODE
?L1263:
	.SEG	CONST
	dc	?L1222-?L1263
	dc	?L1211-?L1263
	dc	?L1211-?L1263
	dc	?L1230-?L1263
	dc	?L1211-?L1263
	dc	?L1211-?L1263
	dc	?L1205-?L1263
	dc	?L1211-?L1263
	dc	?L1214-?L1263
	dc	?L1211-?L1263
	dc	?L1254-?L1263
	dc	?L1238-?L1263
	dc	?L1246-?L1263
	.CODE
?L1205:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L1211
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpRegisterCfm
	bra	(?L11)
?L1214:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L1211
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpUnregisterCfm
	bra	(?L11)
?L1222:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L1211
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpOpenSearchCfm
	bra	(?L11)
?L1230:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L1211
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpCloseSearchInd
	bra	(?L11)
?L1238:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L1211
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpServiceSearchCfm
	bra	(?L11)
?L1246:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L1211
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpAttributeSearchCfm
	bra	(?L11)
?L1254:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L1211
	ld	AH,@(H'0003,Y)
	add	AH,#H'0017
	ld	AL,@(H'0006,Y)
	bsr	$_connectionHandleSdpServiceSearchAttributeCfm
	bra	(?L11)
?L1266:
	st	AL,@(0,Y)
	ld	AH,#H'0005
	ld	AL,@(H'0004,Y)
	bsr	_handleUnexpected
	bra	(?L11)
?L19:
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0004,Y)
	bsr	_handleUnexpected
	bra	(?L11)
?L642:
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	st	AL,@(0,Y)
	ld	AH,#H'0001
	ld	AL,@(H'0004,Y)
	bsr	_handleUnexpected
	bra	(?L11)
?L1039:
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	st	AL,@(0,Y)
	ld	AH,#H'0002
	ld	AL,@(H'0004,Y)
	bsr	_handleUnexpected
	bra	(?L11)
?L1149:
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	st	AL,@(0,Y)
	ld	AH,#H'0004
	ld	AL,@(H'0004,Y)
	bsr	_handleUnexpected
	bra	(?L11)
?L1211:
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	st	AL,@(0,Y)
	ld	AH,#H'0003
	ld	AL,@(H'0004,Y)
	bsr	_handleUnexpected
?L11:
?LBE2:
?LBE_connectionBluestackHandler:
	leave	#6
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 21 used[1] = 148 total = 169
;# Function pattern *movqi3 used[0] = 280 total = 280
;# Function pattern *addqi2 used[0] = 68 used[2] = 1 total = 69
;# Function pattern jump used[0] = 182 total = 182
;# Function pattern *call1 used[0] = 158 total = 158
;# Function pattern *call_value1 used[0] = 1 total = 1
;# Function pattern tablejump_1 used[0] = 5 total = 5
;# Function pattern movstrqi+2 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[1] = 2 total = 2
;# Function pattern movstrqi+4 used[1] = 39 total = 39
;# Function pattern movstrqi+5 used[0] = 206 total = 206
	MODULE	dm_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_VmSendDmPrim
;# end scan referenced symbols
	.CODE
_setDefaultLinkPolicy:
	enter	#3
?LBB_setDefaultLinkPolicy:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB2:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'2804
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0002,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE2:
?LBE_setDefaultLinkPolicy:
	leave	#3
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
;# begin scan referenced symbols
;# import $_StreamConfigure
;# end scan referenced symbols
$_connectionDmInit:
	enter	#1
?LBB_connectionDmInit:
?LBB3:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0000
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	AH,#H'0001
	ld	AL,#H'0001
;	bsr	$_StreamConfigure
	DC	((256*70)+9)
?LBE3:
?LBE_connectionDmInit:
	leave	#1
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# import _setDefaultLinkPolicy
;# end scan referenced symbols
$_connectionDmInfoInit:
	enter	#1
?LBB_connectionDmInfoInit:
?LBB4:
	ld	AH,#H'0005
	ld	AL,#H'0005
	bsr	_setDefaultLinkPolicy
?LBB5:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'3000
	st	AL,@(0,X)
	ld	AL,#H'0001
	st	AL,@(H'0002,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE5:
?LBE4:
?LBE_connectionDmInfoInit:
	leave	#1
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
	ENDMOD

;# Function pattern *movqi2 used[0] = 13 total = 13
;# Function pattern *movqi3 used[0] = 14 total = 14
;# Function pattern *call1 used[0] = 5 total = 5
;# Function pattern *call_value1 used[0] = 3 total = 3
	MODULE	dm_security_auth
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_connectionConvertBdaddr_t
;# import $_memcpy
;# import $_VmSendDmPrim
;# end scan referenced symbols
	.CODE
_register_device:
	enter	#4
?LBB_register_device:
	st	AH,@(H'0001,Y)
?LBB2:
	ld	AH,#H'0018
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,#H'2C08
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(H'0001,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,#H'0001
	ld	X,@(H'0002,Y)
	st	AH,@(H'0005,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0014,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0006,X)
	st	AH,@(H'0007,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0008
	ld	X,@(H'0001,Y)
	add	X,#H'0004
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AL,@$XAP_UXL
	bsr	$_memcpy
	ld	AH,@(H'0002,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE2:
?LBE_register_device:
	leave	#4
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
;# begin scan referenced symbols
;# end scan referenced symbols
_unregister_device:
	enter	#3
?LBB_unregister_device:
	st	AH,@(0,Y)
?LBB3:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2C09
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0001,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE3:
?LBE_unregister_device:
	leave	#3
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# import $_PsRetrieve
;# end scan referenced symbols
_isTdlEmpty:
	enter	#23
?LBB_isTdlEmpty:
?LBB4:
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AH,#H'002A
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L4
	ld	AH,#H'0000
	bra	(?L3)
?L4:
	ld	AH,#H'0001
?L3:
?LBE4:
?LBE_isTdlEmpty:
	leave	#23
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;# begin scan referenced symbols
;# import $_BdaddrIsSame
;# end scan referenced symbols
_find_trusted_device:
	enter	#25
?LBB_find_trusted_device:
	st	AH,@(H'0016,Y)
?LBB5:
	ld	AL,#H'0000
	st	AL,@(H'0017,Y)
?L13:
	ld	AH,@(H'0017,Y)
	add	AH,#H'002A
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L9
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	AL,@(H'0016,Y)
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	beq	?L9
	ld	AH,@(H'0017,Y)
	add	AH,#H'0001
	bra	(?L6)
?L9:
	ld	AL,@(H'0017,Y)
	add	AL,#H'0001
	st	AL,@(H'0017,Y)
	cmp	AL,#H'0007
	bcz	?L13
	ld	AH,#H'0000
?L6:
?LBE5:
?LBE_find_trusted_device:
	leave	#25
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;# begin scan referenced symbols
;# import _unregister_device
;# import $_PsStore
;# end scan referenced symbols
_find_free_position:
	enter	#38
?LBB_find_free_position:
?LBB6:
	ld	AH,#H'0000
	st	AH,@(H'0022,Y)
?L23:
	ld	AH,@(H'0022,Y)
	add	AH,#H'002A
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0009
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	bne	?L20
	ld	AH,@(H'0022,Y)
	add	AH,#H'0001
	bra	(?L17)
?L20:
	ld	AL,@(H'0022,Y)
	add	AL,#H'0001
	st	AL,@(H'0022,Y)
	cmp	AL,#H'0007
	bcz	?L23
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	ld	AH,#H'0008
	st	AH,@(H'0023,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
?L24:
	ld	AH,@(H'0023,Y)
	add	AH,#-H'0001
	st	AH,@(H'0023,Y)
	ld	X,@$XAP_AH
	add	X,@$XAP_AL
	tst	@(0,X)
	bne	?L25
	cmp	AH,#H'0000
	bne	?L24
?L25:
	ld	X,@$XAP_UY
	add	X,@(H'0023,Y)
	ld	X,@(H'0001,X)
	st	X,@(H'0024,Y)
	ld	AH,@$XAP_UXL
	add	AH,#H'0029
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0009
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L29
?LBB7:
	ld	AL,@(H'0009,Y)
	st	AL,@(H'001E,Y)
	ld	X,@$XAP_UY
	add	X,#H'001E
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'000C,Y)
	st	AL,@(H'0003,X)
	ld	AH,#H'0015
	st	AH,@(0,Y)
	ld	AH,#H'0028
	ld	AL,@$XAP_UY
	add	AL,#H'0009
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L29
	ld	AH,@$XAP_UY
	add	AH,#H'0009
	ld	AL,@$XAP_UY
	add	AL,#H'001E
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	bne	?L29
	ld	AH,@$XAP_UY
	add	AH,#H'001E
	bsr	_unregister_device
?L29:
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	ld	X,@(H'0023,Y)
?LBE7:
	add	X,@$XAP_AL
	ld	AH,#H'0000
	st	AH,@(0,X)
	ld	AH,#H'0008
	st	AH,@(0,Y)
	ld	AH,#H'0029
;	bsr	$_PsStore
	DC	((256*17)+9)
	ld	AH,@(H'0024,Y)
?L17:
?LBE6:
?LBE_find_free_position:
	leave	#38
;.stabn	192,0,0,?LBB6
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;.stabn	224,0,0,?LBE6
;# begin scan referenced symbols
;# end scan referenced symbols
_search_trusted_device_index:
	enter	#12
?LBB_search_trusted_device_index:
	st	AH,@(H'0009,Y)
?LBB8:
	ld	AL,#H'0063
	st	AL,@(H'000A,Y)
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L36
	ld	AL,#H'0000
	st	AL,@(H'000A,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
?L42:
	ld	X,@(H'000A,Y)
	add	X,@$XAP_AH
	ld	AL,@(0,X)
	cmp	AL,@(H'0009,Y)
	beq	?L36
	ld	AL,@(H'000A,Y)
	add	AL,#H'0001
	st	AL,@(H'000A,Y)
	cmp	AL,#H'0007
	bcz	?L42
?L36:
?LBE8:
	ld	AH,@(H'000A,Y)
?LBE_search_trusted_device_index:
	leave	#12
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
;# begin scan referenced symbols
;# end scan referenced symbols
_update_trusted_device_index:
	enter	#12
?LBB_update_trusted_device_index:
	st	AH,@(H'0009,Y)
	st	AL,@(H'000A,Y)
?LBB9:
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L46
	ld	AL,@(H'000A,Y)
	cmp	AL,#H'0063
	beq	?L48
	ld	X,#H'0000
	st	X,@H'fff8
	cmp	X,@$XAP_AL
	bcc	?L48
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	st	AL,@H'fff9
?L53:
	ld	AL,@(H'000A,Y)
	sub	AL,@H'fff8
	ld	AH,@H'fff9
	add	AH,@$XAP_AL
	ld	X,@$XAP_UY
	add	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0001
	add	AL,@H'fff8
	st	AL,@H'fff8
	cmp	AL,@(H'000A,Y)
	bcs	?L53
?L48:
	ld	AL,@(H'0009,Y)
	st	AL,@(H'0001,Y)
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsStore
	DC	((256*17)+9)
?L46:
?LBE9:
?LBE_update_trusted_device_index:
	leave	#12
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
;# begin scan referenced symbols
;# import _register_device
;# end scan referenced symbols
_update_trusted_device_list:
	enter	#25
?LBB_update_trusted_device_list:
	ld	X,@$XAP_AL
?LBB10:
	ld	AL,#H'0000
	st	AL,@(H'0016,Y)
	ld	AL,#H'0001
	st	AL,@(H'0017,Y)
	cmp	AH,#H'0000
	beq	?L59
	add	AH,#-H'0001
	st	AH,@(H'0016,Y)
?L59:
	ld	AL,@(0,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(H'0004,Y)
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0005
	ld	AL,@(H'0019,Y)
	bsr	$_memcpy
	ld	AL,@(H'001A,Y)
	st	AL,@(H'0015,Y)
	ld	AH,@(H'0016,Y)
	add	AH,#H'002A
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsStore
	DC	((256*17)+9)
	cmp	AH,#H'0000
	beq	?L60
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	_register_device
	bra	(?L61)
?L60:
	ld	AL,#H'0000
	st	AL,@(H'0017,Y)
?L61:
?LBE10:
	ld	AH,@(H'0017,Y)
?LBE_update_trusted_device_list:
	leave	#25
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;# begin scan referenced symbols
;# end scan referenced symbols
_store_default_device:
	enter	#24
?LBB_store_default_device:
	ld	X,@$XAP_AH
?LBB11:
	ld	AH,#H'0001
	st	AH,@(H'0016,Y)
	ld	AH,@(0,X)
	st	AH,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	st	AH,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	st	AH,@(H'0003,Y)
	ld	AH,@(H'0003,X)
	st	AH,@(H'0004,Y)
	ld	AH,#H'0010
	st	AH,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0005
	bsr	$_memcpy
	ld	AL,@(H'0018,Y)
	st	AL,@(H'0015,Y)
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AH,#H'0028
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsStore
	DC	((256*17)+9)
	cmp	AH,#H'0000
	bne	?L63
	ld	AH,#H'0000
	st	AH,@(H'0016,Y)
?L63:
?LBE11:
	ld	AH,@(H'0016,Y)
?LBE_store_default_device:
	leave	#24
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
;# begin scan referenced symbols
;# end scan referenced symbols
_delete_from_trusted_device_index:
	enter	#14
?LBB_delete_from_trusted_device_index:
	st	AH,@(H'0009,Y)
	st	AL,@(H'000A,Y)
?LBB12:
	ld	AL,#H'0000
	st	AL,@(H'000B,Y)
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L65
	ld	AL,@(H'0009,Y)
	cmp	AL,#H'0063
	beq	?L66
	ld	AH,@$XAP_AL
	ld	AL,@(H'000A,Y)
	add	AL,#-H'0001
	cmp	AH,@$XAP_AL
	bcc	?L73
	ld	X,@$XAP_UY
	add	X,#H'0001
	st	X,@H'fff9
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	st	AL,@(-1,Y)
	ld	X,@(H'000A,Y)
	add	X,#-H'0001
	st	X,@H'fff8
?L71:
	ld	AL,@H'fff9
	add	AL,@$XAP_AH
	st	AL,@(H'000C,Y)
	ld	AL,@$XAP_AH
	add	AL,@(-1,Y)
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@(H'000C,Y)
	st	AL,@(0,X)
	add	AH,#H'0001
	cmp	AH,@H'fff8
	bcs	?L71
?L73:
	ld	X,@$XAP_UY
	add	X,@(H'000A,Y)
	ld	AL,#H'0000
	st	AL,@(0,X)
?L66:
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsStore
	DC	((256*17)+9)
	ld	AL,#H'0001
	st	AL,@(H'000B,Y)
?L65:
?LBE12:
	ld	AH,@(H'000B,Y)
?LBE_delete_from_trusted_device_index:
	leave	#14
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
;# begin scan referenced symbols
;# import $_memset
;# end scan referenced symbols
$_connectionAuthInit:
	enter	#33
?LBB_connectionAuthInit:
?LBB13:
	ld	AL,#H'0000
	st	AL,@(H'001E,Y)
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AH,#H'0028
	ld	AL,@$XAP_UY
	add	AL,#H'0009
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L78
	ld	AH,@$XAP_UY
	add	AH,#H'0009
	bsr	_register_device
?L78:
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	bne	?L79
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	AL,#H'0000
	bsr	$_memset
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsStore
	DC	((256*17)+9)
	ld	AL,#H'002A
	st	AL,@(H'001F,Y)
?L84:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(H'001F,Y)
;	bsr	$_PsStore
	DC	((256*17)+9)
	ld	AL,@(H'001F,Y)
	add	AL,#H'0001
	st	AL,@(H'001F,Y)
	cmp	AL,#H'0031
	bcz	?L84
	bra	(?L85)
?L79:
	ld	AL,#H'0000
	st	AL,@(H'001F,Y)
?L91:
	ld	AH,@(H'001F,Y)
	add	AH,#H'002A
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0009
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L88
	ld	AH,@$XAP_UY
	add	AH,#H'0009
	bsr	_register_device
	ld	AL,@(H'001E,Y)
	add	AL,#H'0001
	st	AL,@(H'001E,Y)
?L88:
	ld	AL,@(H'001F,Y)
	add	AL,#H'0001
	st	AL,@(H'001F,Y)
	cmp	AL,#H'0007
	bcz	?L91
?L85:
?LBE13:
	ld	AH,@(H'001E,Y)
?LBE_connectionAuthInit:
	leave	#33
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
;# begin scan referenced symbols
;# import _isTdlEmpty
;# import _store_default_device
;# import _find_trusted_device
;# import _search_trusted_device_index
;# import _find_free_position
;# import _update_trusted_device_index
;# import _update_trusted_device_list
;# end scan referenced symbols
$_connectionAuthAddDevice:
	enter	#28
?LBB_connectionAuthAddDevice:
	st	AH,@(H'0017,Y)
	st	AL,@(H'0018,Y)
?LBB14:
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AH,#H'0028
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L98
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	ld	AL,@(H'0017,Y)
	bsr	$_BdaddrIsSame
	bra	(?L106)
?L98:
	bsr	_isTdlEmpty
?L106:
	cmp	AH,#H'0000
	beq	?L100
	ld	AL,@(H'001C,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0017,Y)
	ld	AL,@(H'0018,Y)
	bsr	_store_default_device
?L100:
	ld	AH,@(H'0017,Y)
	bsr	_find_trusted_device
	st	AH,@(H'0019,Y)
	cmp	AH,#H'0000
	beq	?L102
	bsr	_search_trusted_device_index
	st	AH,@(H'001A,Y)
	bra	(?L103)
?L102:
	ld	AL,#H'0007
	st	AL,@(H'001A,Y)
	bsr	_find_free_position
	st	AH,@(H'0019,Y)
	cmp	AH,#H'0000
	bne	?L103
	ld	AL,#H'0001
	st	AL,@(H'0019,Y)
?L103:
	ld	AH,@(H'0019,Y)
	ld	AL,@(H'001A,Y)
	bsr	_update_trusted_device_index
	ld	AL,@(H'0018,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'001C,Y)
	st	AL,@(H'0001,Y)
	ld	AH,@(H'0019,Y)
	ld	AL,@(H'0017,Y)
	bsr	_update_trusted_device_list
?LBE14:
?LBE_connectionAuthAddDevice:
	leave	#28
;.stabn	192,0,0,?LBB14
;.stabn	224,0,0,?LBE14
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionAuthGetDevice:
	enter	#25
?LBB_connectionAuthGetDevice:
	st	AL,@(H'0016,Y)
?LBB15:
	ld	AL,#H'0000
	st	AL,@(H'0017,Y)
	bsr	_find_trusted_device
	cmp	AH,#H'0000
	beq	?L108
	add	AH,#H'0029
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	ld	X,#H'0001
	st	X,@(H'0017,Y)
	ld	AL,@(H'0015,Y)
	ld	X,@(H'0019,Y)
	st	AL,@(0,X)
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AH,@(H'0016,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0005
	bsr	$_memcpy
?L108:
?LBE15:
	ld	AH,@(H'0017,Y)
?LBE_connectionAuthGetDevice:
	leave	#25
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
;# begin scan referenced symbols
;# import _delete_from_trusted_device_index
;# end scan referenced symbols
$_connectionAuthDeleteDevice:
	enter	#26
?LBB_connectionAuthDeleteDevice:
	st	AH,@(H'0016,Y)
?LBB16:
	ld	AL,#H'0000
	st	AL,@(H'0018,Y)
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AH,#H'0028
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L110
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	AL,@(H'0016,Y)
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	bne	?L110
	ld	AH,@(H'0016,Y)
	bsr	_unregister_device
	ld	AL,@(H'0018,Y)
	st	AL,@(0,Y)
	ld	AH,#H'0028
	ld	AL,#H'0000
;	bsr	$_PsStore
	DC	((256*17)+9)
?L110:
	ld	AH,@(H'0016,Y)
	bsr	_find_trusted_device
	st	AH,@(H'0017,Y)
	cmp	AH,#H'0000
	beq	?L112
	bsr	_search_trusted_device_index
	ld	AL,#H'0008
	bsr	_delete_from_trusted_device_index
	ld	AH,@(H'0017,Y)
	add	AH,#H'0029
	ld	AL,#H'0000
	st	AL,@(0,Y)
;	bsr	$_PsStore
	DC	((256*17)+9)
	ld	AH,@(H'0016,Y)
	bsr	_unregister_device
	ld	AL,#H'0001
	st	AL,@(H'0018,Y)
?L112:
?LBE16:
	ld	AH,@(H'0018,Y)
?LBE_connectionAuthDeleteDevice:
	leave	#26
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionAuthDeleteAllDevice:
	enter	#35
?LBB_connectionAuthDeleteAllDevice:
	st	AH,@(H'001E,Y)
?LBB17:
	ld	AL,#H'0000
	st	AL,@(H'001F,Y)
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AH,#H'0028
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L114
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	_unregister_device
	ld	AL,@(H'001F,Y)
	st	AL,@(0,Y)
	ld	AH,#H'0028
	ld	AL,#H'0000
;	bsr	$_PsStore
	DC	((256*17)+9)
?L114:
	ld	AL,#H'0000
	st	AL,@(H'0020,Y)
?L121:
	ld	AL,@(H'0020,Y)
	add	AL,#H'002A
	st	AL,@(H'0021,Y)
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AH,@(H'0021,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L119
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	_unregister_device
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(H'0021,Y)
;	bsr	$_PsStore
	DC	((256*17)+9)
	ld	AL,#H'0001
	st	AL,@(H'001F,Y)
?L119:
	tst	@(H'001E,Y)
	beq	?L117
	ld	AH,@(H'001E,Y)
	add	AH,@(H'0020,Y)
	ld	AL,#H'0000
	st	AL,@(0,Y)
;	bsr	$_PsStore
	DC	((256*17)+9)
?L117:
	ld	AL,@(H'0020,Y)
	add	AL,#H'0001
	st	AL,@(H'0020,Y)
	cmp	AL,#H'0007
	bcz	?L121
	tst	@(H'001F,Y)
	beq	?L122
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0016
	ld	AL,#H'0000
	bsr	$_memset
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0016
;	bsr	$_PsStore
	DC	((256*17)+9)
?L122:
?LBE17:
	ld	AH,@(H'001F,Y)
?LBE_connectionAuthDeleteAllDevice:
	leave	#35
;.stabn	192,0,0,?LBB17
;.stabn	224,0,0,?LBE17
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionAuthSetTrustLevel:
	enter	#25
?LBB_connectionAuthSetTrustLevel:
	st	AL,@(H'0016,Y)
?LBB18:
	bsr	_find_trusted_device
	cmp	AH,#H'0000
	beq	?L127
	add	AH,#H'0029
	st	AH,@(H'0017,Y)
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	ld	AL,@(H'0016,Y)
	st	AL,@(H'0015,Y)
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AH,@(H'0017,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsStore
	DC	((256*17)+9)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	_register_device
	ld	AH,#H'0001
	bra	(?L126)
?L127:
	ld	AH,#H'0000
?L126:
?LBE18:
?LBE_connectionAuthSetTrustLevel:
	leave	#25
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionAuthUpdateMru:
	enter	#3
?LBB_connectionAuthUpdateMru:
?LBB19:
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	bsr	_find_trusted_device
	st	AH,@(0,Y)
	cmp	AH,#H'0000
	beq	?L129
	ld	AL,#H'0001
	st	AL,@(H'0001,Y)
	bsr	_search_trusted_device_index
	ld	AL,@$XAP_AH
	ld	AH,@(0,Y)
	bsr	_update_trusted_device_index
?L129:
?LBE19:
	ld	AH,@(H'0001,Y)
?LBE_connectionAuthUpdateMru:
	leave	#3
;.stabn	192,0,0,?LBB19
;.stabn	224,0,0,?LBE19
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionAuthSendLinkKey:
	enter	#25
?LBB_connectionAuthSendLinkKey:
	st	AH,@(H'0016,Y)
?LBB20:
	ld	AH,#H'0016
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0017,Y)
	ld	AL,#H'2C0A
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(H'0016,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0016,Y)
	bsr	_find_trusted_device
	cmp	AH,#H'0000
	beq	?L131
	add	AH,#H'0029
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	ld	AL,#H'0001
	ld	X,@(H'0017,Y)
	st	AL,@(H'0015,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0005
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0005
	bsr	$_memcpy
	bra	(?L132)
?L131:
	ld	AL,#H'0000
	ld	X,@(H'0017,Y)
	st	AL,@(H'0015,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0005
	ld	AL,#H'0010
	st	AL,@(0,Y)
	ld	AL,#H'0000
	bsr	$_memset
?L132:
	ld	AH,@(H'0017,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE20:
?LBE_connectionAuthSendLinkKey:
	leave	#25
;.stabn	192,0,0,?LBB20
;.stabn	224,0,0,?LBE20
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionAuthPutAttribute:
	enter	#3
?LBB_connectionAuthPutAttribute:
	st	AH,@(H'0001,Y)
?LBB21:
	ld	AH,@$XAP_AL
	bsr	_find_trusted_device
	cmp	AH,#H'0000
	beq	?L133
	add	AH,#-H'0001
	ld	AL,@(H'0001,Y)
	add	AH,@$XAP_AL
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0004,Y)
;	bsr	$_PsStore
	DC	((256*17)+9)
?L133:
?LBE21:
?LBE_connectionAuthPutAttribute:
	leave	#3
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
;# begin scan referenced symbols
;# import $_MessageSend
;# end scan referenced symbols
$_connectionAuthGetAttribute:
	enter	#6
?LBB_connectionAuthGetAttribute:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@(H'0006,Y)
?LBB22:
	bsr	_find_trusted_device
	st	AH,@(H'0003,Y)
	tst	@(H'0001,Y)
	beq	?L135
	ld	AH,@(H'0007,Y)
?LBB23:
	add	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0001
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0007,Y)
	st	AL,@(H'0001,X)
	ld	AL,#H'0000
	st	AL,@(H'0002,X)
	tst	@(H'0003,Y)
	beq	?L137
	ld	AL,@(H'0003,Y)
	add	AL,#-H'0001
	st	AL,@(H'0003,Y)
	tst	@(H'0007,Y)
	beq	?L137
	ld	AH,@(H'0002,Y)
	add	AH,@$XAP_AL
	ld	X,@(H'0004,Y)
	add	X,#H'0002
	ld	AL,@(H'0007,Y)
	st	AL,@(0,Y)
	ld	AL,@$XAP_UXL
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L137
	ld	AL,#H'0000
	ld	X,@(H'0004,Y)
	st	AL,@(0,X)
?L137:
	ld	X,@(H'0004,Y)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7030
	bsr	$_MessageSend
?L135:
?LBE23:
?LBE22:
?LBE_connectionAuthGetAttribute:
	leave	#6
;.stabn	192,0,0,?LBB22
;.stabn	192,0,0,?LBB23
;.stabn	224,0,0,?LBE23
;.stabn	224,0,0,?LBE22
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionAuthGetIndexedAttribute:
	enter	#35
?LBB_connectionAuthGetIndexedAttribute:
	st	AH,@(H'001E,Y)
	st	AL,@(H'001F,Y)
	ld	AH,@(H'0024,Y)
?LBB24:
?LBB25:
	add	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0020,Y)
	ld	AL,#H'0001
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0024,Y)
	st	AL,@(H'0005,X)
	ld	AL,#H'0000
	st	AL,@(H'0006,X)
	ld	X,@(H'0023,Y)
	cmp	X,#(H'0001+H'0007)
	bcc	?L141
	ld	AL,#H'0008
	st	AL,@(0,Y)
	ld	AH,#H'0029
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L141
	ld	AL,@(H'0023,Y)
	add	AL,@$XAP_UY
	add	AL,#H'0001
	st	AL,@(H'0021,Y)
	ld	X,@$XAP_AL
	tst	@(0,X)
	beq	?L141
	ld	AH,@(0,X)
	add	AH,#H'0029
	ld	AL,#H'0015
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0009
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L141
	ld	AL,@(H'0009,Y)
	ld	X,@(H'0020,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'000C,Y)
	st	AL,@(H'0004,X)
	tst	@(H'0024,Y)
	beq	?L143
	ld	AH,@(H'001F,Y)
	ld	X,@(H'0021,Y)
	add	AH,@(0,X)
	ld	X,@(H'0020,Y)
	add	X,#H'0006
	ld	AL,@(H'0024,Y)
	st	AL,@(0,Y)
	ld	AL,@$XAP_UXL
;	bsr	$_PsRetrieve
	DC	((256*18)+9)
	cmp	AH,#H'0000
	beq	?L141
?L143:
	ld	AL,#H'0000
	ld	X,@(H'0020,Y)
	st	AL,@(0,X)
?L141:
	ld	AL,@(H'0020,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'001E,Y)
	ld	AL,#H'7031
	bsr	$_MessageSend
?LBE25:
?LBE24:
?LBE_connectionAuthGetIndexedAttribute:
	leave	#35
;.stabn	192,0,0,?LBB24
;.stabn	192,0,0,?LBB25
;.stabn	224,0,0,?LBE25
;.stabn	224,0,0,?LBE24
	ENDMOD

;# Function pattern *movqi2 used[0] = 193 used[1] = 39 total = 232
;# Function pattern *movqi3 used[0] = 192 total = 192
;# Function pattern *movqi8 used[0] = 10 total = 10
;# Function pattern *addqi4 used[0] = 1 total = 1
;# Function pattern *addqi0 used[0] = 53 total = 53
;# Function pattern *addqi2 used[0] = 47 used[2] = 5 total = 52
;# Function pattern *subqi3 used[0] = 1 total = 1
;# Function pattern jump used[0] = 9 total = 9
;# Function pattern *call1 used[0] = 19 total = 19
;# Function pattern *call_value1 used[0] = 71 total = 71
;# Function pattern movstrqi+2 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 35 used[1] = 8 total = 43
;# Function pattern movstrqi+4 used[1] = 1 total = 1
;# Function pattern movstrqi+5 used[0] = 13 total = 13
	MODULE	dm_security_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_connectionGetCmTask
;# import $_ConnectionSmSetSecurityMode
;# import $_connectionAuthInit
;# import $_connectionSendInternalInitCfm
;# end scan referenced symbols
	.CODE
$_connectionSmInit:
	enter	#3
?LBB_connectionSmInit:
?LBB2:
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0001,Y)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	bsr	$_ConnectionSmSetSecurityMode
	bsr	$_connectionAuthInit
	st	AH,@(H'0001,Y)
	cmp	AH,#H'0000
	bne	?L2
	ld	AH,#H'0040
	bsr	$_connectionSendInternalInitCfm
?L2:
?LBE2:
	ld	AH,@(H'0001,Y)
?LBE_connectionSmInit:
	leave	#3
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 3 used[1] = 1 total = 4
;# Function pattern *movqi3 used[0] = 4 total = 4
;# Function pattern *call1 used[0] = 2 total = 2
;# Function pattern *call_value1 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 1 total = 1
	MODULE	dm_security_mode
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_connectionGetCmTask
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
$_ConnectionSmSetSecurityMode:
	enter	#5
?LBB_ConnectionSmSetSecurityMode:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
?LBB3:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'000B
	bsr	$_MessageSend
?LBE3:
?LBE2:
?LBE_ConnectionSmSetSecurityMode:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
	ENDMOD

;# Function pattern *movqi2 used[0] = 7 total = 7
;# Function pattern *movqi3 used[0] = 4 total = 4
;# Function pattern *call1 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 2 total = 2
;# Function pattern movstrqi+2 used[0] = 1 total = 1
	MODULE	l2cap_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_connectionSendInternalInitCfm
;# end scan referenced symbols
	.CODE
$_connectionL2capInit:
	enter	#1
?LBB_connectionL2capInit:
	ld	AH,#H'0004
	bsr	$_connectionSendInternalInitCfm
?LBE_connectionL2capInit:
	leave	#1
	ENDMOD

;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *call1 used[0] = 1 total = 1
	MODULE	rfc_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_VmSendRfcommPrim
;# end scan referenced symbols
	.CODE
$_connectionRfcInit:
	enter	#1
?LBB_connectionRfcInit:
?LBB2:
?LBB3:
	ld	AH,#H'000C
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0001
	st	AL,@(0,X)
	ld	AH,#H'0000
	st	AH,@(H'0001,X)
	ld	AL,#H'0003
	st	AL,@(H'0002,X)
	ld	AL,#H'0001
	st	AL,@(H'0003,X)
	st	AL,@(H'0004,X)
	st	AH,@(H'0005,X)
	ld	AL,#H'03E8
	st	AL,@(H'0007,X)
	st	AH,@(H'0006,X)
	st	AH,@(H'0009,X)
	st	AH,@(H'0008,X)
	st	AH,@(H'000B,X)
	st	AH,@(H'000A,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE3:
?LBE2:
?LBE_connectionRfcInit:
	leave	#1
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
	ENDMOD

;# Function pattern *movqi2 used[0] = 14 total = 14
;# Function pattern *movqi3 used[0] = 6 total = 6
;# Function pattern *call1 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 1 total = 1
	MODULE	sdp_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_BdaddrSetZero
;# import $_connectionSendInternalInitCfm
;# end scan referenced symbols
	.CODE
$_connectionSdpInit:
	enter	#1
?LBB_connectionSdpInit:
	add	AH,#H'0002
	bsr	$_BdaddrSetZero
	ld	AH,#H'0020
	bsr	$_connectionSendInternalInitCfm
?LBE_connectionSdpInit:
	leave	#1
	ENDMOD

;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 1 total = 1
;# Function pattern *call1 used[0] = 2 total = 2
	MODULE	tcp_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_connectionSendInternalInitCfm
;# end scan referenced symbols
	.CODE
$_connectionTcpInit:
	enter	#1
?LBB_connectionTcpInit:
	ld	AH,#H'0010
	bsr	$_connectionSendInternalInitCfm
?LBE_connectionTcpInit:
	leave	#1
	ENDMOD

;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *call1 used[0] = 1 total = 1
	MODULE	udp_init
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_connectionSendInternalInitCfm
;# end scan referenced symbols
	.CODE
$_connectionUdpInit:
	enter	#1
?LBB_connectionUdpInit:
	ld	AH,#H'0008
	bsr	$_connectionSendInternalInitCfm
?LBE_connectionUdpInit:
	leave	#1
	ENDMOD

;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *call1 used[0] = 1 total = 1
	MODULE	common
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
	.CODE
$_connectionConvertHciStatus:
	enter	#1
?LBB_connectionConvertHciStatus:
	cmp	AH,#(H'0001+H'0035)
	bcc	?L57
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE58,X)
	brxl
	.SEG	CONST
?JTBASE58:
	.CODE
?L58:
	.SEG	CONST
	dc	?L3-?L58
	dc	?L4-?L58
	dc	?L5-?L58
	dc	?L6-?L58
	dc	?L7-?L58
	dc	?L8-?L58
	dc	?L9-?L58
	dc	?L10-?L58
	dc	?L11-?L58
	dc	?L12-?L58
	dc	?L13-?L58
	dc	?L14-?L58
	dc	?L15-?L58
	dc	?L16-?L58
	dc	?L17-?L58
	dc	?L18-?L58
	dc	?L19-?L58
	dc	?L20-?L58
	dc	?L21-?L58
	dc	?L22-?L58
	dc	?L23-?L58
	dc	?L24-?L58
	dc	?L25-?L58
	dc	?L26-?L58
	dc	?L27-?L58
	dc	?L28-?L58
	dc	?L29-?L58
	dc	?L30-?L58
	dc	?L31-?L58
	dc	?L32-?L58
	dc	?L33-?L58
	dc	?L34-?L58
	dc	?L35-?L58
	dc	?L36-?L58
	dc	?L37-?L58
	dc	?L38-?L58
	dc	?L39-?L58
	dc	?L40-?L58
	dc	?L41-?L58
	dc	?L42-?L58
	dc	?L43-?L58
	dc	?L44-?L58
	dc	?L45-?L58
	dc	?L46-?L58
	dc	?L47-?L58
	dc	?L48-?L58
	dc	?L49-?L58
	dc	?L50-?L58
	dc	?L51-?L58
	dc	?L52-?L58
	dc	?L53-?L58
	dc	?L54-?L58
	dc	?L55-?L58
	dc	?L56-?L58
	.CODE
?L3:
	ld	AH,#H'0000
	bra	(?L1)
?L4:
	ld	AH,#H'0001
	bra	(?L1)
?L5:
	ld	AH,#H'0002
	bra	(?L1)
?L6:
	ld	AH,#H'0003
	bra	(?L1)
?L7:
	ld	AH,#H'0004
	bra	(?L1)
?L8:
	ld	AH,#H'0005
	bra	(?L1)
?L9:
	ld	AH,#H'0006
	bra	(?L1)
?L10:
	ld	AH,#H'0007
	bra	(?L1)
?L11:
	ld	AH,#H'0008
	bra	(?L1)
?L12:
	ld	AH,#H'0009
	bra	(?L1)
?L13:
	ld	AH,#H'000A
	bra	(?L1)
?L14:
	ld	AH,#H'000B
	bra	(?L1)
?L15:
	ld	AH,#H'000C
	bra	(?L1)
?L16:
	ld	AH,#H'000D
	bra	(?L1)
?L17:
	ld	AH,#H'000E
	bra	(?L1)
?L18:
	ld	AH,#H'000F
	bra	(?L1)
?L19:
	ld	AH,#H'0010
	bra	(?L1)
?L20:
	ld	AH,#H'0011
	bra	(?L1)
?L21:
	ld	AH,#H'0012
	bra	(?L1)
?L22:
	ld	AH,#H'0013
	bra	(?L1)
?L23:
	ld	AH,#H'0014
	bra	(?L1)
?L24:
	ld	AH,#H'0015
	bra	(?L1)
?L25:
	ld	AH,#H'0016
	bra	(?L1)
?L26:
	ld	AH,#H'0017
	bra	(?L1)
?L27:
	ld	AH,#H'0018
	bra	(?L1)
?L28:
	ld	AH,#H'0019
	bra	(?L1)
?L29:
	ld	AH,#H'001A
	bra	(?L1)
?L30:
	ld	AH,#H'001B
	bra	(?L1)
?L31:
	ld	AH,#H'001C
	bra	(?L1)
?L32:
	ld	AH,#H'001D
	bra	(?L1)
?L33:
	ld	AH,#H'001E
	bra	(?L1)
?L34:
	ld	AH,#H'001F
	bra	(?L1)
?L35:
	ld	AH,#H'0020
	bra	(?L1)
?L36:
	ld	AH,#H'0021
	bra	(?L1)
?L37:
	ld	AH,#H'0022
	bra	(?L1)
?L38:
	ld	AH,#H'0023
	bra	(?L1)
?L39:
	ld	AH,#H'0024
	bra	(?L1)
?L40:
	ld	AH,#H'0025
	bra	(?L1)
?L41:
	ld	AH,#H'0026
	bra	(?L1)
?L42:
	ld	AH,#H'0027
	bra	(?L1)
?L43:
	ld	AH,#H'0028
	bra	(?L1)
?L44:
	ld	AH,#H'0029
	bra	(?L1)
?L45:
	ld	AH,#H'002A
	bra	(?L1)
?L46:
	ld	AH,#H'002B
	bra	(?L1)
?L47:
	ld	AH,#H'002C
	bra	(?L1)
?L48:
	ld	AH,#H'002D
	bra	(?L1)
?L49:
	ld	AH,#H'002E
	bra	(?L1)
?L50:
	ld	AH,#H'002F
	bra	(?L1)
?L51:
	ld	AH,#H'0030
	bra	(?L1)
?L52:
	ld	AH,#H'0031
	bra	(?L1)
?L53:
	ld	AH,#H'0032
	bra	(?L1)
?L54:
	ld	AH,#H'0033
	bra	(?L1)
?L55:
	ld	AH,#H'0034
	bra	(?L1)
?L56:
	ld	AH,#H'0035
	bra	(?L1)
?L57:
	ld	AH,#H'0036
?L1:
?LBE_connectionConvertHciStatus:
	leave	#1
;# begin scan referenced symbols
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionConvertSdpOpenStatus:
	enter	#1
?LBB_connectionConvertSdpOpenStatus:
	cmp	AH,#(H'0001+H'0004)
	bcc	?L66
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE67,X)
	brxl
	.SEG	CONST
?JTBASE67:
	.CODE
?L67:
	.SEG	CONST
	dc	?L61-?L67
	dc	?L62-?L67
	dc	?L63-?L67
	dc	?L64-?L67
	dc	?L65-?L67
	.CODE
?L61:
	ld	AH,#H'0000
	bra	(?L59)
?L62:
	ld	AH,#H'0001
	bra	(?L59)
?L63:
	ld	AH,#H'0002
	bra	(?L59)
?L64:
	ld	AH,#H'0003
	bra	(?L59)
?L65:
	ld	AH,#H'0004
	bra	(?L59)
?L66:
	ld	AH,#H'0005
?L59:
?LBE_connectionConvertSdpOpenStatus:
	leave	#1
;# begin scan referenced symbols
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionConvertSdpSearchStatus:
	enter	#1
?LBB_connectionConvertSdpSearchStatus:
	cmp	AH,#(H'0001+H'001D)
	bcc	?L85
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE86,X)
	brxl
	.SEG	CONST
?JTBASE86:
	.CODE
?L86:
	.SEG	CONST
	dc	?L70-?L86
	dc	?L85-?L86
	dc	?L85-?L86
	dc	?L85-?L86
	dc	?L85-?L86
	dc	?L85-?L86
	dc	?L85-?L86
	dc	?L85-?L86
	dc	?L85-?L86
	dc	?L85-?L86
	dc	?L85-?L86
	dc	?L85-?L86
	dc	?L85-?L86
	dc	?L85-?L86
	dc	?L85-?L86
	dc	?L85-?L86
	dc	?L71-?L86
	dc	?L72-?L86
	dc	?L73-?L86
	dc	?L74-?L86
	dc	?L75-?L86
	dc	?L76-?L86
	dc	?L77-?L86
	dc	?L78-?L86
	dc	?L79-?L86
	dc	?L80-?L86
	dc	?L81-?L86
	dc	?L82-?L86
	dc	?L83-?L86
	dc	?L84-?L86
	.CODE
?L70:
	ld	AH,#H'0000
	bra	(?L68)
?L71:
	ld	AH,#H'0001
	bra	(?L68)
?L72:
	ld	AH,#H'0002
	bra	(?L68)
?L73:
	ld	AH,#H'0003
	bra	(?L68)
?L74:
	ld	AH,#H'0004
	bra	(?L68)
?L75:
	ld	AH,#H'0005
	bra	(?L68)
?L76:
	ld	AH,#H'0006
	bra	(?L68)
?L77:
	ld	AH,#H'0007
	bra	(?L68)
?L78:
	ld	AH,#H'0008
	bra	(?L68)
?L79:
	ld	AH,#H'0009
	bra	(?L68)
?L80:
	ld	AH,#H'000A
	bra	(?L68)
?L81:
	ld	AH,#H'000B
	bra	(?L68)
?L82:
	ld	AH,#H'000C
	bra	(?L68)
?L83:
	ld	AH,#H'000D
	bra	(?L68)
?L84:
	ld	AH,#H'000E
	bra	(?L68)
?L85:
	ld	AH,#H'000F
?L68:
?LBE_connectionConvertSdpSearchStatus:
	leave	#1
;# begin scan referenced symbols
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionConvertRfcommDisconnectStatus:
	enter	#1
?LBB_connectionConvertRfcommDisconnectStatus:
	cmp	AH,#(H'0001+H'0030)
	bcc	?L122
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE123,X)
	brxl
	.SEG	CONST
?JTBASE123:
	.CODE
?L123:
	.SEG	CONST
	dc	?L89-?L123
	dc	?L90-?L123
	dc	?L91-?L123
	dc	?L92-?L123
	dc	?L93-?L123
	dc	?L94-?L123
	dc	?L95-?L123
	dc	?L96-?L123
	dc	?L97-?L123
	dc	?L98-?L123
	dc	?L99-?L123
	dc	?L100-?L123
	dc	?L122-?L123
	dc	?L101-?L123
	dc	?L102-?L123
	dc	?L103-?L123
	dc	?L122-?L123
	dc	?L104-?L123
	dc	?L105-?L123
	dc	?L106-?L123
	dc	?L107-?L123
	dc	?L108-?L123
	dc	?L109-?L123
	dc	?L122-?L123
	dc	?L122-?L123
	dc	?L122-?L123
	dc	?L122-?L123
	dc	?L122-?L123
	dc	?L122-?L123
	dc	?L122-?L123
	dc	?L122-?L123
	dc	?L110-?L123
	dc	?L111-?L123
	dc	?L112-?L123
	dc	?L113-?L123
	dc	?L114-?L123
	dc	?L115-?L123
	dc	?L116-?L123
	dc	?L117-?L123
	dc	?L118-?L123
	dc	?L119-?L123
	dc	?L120-?L123
	dc	?L122-?L123
	dc	?L122-?L123
	dc	?L122-?L123
	dc	?L122-?L123
	dc	?L122-?L123
	dc	?L122-?L123
	dc	?L121-?L123
	.CODE
?L89:
	ld	AH,#H'0000
	bra	(?L87)
?L90:
	ld	AH,#H'0001
	bra	(?L87)
?L91:
	ld	AH,#H'0002
	bra	(?L87)
?L92:
	ld	AH,#H'0003
	bra	(?L87)
?L93:
	ld	AH,#H'0004
	bra	(?L87)
?L94:
	ld	AH,#H'0005
	bra	(?L87)
?L95:
	ld	AH,#H'0006
	bra	(?L87)
?L96:
	ld	AH,#H'0007
	bra	(?L87)
?L97:
	ld	AH,#H'0008
	bra	(?L87)
?L98:
	ld	AH,#H'0009
	bra	(?L87)
?L99:
	ld	AH,#H'000A
	bra	(?L87)
?L100:
	ld	AH,#H'000B
	bra	(?L87)
?L101:
	ld	AH,#H'000C
	bra	(?L87)
?L102:
	ld	AH,#H'000D
	bra	(?L87)
?L103:
	ld	AH,#H'000E
	bra	(?L87)
?L104:
	ld	AH,#H'000F
	bra	(?L87)
?L105:
	ld	AH,#H'0010
	bra	(?L87)
?L106:
	ld	AH,#H'0011
	bra	(?L87)
?L107:
	ld	AH,#H'0012
	bra	(?L87)
?L108:
	ld	AH,#H'0013
	bra	(?L87)
?L109:
	ld	AH,#H'0014
	bra	(?L87)
?L110:
	ld	AH,#H'0015
	bra	(?L87)
?L111:
	ld	AH,#H'0016
	bra	(?L87)
?L112:
	ld	AH,#H'0017
	bra	(?L87)
?L113:
	ld	AH,#H'0018
	bra	(?L87)
?L114:
	ld	AH,#H'0019
	bra	(?L87)
?L115:
	ld	AH,#H'001A
	bra	(?L87)
?L116:
	ld	AH,#H'001B
	bra	(?L87)
?L117:
	ld	AH,#H'001C
	bra	(?L87)
?L118:
	ld	AH,#H'001D
	bra	(?L87)
?L119:
	ld	AH,#H'001E
	bra	(?L87)
?L120:
	ld	AH,#H'001F
	bra	(?L87)
?L121:
	ld	AH,#H'0020
	bra	(?L87)
?L122:
	ld	AH,#H'0021
?L87:
?LBE_connectionConvertRfcommDisconnectStatus:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionConvertBdaddr_t:
	enter	#1
?LBB_connectionConvertBdaddr_t:
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,@$XAP_AL
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@H'fff8
	st	AH,@(0,X)
	st	AL,@(1,X)
	ld	X,@H'fff9
	ld	AL,@(H'0002,X)
	ld	X,@H'fff8
	st	AL,@(H'0002,X)
	ld	X,@H'fff9
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	st	AL,@(H'0003,X)
?LBE_connectionConvertBdaddr_t:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionConvertBdaddr:
	enter	#1
?LBB_connectionConvertBdaddr:
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,@$XAP_AL
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@H'fff8
	st	AH,@(0,X)
	st	AL,@(1,X)
	ld	X,@H'fff9
	ld	AL,@(H'0002,X)
	ld	X,@H'fff8
	st	AL,@(H'0002,X)
	ld	X,@H'fff9
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	st	AL,@(H'0003,X)
?LBE_connectionConvertBdaddr:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionConvertPageScanRepMode_t:
	enter	#1
?LBB_connectionConvertPageScanRepMode_t:
	cmp	AH,#H'0001
	beq	?L129
	cmp	AH,#H'0001
	bcs	?L128
	cmp	AH,#H'0002
	beq	?L130
	bra	(?L131)
?L128:
	ld	AH,#H'0000
	bra	(?L126)
?L129:
	ld	AH,#H'0001
	bra	(?L126)
?L130:
	ld	AH,#H'0002
	bra	(?L126)
?L131:
	ld	AH,#H'0003
?L126:
?LBE_connectionConvertPageScanRepMode_t:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionConvertPageScanRepMode:
	enter	#1
?LBB_connectionConvertPageScanRepMode:
	cmp	AH,#H'0001
	beq	?L139
	cmp	AH,#H'0001
	bcc	?L142
	ld	AH,#H'0000
	bra	(?L136)
?L139:
	ld	AH,#H'0001
	bra	(?L136)
?L142:
	ld	AH,#H'0002
?L136:
?LBE_connectionConvertPageScanRepMode:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionConvertPageScanMode_t:
	enter	#1
?LBB_connectionConvertPageScanMode_t:
	cmp	AH,#H'0001
	beq	?L149
	cmp	AH,#H'0001
	bcs	?L148
	cmp	AH,#H'0002
	beq	?L150
	cmp	AH,#H'0003
	beq	?L151
	bra	(?L152)
?L148:
	ld	AH,#H'0000
	bra	(?L146)
?L149:
	ld	AH,#H'0001
	bra	(?L146)
?L150:
	ld	AH,#H'0002
	bra	(?L146)
?L151:
	ld	AH,#H'0003
	bra	(?L146)
?L152:
	ld	AH,#H'0004
?L146:
?LBE_connectionConvertPageScanMode_t:
	leave	#1
;# begin scan referenced symbols
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionConvertPageScanMode:
	enter	#1
?LBB_connectionConvertPageScanMode:
	cmp	AH,#(H'0001+H'0004)
	bcc	?L165
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE166,X)
	brxl
	.SEG	CONST
?JTBASE166:
	.CODE
?L166:
	.SEG	CONST
	dc	?L165-?L166
	dc	?L161-?L166
	dc	?L162-?L166
	dc	?L163-?L166
	dc	?L165-?L166
	.CODE
?L161:
	ld	AH,#H'0001
	bra	(?L158)
?L162:
	ld	AH,#H'0002
	bra	(?L158)
?L163:
	ld	AH,#H'0003
	bra	(?L158)
?L165:
	ld	AH,#H'0000
?L158:
?LBE_connectionConvertPageScanMode:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionConvertProtocolId_t:
	enter	#1
?LBB_connectionConvertProtocolId_t:
	cmp	AH,#H'0000
	bne	?L168
	cmp	AL,#H'0000
	bne	?L168
	ld	AH,#H'0000
	bra	(?L167)
?L168:
	cmp	AH,#H'0000
	bne	?L170
	cmp	AL,#H'0001
	bne	?L170
	ld	AH,#H'0001
	bra	(?L167)
?L170:
	cmp	AH,#hwrd(H'0001+H'7FFF)
	bcs	?L172
	bne	?L176
	cmp	AL,#lwrd(H'0001+H'7FFF)
	bcs	?L172
?L176:
	ld	AH,@$XAP_AL
	bra	(?L167)
?L172:
	ld	AH,#H'0002
?L167:
?LBE_connectionConvertProtocolId_t:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionConvertProtocolId:
	enter	#1
?LBB_connectionConvertProtocolId:
	cmp	AH,#H'0000
	bne	?L178
	ld	AL,#H'0000
	bra	(?L182)
?L178:
	cmp	AH,#H'0001
	bne	?L180
	ld	AL,#H'0001
?L182:
	ld	AH,#H'0000
	bra	(?L177)
?L180:
	ld	AL,@$XAP_AH
	ld	AH,#H'0000
?L177:
?LBE_connectionConvertProtocolId:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionConvertHciScanEnable:
	enter	#1
?LBB_connectionConvertHciScanEnable:
	cmp	AH,#H'0001
	beq	?L187
	cmp	AH,#H'0001
	bcs	?L186
	cmp	AH,#H'0002
	beq	?L188
	bra	(?L190)
?L186:
	ld	AH,#H'0000
	bra	(?L184)
?L187:
	ld	AH,#H'0001
	bra	(?L184)
?L188:
	ld	AH,#H'0002
	bra	(?L184)
?L190:
	ld	AH,#H'0003
?L184:
?LBE_connectionConvertHciScanEnable:
	leave	#1
;# begin scan referenced symbols
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionConvertSecurityMode_t:
	enter	#1
?LBB_connectionConvertSecurityMode_t:
	cmp	AH,#(H'0001+H'0004)
	bcc	?L202
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE203,X)
	brxl
	.SEG	CONST
?JTBASE203:
	.CODE
?L203:
	.SEG	CONST
	dc	?L202-?L203
	dc	?L198-?L203
	dc	?L199-?L203
	dc	?L200-?L203
	dc	?L202-?L203
	.CODE
?L198:
	ld	AH,#H'0001
	bra	(?L195)
?L199:
	ld	AH,#H'0002
	bra	(?L195)
?L200:
	ld	AH,#H'0003
	bra	(?L195)
?L202:
	ld	AH,#H'0000
?L195:
?LBE_connectionConvertSecurityMode_t:
	leave	#1
;# begin scan referenced symbols
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionConvertSecurityLevel_t:
	enter	#1
?LBB_connectionConvertSecurityLevel_t:
	cmp	AH,#(H'0001+H'0008)
	bcc	?L215
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE216,X)
	brxl
	.SEG	CONST
?JTBASE216:
	.CODE
?L216:
	.SEG	CONST
	dc	?L215-?L216
	dc	?L207-?L216
	dc	?L208-?L216
	dc	?L209-?L216
	dc	?L210-?L216
	dc	?L211-?L216
	dc	?L212-?L216
	dc	?L213-?L216
	dc	?L215-?L216
	.CODE
?L207:
	ld	AH,#H'0001
	bra	(?L204)
?L208:
	ld	AH,#H'0002
	bra	(?L204)
?L209:
	ld	AH,#H'0004
	bra	(?L204)
?L210:
	ld	AH,#H'0008
	bra	(?L204)
?L211:
	ld	AH,#H'0010
	bra	(?L204)
?L212:
	ld	AH,#H'0020
	bra	(?L204)
?L213:
	ld	AH,#H'0040
	bra	(?L204)
?L215:
	ld	AH,#H'0000
?L204:
?LBE_connectionConvertSecurityLevel_t:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionConvertHciRole:
	enter	#1
?LBB_connectionConvertHciRole:
	cmp	AH,#H'0000
	beq	?L219
	cmp	AH,#H'0001
	beq	?L220
	bra	(?L221)
?L219:
	ld	AH,#H'0000
	bra	(?L217)
?L220:
	ld	AH,#H'0001
	bra	(?L217)
?L221:
	ld	AH,#H'0002
?L217:
?LBE_connectionConvertHciRole:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionConvertHciRole_t:
	enter	#1
?LBB_connectionConvertHciRole_t:
	cmp	AH,#H'0001
	beq	?L227
	cmp	AH,#H'0001
	bcc	?L229
	ld	AH,#H'0000
	bra	(?L224)
?L227:
	ld	AH,#H'0001
	bra	(?L224)
?L229:
	ld	AH,#H'0002
?L224:
?LBE_connectionConvertHciRole_t:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 18 used[1] = 10 total = 28
;# Function pattern *movqi3 used[0] = 159 total = 159
;# Function pattern *movhi used[2] = 2 used[3] = 2 total = 4
;# Function pattern *zero_extendqihi2_1 used[0] = 1 total = 1
;# Function pattern jump used[0] = 145 total = 145
;# Function pattern tablejump_1 used[0] = 7 total = 7
;# Function pattern movstrqi+3 used[0] = 2 total = 2
;# Function pattern movstrqi+4 used[1] = 7 total = 7
;# Function pattern movstrqi+5 used[0] = 16 total = 16
;# Function pattern movstrqi+6 used[0] = 1 total = 1
;# Function pattern movstrqi+7 used[0] = 2 total = 2
	MODULE	dm_baseband_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_VmSendDmPrim
;# import $_connectionGetCmTask
;# import $_MessageSendConditionallyOnTask
;# end scan referenced symbols
	.CODE
$_connectionHandleReadClassOfDeviceRequest:
	enter	#6
?LBB_connectionHandleReadClassOfDeviceRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB2:
	tst	@(0,X)
	bne	?L2
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
?LBB3:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0C23
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE3:
	bra	(?L1)
?L2:
?LBB4:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0019
	bsr	$_MessageSendConditionallyOnTask
?L1:
?LBE4:
?LBE2:
?LBE_connectionHandleReadClassOfDeviceRequest:
	leave	#6
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;# begin scan referenced symbols
;# import $_connectionConvertHciStatus
;# import $_MessageSend
;# end scan referenced symbols
$_connectionHandleReadClassOfDeviceComplete:
	enter	#5
?LBB_connectionHandleReadClassOfDeviceComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB5:
	tst	@(0,X)
	beq	?L4
?LBB6:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0003,X)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	st	X,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7005
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?L4:
?LBE6:
?LBE5:
?LBE_connectionHandleReadClassOfDeviceComplete:
	leave	#5
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleWritePageScanActivityRequset:
	enter	#2
?LBB_connectionHandleWritePageScanActivityRequset:
	st	AH,@(0,Y)
?LBB7:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0C1C
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0004
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE7:
?LBE_connectionHandleWritePageScanActivityRequset:
	leave	#2
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleWriteInquiryScanActivityRequest:
	enter	#2
?LBB_connectionHandleWriteInquiryScanActivityRequest:
	st	AH,@(0,Y)
?LBB8:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0C1E
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0004
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE8:
?LBE_connectionHandleWriteInquiryScanActivityRequest:
	leave	#2
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
;# begin scan referenced symbols
;# import $_connectionConvertHciScanEnable
;# end scan referenced symbols
$_connectionHandleWriteScanEnableRequest:
	enter	#3
?LBB_connectionHandleWriteScanEnableRequest:
	st	AH,@(0,Y)
?LBB9:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'0C1A
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0003
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AH,@(0,X)
	bsr	$_connectionConvertHciScanEnable
	ld	X,@(H'0001,Y)
	st	AH,@(H'0002,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE9:
?LBE_connectionHandleWriteScanEnableRequest:
	leave	#3
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleWriteCodRequset:
	enter	#2
?LBB_connectionHandleWriteCodRequset:
	st	AH,@(0,Y)
?LBB10:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0C24
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0004
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@H'fff8
	st	AH,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE10:
?LBE_connectionHandleWriteCodRequset:
	leave	#2
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;# begin scan referenced symbols
;# import $_connectionConvertBdaddr_t
;# import $_connectionConvertPageScanMode
;# import $_connectionConvertPageScanRepMode
;# end scan referenced symbols
$_connectionHandleWriteCachedPageModeRequest:
	enter	#3
?LBB_connectionHandleWriteCachedPageModeRequest:
	st	AH,@(0,Y)
?LBB11:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2801
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertPageScanMode
	ld	X,@(H'0001,Y)
	st	AH,@(H'0005,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0005,X)
	bsr	$_connectionConvertPageScanRepMode
	ld	X,@(H'0001,Y)
	st	AH,@(H'0006,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE11:
?LBE_connectionHandleWriteCachedPageModeRequest:
	leave	#3
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleWriteCachedClkOffsetRequest:
	enter	#3
?LBB_connectionHandleWriteCachedClkOffsetRequest:
	st	AH,@(0,Y)
?LBB12:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2802
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'0005,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE12:
?LBE_connectionHandleWriteCachedClkOffsetRequest:
	leave	#3
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleClearParamCacheRequest:
	enter	#3
?LBB_connectionHandleClearParamCacheRequest:
	st	AH,@(0,Y)
?LBB13:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2803
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0001,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE13:
?LBE_connectionHandleClearParamCacheRequest:
	leave	#3
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
;# begin scan referenced symbols
;# import $_SinkGetBdAddr
;# end scan referenced symbols
$_connectionHandleWriteFlushTimeoutRequest:
	enter	#7
?LBB_connectionHandleWriteFlushTimeoutRequest:
	st	AH,@(H'0004,Y)
	ld	X,@$XAP_AH
?LBB14:
	ld	AH,@(0,X)
	ld	AL,@$XAP_UY
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	beq	?L13
?LBB15:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'0C28
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0008
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0007,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L13:
?LBE15:
?LBE14:
?LBE_connectionHandleWriteFlushTimeoutRequest:
	leave	#7
;.stabn	192,0,0,?LBB14
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
;.stabn	224,0,0,?LBE14
;# begin scan referenced symbols
;# import $_VmGetHandleFromPointer
;# end scan referenced symbols
$_connectionHandleChangeLocalName:
	enter	#3
?LBB_connectionHandleChangeLocalName:
	st	AH,@(0,Y)
?LBB16:
	ld	AH,#H'000A
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'0C13
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'000A
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	add	AL,#H'000A
	ld	X,@(H'0001,Y)
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	tst	@(0,X)
	beq	?L16
	ld	AH,@(H'0001,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0002,X)
	bra	(?L17)
?L16:
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0002,X)
?L17:
	ld	AL,#H'0001
	ld	AH,#H'0000
?L22:
	ld	X,@(H'0001,Y)
	add	X,@$XAP_AL
	st	AH,@(H'0002,X)
	add	AL,#H'0001
	cmp	AL,#H'0007
	bcz	?L22
	ld	AH,@(H'0001,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE16:
?LBE_connectionHandleChangeLocalName:
	leave	#3
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
	ENDMOD

;# Function pattern *movqi2 used[0] = 86 used[1] = 7 total = 93
;# Function pattern *movqi3 used[0] = 81 total = 81
;# Function pattern *movqi8 used[0] = 1 total = 1
;# Function pattern *movhi used[2] = 2 used[3] = 2 total = 4
;# Function pattern *addqi2 used[0] = 7 total = 7
;# Function pattern jump used[0] = 2 total = 2
;# Function pattern *call1 used[0] = 16 total = 16
;# Function pattern *call_value1 used[0] = 19 total = 19
;# Function pattern movstrqi+3 used[0] = 1 used[1] = 3 total = 4
;# Function pattern movstrqi+5 used[0] = 1 total = 1
	MODULE	dm_dut_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
_sendDutCfmToClient:
	enter	#4
?LBB_sendDutCfmToClient:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	cmp	AH,#H'0000
	beq	?L1
?LBB3:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'702B
	bsr	$_MessageSend
?L1:
?LBE3:
?LBE2:
?LBE_sendDutCfmToClient:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# import $_ConnectionWriteScanEnable
;# import $_connectionGetCmTask
;# import $_ConnectionSmSetSecurityMode
;# end scan referenced symbols
$_connectionHandleEnterDutModeReq:
	enter	#2
?LBB_connectionHandleEnterDutModeReq:
	ld	AH,#H'0003
	bsr	$_ConnectionWriteScanEnable
	bsr	$_connectionGetCmTask
	ld	AL,#H'0000
	st	AL,@(0,Y)
	bsr	$_ConnectionSmSetSecurityMode
?LBE_connectionHandleEnterDutModeReq:
	leave	#2
;# begin scan referenced symbols
;# import $_VmSendDmPrim
;# import _sendDutCfmToClient
;# end scan referenced symbols
$_connectionHandleDutSecurityDisabled:
	enter	#1
?LBB_connectionHandleDutSecurityDisabled:
	ld	X,@$XAP_AL
?LBB4:
	tst	@(H'0004,X)
	beq	?L5
?LBB5:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'1803
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE5:
	bra	(?L4)
?L5:
	ld	AL,#H'0001
	bsr	_sendDutCfmToClient
?L4:
?LBE4:
?LBE_connectionHandleDutSecurityDisabled:
	leave	#1
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleDutCfm:
	enter	#1
?LBB_connectionHandleDutCfm:
	ld	X,@$XAP_AL
	tst	@(H'0002,X)
	bne	?L8
	ld	AL,#H'0000
	bra	(?L10)
?L8:
	ld	AL,#H'0001
?L10:
	bsr	_sendDutCfmToClient
?LBE_connectionHandleDutCfm:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 11 used[1] = 1 total = 12
;# Function pattern *movqi3 used[0] = 11 total = 11
;# Function pattern jump used[0] = 2 total = 2
;# Function pattern *call1 used[0] = 6 total = 6
;# Function pattern *call_value1 used[0] = 3 total = 3
;# Function pattern movstrqi+3 used[0] = 1 used[1] = 2 total = 3
	MODULE	dm_info_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
_sendLinkQualityCfm:
	enter	#4
?LBB_sendLinkQualityCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	cmp	AH,#H'0000
	beq	?L1
?LBB3:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'700D
	bsr	$_MessageSend
?L1:
?LBE3:
?LBE2:
?LBE_sendLinkQualityCfm:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# end scan referenced symbols
_sendRssiCfm:
	enter	#4
?LBB_sendRssiCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB4:
	cmp	AH,#H'0000
	beq	?L3
?LBB5:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'700E
	bsr	$_MessageSend
?L3:
?LBE5:
?LBE4:
?LBE_sendRssiCfm:
	leave	#4
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;# begin scan referenced symbols
;# end scan referenced symbols
_sendClockOffsetCfm:
	enter	#4
?LBB_sendClockOffsetCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB6:
	cmp	AH,#H'0000
	beq	?L5
?LBB7:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0002,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7010
	bsr	$_MessageSend
?L5:
?LBE7:
?LBE6:
?LBE_sendClockOffsetCfm:
	leave	#4
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;# begin scan referenced symbols
;# import $_memcpy
;# end scan referenced symbols
_sendRemoteSupportedFeaturesCfm:
	enter	#5
?LBB_sendRemoteSupportedFeaturesCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB8:
	cmp	AH,#H'0000
	beq	?L7
?LBB9:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0001,X)
	tst	@(H'0005,Y)
	beq	?L9
	add	AH,#H'0002
	ld	AL,#H'0004
	st	AL,@(0,Y)
	ld	AL,@(H'0005,Y)
	bsr	$_memcpy
	bra	(?L10)
?L9:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
?L10:
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'700F
	bsr	$_MessageSend
?L7:
?LBE9:
?LBE8:
?LBE_sendRemoteSupportedFeaturesCfm:
	leave	#5
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
;# begin scan referenced symbols
;# import $_connectionGetMsgFilter
;# import $_connectionConvertBdaddr
;# end scan referenced symbols
_sendAclOpenedIndToClient:
	enter	#5
?LBB_sendAclOpenedIndToClient:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB10:
	bsr	$_connectionGetMsgFilter
	ld	X,@$XAP_AH
	tst	@(H'0001,Y)
	beq	?L11
	ld	AL,@(0,X)
	and	AL,#H'0001
	cmp	AL,#H'0000
	beq	?L11
?LBB11:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'0005,Y)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0007,X)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7011
	bsr	$_MessageSend
?L11:
?LBE11:
?LBE10:
?LBE_sendAclOpenedIndToClient:
	leave	#5
;.stabn	192,0,0,?LBB10
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
;.stabn	224,0,0,?LBE10
;# begin scan referenced symbols
;# import $_VmSendDmPrim
;# import $_connectionGetCmTask
;# import $_MessageSendConditionallyOnTask
;# end scan referenced symbols
$_connectionHandleReadAddrRequest:
	enter	#6
?LBB_connectionHandleReadAddrRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB12:
	tst	@(0,X)
	bne	?L14
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
?LBB13:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'1009
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE13:
	bra	(?L13)
?L14:
?LBB14:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0024
	bsr	$_MessageSendConditionallyOnTask
?L13:
?LBE14:
?LBE12:
?LBE_connectionHandleReadAddrRequest:
	leave	#6
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
;.stabn	192,0,0,?LBB14
;.stabn	224,0,0,?LBE14
;# begin scan referenced symbols
;# import $_connectionConvertHciStatus
;# end scan referenced symbols
$_connectionHandleReadBdAddrComplete:
	enter	#5
?LBB_connectionHandleReadBdAddrComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB15:
	tst	@(0,X)
	beq	?L16
?LBB16:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0001
	ld	AL,@(H'0002,Y)
	add	AL,#H'0003
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'700C
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?L16:
?LBE16:
?LBE15:
?LBE_connectionHandleReadBdAddrComplete:
	leave	#5
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
;# begin scan referenced symbols
;# import $_SinkGetBdAddr
;# import _sendLinkQualityCfm
;# import $_connectionConvertBdaddr_t
;# end scan referenced symbols
$_connectionHandleReadLinkQualityRequest:
	enter	#11
?LBB_connectionHandleReadLinkQualityRequest:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	X,@$XAP_AH
?LBB17:
	tst	@(0,X)
	bne	?L19
	ld	X,@$XAP_AL
?LBB18:
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	bne	?L20
	st	AH,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
	bsr	_sendLinkQualityCfm
	bra	(?L18)
?L20:
?LBB19:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'1403
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0008,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0006,Y)
	st	AL,@(0,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0001,X)
?LBE19:
?LBE18:
	bra	(?L18)
?L19:
?LBB20:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0009,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@(H'0009,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0009,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0006,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0025
	bsr	$_MessageSendConditionallyOnTask
?L18:
?LBE20:
?LBE17:
?LBE_connectionHandleReadLinkQualityRequest:
	leave	#11
;.stabn	192,0,0,?LBB18
;.stabn	192,0,0,?LBB19
;.stabn	224,0,0,?LBE19
;.stabn	224,0,0,?LBE18
;.stabn	192,0,0,?LBB20
;.stabn	224,0,0,?LBE20
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleReadLinkQualityComplete:
	enter	#5
?LBB_connectionHandleReadLinkQualityComplete:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AL
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	AL,@$XAP_AH
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0007,X)
	st	AH,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	st	AH,@(H'0001,Y)
	ld	AH,@(0,X)
	bsr	_sendLinkQualityCfm
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
?LBE_connectionHandleReadLinkQualityComplete:
	leave	#5
;# begin scan referenced symbols
;# import _sendRssiCfm
;# end scan referenced symbols
$_connectionHandleReadRssiRequest:
	enter	#11
?LBB_connectionHandleReadRssiRequest:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	X,@$XAP_AH
?LBB21:
	tst	@(0,X)
	bne	?L25
	ld	X,@$XAP_AL
?LBB22:
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	bne	?L26
	st	AH,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
	bsr	_sendRssiCfm
	bra	(?L24)
?L26:
?LBB23:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'1405
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0008,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0006,Y)
	st	AL,@(0,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0001,X)
?LBE23:
?LBE22:
	bra	(?L24)
?L25:
?LBB24:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0009,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@(H'0009,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0009,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0006,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0026
	bsr	$_MessageSendConditionallyOnTask
?L24:
?LBE24:
?LBE21:
?LBE_connectionHandleReadRssiRequest:
	leave	#11
;.stabn	192,0,0,?LBB22
;.stabn	192,0,0,?LBB23
;.stabn	224,0,0,?LBE23
;.stabn	224,0,0,?LBE22
;.stabn	192,0,0,?LBB24
;.stabn	224,0,0,?LBE24
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleReadRssiComplete:
	enter	#5
?LBB_connectionHandleReadRssiComplete:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AL
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	AL,@$XAP_AH
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0007,X)
	st	AH,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	st	AH,@(H'0001,Y)
	ld	AH,@(0,X)
	bsr	_sendRssiCfm
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
?LBE_connectionHandleReadRssiComplete:
	leave	#5
;# begin scan referenced symbols
;# import _sendClockOffsetCfm
;# end scan referenced symbols
$_connectionHandleReadclkOffsetRequest:
	enter	#11
?LBB_connectionHandleReadclkOffsetRequest:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	X,@$XAP_AH
?LBB25:
	tst	@(0,X)
	bne	?L31
	ld	X,@$XAP_AL
?LBB26:
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	bne	?L32
	st	AH,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
	bsr	_sendClockOffsetCfm
	bra	(?L30)
?L32:
?LBB27:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'041F
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0008,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0006,Y)
	st	AL,@(0,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0001,X)
?LBE27:
?LBE26:
	bra	(?L30)
?L31:
?LBB28:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0009,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@(H'0009,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0009,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0006,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0027
	bsr	$_MessageSendConditionallyOnTask
?L30:
?LBE28:
?LBE25:
?LBE_connectionHandleReadclkOffsetRequest:
	leave	#11
;.stabn	192,0,0,?LBB26
;.stabn	192,0,0,?LBB27
;.stabn	224,0,0,?LBE27
;.stabn	224,0,0,?LBE26
;.stabn	192,0,0,?LBB28
;.stabn	224,0,0,?LBE28
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleReadClkOffsetComplete:
	enter	#5
?LBB_connectionHandleReadClkOffsetComplete:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AL
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	AL,@$XAP_AH
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0007,X)
	st	AH,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	st	AH,@(H'0001,Y)
	ld	AH,@(0,X)
	bsr	_sendClockOffsetCfm
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
?LBE_connectionHandleReadClkOffsetComplete:
	leave	#5
;# begin scan referenced symbols
;# import _sendRemoteSupportedFeaturesCfm
;# end scan referenced symbols
$_connectionHandleReadRemoteSupportedFeaturesRequest:
	enter	#11
?LBB_connectionHandleReadRemoteSupportedFeaturesRequest:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	X,@$XAP_AH
?LBB29:
	tst	@(0,X)
	bne	?L37
	ld	X,@$XAP_AL
?LBB30:
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	bne	?L38
	st	AH,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
	bsr	_sendRemoteSupportedFeaturesCfm
	bra	(?L36)
?L38:
?LBB31:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'041B
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0008,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0006,Y)
	st	AL,@(0,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0001,X)
?LBE31:
?LBE30:
	bra	(?L36)
?L37:
?LBB32:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0009,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@(H'0009,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0009,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0006,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0028
	bsr	$_MessageSendConditionallyOnTask
?L36:
?LBE32:
?LBE29:
?LBE_connectionHandleReadRemoteSupportedFeaturesRequest:
	leave	#11
;.stabn	192,0,0,?LBB30
;.stabn	192,0,0,?LBB31
;.stabn	224,0,0,?LBE31
;.stabn	224,0,0,?LBE30
;.stabn	192,0,0,?LBB32
;.stabn	224,0,0,?LBE32
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleReadRemoteSupportedFeaturesCfm:
	enter	#5
?LBB_connectionHandleReadRemoteSupportedFeaturesCfm:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
	tst	@(0,X)
	beq	?L42
	ld	X,@$XAP_AL
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	AL,@$XAP_AH
	ld	AH,@(H'0003,Y)
	add	AH,#H'0007
	st	AH,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	st	AH,@(H'0001,Y)
	ld	AH,@(0,X)
	bsr	_sendRemoteSupportedFeaturesCfm
?L42:
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
	st	AL,@(H'0001,X)
?LBE_connectionHandleReadRemoteSupportedFeaturesCfm:
	leave	#5
;# begin scan referenced symbols
;# import _sendAclOpenedIndToClient
;# end scan referenced symbols
$_connectionHandleDmAclOpenInd:
	enter	#7
?LBB_connectionHandleDmAclOpenInd:
	st	AH,@H'fff8
	st	AL,@(H'0004,Y)
	ld	AH,@$XAP_AL
	add	AH,#H'0002
	st	AH,@(-1,Y)
	ld	X,@$XAP_AL
	ld	X,@(H'0006,X)
	st	X,@(0,Y)
	ld	X,@$XAP_AL
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0008,X)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AL,#H'0036
	st	AL,@(H'0003,Y)
	ld	AH,@H'fff8
	ld	AL,@(-1,Y)
	bsr	_sendAclOpenedIndToClient
?LBE_connectionHandleDmAclOpenInd:
	leave	#7
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleDmEnAclOpenInd:
	enter	#8
?LBB_connectionHandleDmEnAclOpenInd:
	st	AH,@(H'0004,Y)
	st	AL,@(H'0005,Y)
	ld	X,@$XAP_AL
	ld	AH,@(H'0009,X)
	bsr	$_connectionConvertHciStatus
	st	AH,@H'fff8
	ld	AH,@(H'0005,Y)
	add	AH,#H'0002
	st	AH,@(-1,Y)
	ld	X,@(H'0005,Y)
	ld	X,@(H'0006,X)
	st	X,@(0,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0008,X)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(H'0003,Y)
	ld	AL,@H'ffff
	ld	AH,@(H'0004,Y)
	ld	AL,@(-1,Y)
	bsr	_sendAclOpenedIndToClient
?LBE_connectionHandleDmEnAclOpenInd:
	leave	#8
;# begin scan referenced symbols
;# import $_Panic
;# end scan referenced symbols
$_connectionHandleDmHciModeChangeEvent:
	enter	#5
?LBB_connectionHandleDmHciModeChangeEvent:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB33:
	bsr	$_connectionGetMsgFilter
	ld	X,@$XAP_AH
	tst	@(H'0001,Y)
	beq	?L45
	ld	AL,@(0,X)
	and	AL,#H'0002
	cmp	AL,#H'0000
	beq	?L45
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	bne	?L45
	tst	@(H'0007,X)
	beq	?L48
	ld	AL,@(H'0007,X)
	cmp	AL,#H'0002
	bne	?L45
?L48:
?LBB34:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0003
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0007,X)
	cmp	AL,#H'0000
	beq	?L50
	cmp	AL,#H'0002
	beq	?L51
	bra	(?L52)
?L50:
	ld	AL,#H'0000
	bra	(?L54)
?L51:
	ld	AL,#H'0001
?L54:
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	bra	(?L49)
?L52:
;	bsr	$_Panic
	DC	((256*14)+9)
?L49:
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0005,X)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'702C
	bsr	$_MessageSend
?L45:
?LBE34:
?LBE33:
?LBE_connectionHandleDmHciModeChangeEvent:
	leave	#5
;.stabn	192,0,0,?LBB33
;.stabn	192,0,0,?LBB34
;.stabn	224,0,0,?LBE34
;.stabn	224,0,0,?LBE33
	ENDMOD

;# Function pattern *movqi2 used[0] = 171 used[1] = 16 used[3] = 1 total = 188
;# Function pattern *movqi3 used[0] = 181 total = 181
;# Function pattern *movhi used[2] = 7 used[3] = 7 total = 14
;# Function pattern *addqi0 used[0] = 8 total = 8
;# Function pattern *addqi2 used[0] = 11 total = 11
;# Function pattern *andqi3 used[0] = 2 total = 2
;# Function pattern jump used[0] = 13 total = 13
;# Function pattern *call1 used[0] = 35 total = 35
;# Function pattern *call_value1 used[0] = 35 total = 35
;# Function pattern movstrqi+2 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 11 used[1] = 12 total = 23
;# Function pattern movstrqi+5 used[0] = 2 total = 2
	MODULE	dm_inquiry_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_BdaddrSetZero
;# import $_connectionConvertPageScanRepMode_t
;# import $_connectionConvertPageScanMode_t
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
_inquirySendResult:
	enter	#5
?LBB_inquirySendResult:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	tst	@(H'0001,Y)
	beq	?L1
?LBB3:
	ld	AH,#H'000B
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	tst	@(H'0005,Y)
	beq	?L3
	ld	X,@(H'0005,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	bra	(?L4)
?L3:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0001
	bsr	$_BdaddrSetZero
?L4:
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0007,X)
	ld	AH,@(H'0009,Y)
	bsr	$_connectionConvertPageScanRepMode_t
	ld	X,@(H'0003,Y)
	st	AH,@(H'0008,X)
	ld	AH,@(H'000A,Y)
	bsr	$_connectionConvertPageScanMode_t
	ld	X,@(H'0003,Y)
	st	AH,@(H'0009,X)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'000A,X)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7002
	bsr	$_MessageSend
?L1:
?LBE3:
?LBE2:
?LBE_inquirySendResult:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# import $_VmSendDmPrim
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import $_connectionGetCmTask
;# import $_MessageSendConditionallyOnTask
;# end scan referenced symbols
$_connectionHandleInquiryStart:
	enter	#6
?LBB_connectionHandleInquiryStart:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB4:
	tst	@(0,X)
	bne	?L6
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	cmp	AH,#H'0000
	bne	?L9
	cmp	AL,#H'0000
	beq	?L7
?L9:
?LBB5:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0C05
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0009
	st	AL,@(H'0001,X)
	ld	AL,#H'0001
	st	AL,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@H'fff8
	st	AH,@(H'0004,X)
	st	AL,@(H'0005,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@H'fff8
	st	AH,@(H'0006,X)
	st	AL,@(H'0007,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L7:
?LBE5:
?LBB6:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0401
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0006
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	ld	X,@H'fff8
	st	AH,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	ld	X,@H'fff8
	st	AL,@(H'0004,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	st	AL,@(H'0005,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE6:
	bra	(?L5)
?L6:
?LBB7:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0007
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0003
	bsr	$_MessageSendConditionallyOnTask
?L5:
?LBE7:
?LBE4:
?LBE_connectionHandleInquiryStart:
	leave	#6
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;# begin scan referenced symbols
;# import $_VmGetPointerFromHandle
;#(clobber:QI (reg:QI 0 AH))
;# import $_connectionConvertBdaddr
;# import _inquirySendResult
;# import $_free
;# end scan referenced symbols
$_connectionHandleInquiryResult:
	enter	#20
?LBB_connectionHandleInquiryResult:
	st	AH,@(H'000B,Y)
	st	AL,@(H'000C,Y)
	ld	X,@$XAP_AL
?LBB8:
	ld	X,@(H'0002,X)
	st	X,@(H'000F,Y)
	ld	AH,#H'0000
	st	AH,@(H'000D,Y)
	ld	AL,@$XAP_UXL
	add	AL,#H'0004
	ld	AH,#H'0000
	udiv	#H'0005
	ld	AH,#H'0000
	cmp	AH,@$XAP_AL
	bcc	?L23
?L21:
?LBB9:
	ld	AL,#H'0005
	st	AL,@(H'0010,Y)
	ld	X,@(H'000C,Y)
	add	X,@(H'000D,Y)
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0011,Y)
	ld	X,@(H'000F,Y)
	cmp	X,#H'0005
	bcc	?L15
	st	X,@(H'0010,Y)
?L15:
	ld	AH,#H'0000
	st	AH,@(H'000E,Y)
	cmp	AH,@(H'0010,Y)
	bcc	?L25
?L20:
?LBB10:
	ld	AL,@(H'000E,Y)
	smult	#H'000A
	ld	X,@(H'0011,Y)
	add	X,@$XAP_AL
	st	X,@(H'0012,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0007
	ld	AL,@$XAP_UXL
	bsr	$_connectionConvertBdaddr
	ld	AL,@$XAP_UY
	add	AL,#H'0007
	st	AL,@(0,Y)
	ld	X,@(H'0012,Y)
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0008,X)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0009,X)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0006,X)
	st	AL,@(H'0005,Y)
	ld	AL,#H'7FFF
	st	AL,@(H'0006,Y)
	ld	X,@(H'000B,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0001
	bsr	_inquirySendResult
	ld	AH,@(H'000E,Y)
?LBE10:
	add	AH,#H'0001
	st	AH,@(H'000E,Y)
	cmp	AH,@(H'0010,Y)
	bcs	?L20
?L25:
	ld	AH,@(H'0011,Y)
;	bsr	$_free
	DC	((256*4)+9)
	ld	AL,@(H'000D,Y)
?LBE9:
	add	AL,#H'0001
	st	AL,@(H'000D,Y)
	ld	X,@(H'000C,Y)
	ld	AL,@(H'0002,X)
	add	AL,#H'0004
	ld	AH,#H'0000
	udiv	#H'0005
	ld	AH,@(H'000D,Y)
	cmp	AH,@$XAP_AL
	bcs	?L21
?L23:
?LBE8:
?LBE_connectionHandleInquiryResult:
	leave	#20
;.stabn	192,0,0,?LBB8
;.stabn	192,0,0,?LBB9
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;.stabn	224,0,0,?LBE9
;.stabn	224,0,0,?LBE8
;# begin scan referenced symbols
;#(clobber:QI (reg:QI 0 AH))
;# end scan referenced symbols
$_connectionHandleInquiryResultWithRssi:
	enter	#20
?LBB_connectionHandleInquiryResultWithRssi:
	st	AH,@(H'000B,Y)
	st	AL,@(H'000C,Y)
	ld	X,@$XAP_AL
?LBB11:
	ld	X,@(H'0002,X)
	st	X,@(H'000F,Y)
	ld	AH,#H'0000
	st	AH,@(H'000D,Y)
	ld	AL,@$XAP_UXL
	add	AL,#H'0004
	ld	AH,#H'0000
	udiv	#H'0005
	ld	AH,#H'0000
	cmp	AH,@$XAP_AL
	bcc	?L44
?L42:
?LBB12:
	ld	AL,#H'0005
	st	AL,@(H'0010,Y)
	ld	X,@(H'000C,Y)
	add	X,@(H'000D,Y)
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0011,Y)
	ld	X,@(H'000F,Y)
	cmp	X,#H'0005
	bcc	?L36
	st	X,@(H'0010,Y)
?L36:
	ld	AH,#H'0000
	st	AH,@(H'000E,Y)
	cmp	AH,@(H'0010,Y)
	bcc	?L46
?L41:
?LBB13:
	ld	AL,@(H'000E,Y)
	smult	#H'000A
	ld	X,@(H'0011,Y)
	add	X,@$XAP_AL
	st	X,@(H'0012,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0007
	ld	AL,@$XAP_UXL
	bsr	$_connectionConvertBdaddr
	ld	AL,@$XAP_UY
	add	AL,#H'0007
	st	AL,@(0,Y)
	ld	X,@(H'0012,Y)
	ld	AH,@(H'0006,X)
	ld	AL,@(H'0007,X)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0008,X)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	st	AL,@(H'0004,Y)
	ld	AL,#H'0000
	st	AL,@(H'0005,Y)
	ld	AL,@(H'0009,X)
	st	AL,@(H'0006,Y)
	ld	X,@(H'000B,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0001
	bsr	_inquirySendResult
	ld	AH,@(H'000E,Y)
?LBE13:
	add	AH,#H'0001
	st	AH,@(H'000E,Y)
	cmp	AH,@(H'0010,Y)
	bcs	?L41
?L46:
	ld	AH,@(H'0011,Y)
;	bsr	$_free
	DC	((256*4)+9)
	ld	AL,@(H'000D,Y)
?LBE12:
	add	AL,#H'0001
	st	AL,@(H'000D,Y)
	ld	X,@(H'000C,Y)
	ld	AL,@(H'0002,X)
	add	AL,#H'0004
	ld	AH,#H'0000
	udiv	#H'0005
	ld	AH,@(H'000D,Y)
	cmp	AH,@$XAP_AL
	bcs	?L42
?L44:
?LBE11:
?LBE_connectionHandleInquiryResultWithRssi:
	leave	#20
;.stabn	192,0,0,?LBB11
;.stabn	192,0,0,?LBB12
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
;.stabn	224,0,0,?LBE12
;.stabn	224,0,0,?LBE11
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleInquiryComplete:
	enter	#9
?LBB_connectionHandleInquiryComplete:
	st	AH,@(H'0007,Y)
	ld	AL,#H'0000
?LBB14:
	st	AL,@(0,Y)
	st	AL,@(H'0002,Y)
	st	AL,@(H'0001,Y)
	st	AL,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	st	AL,@(H'0005,Y)
	ld	AL,#H'7FFF
	st	AL,@(H'0006,Y)
	ld	X,@$XAP_AH
	ld	AH,@(0,X)
	ld	AL,#H'0000
	bsr	_inquirySendResult
	ld	AL,#H'0000
	ld	X,@(H'0007,Y)
	st	AL,@(0,X)
?LBB15:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0C05
	st	AL,@(0,X)
	ld	AL,#H'0009
	st	AL,@(H'0001,X)
	ld	AL,#H'0001
	st	AL,@(H'0002,X)
	ld	AL,#H'0000
	st	AL,@(H'0003,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE15:
?LBE14:
?LBE_connectionHandleInquiryComplete:
	leave	#9
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleInquiryCancel:
	enter	#8
?LBB_connectionHandleInquiryCancel:
	ld	X,@$XAP_AH
	ld	AH,@$XAP_AL
?LBB16:
	tst	@(0,X)
	beq	?L54
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	cmp	AL,@(0,X)
	bne	?L53
?LBB17:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0402
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE17:
	bra	(?L53)
?L54:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	st	AL,@(H'0002,Y)
	st	AL,@(H'0001,Y)
	st	AL,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	st	AL,@(H'0005,Y)
	ld	AL,#H'7FFF
	st	AL,@(H'0006,Y)
	ld	X,@$XAP_AH
	ld	AH,@(0,X)
	ld	AL,#H'0000
	bsr	_inquirySendResult
?L53:
?LBE16:
?LBE_connectionHandleInquiryCancel:
	leave	#8
;.stabn	192,0,0,?LBB17
;.stabn	224,0,0,?LBE17
;# begin scan referenced symbols
;# import $_connectionConvertBdaddr_t
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionHandleReadRemoteName:
	enter	#7
?LBB_connectionHandleReadRemoteName:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB18:
	tst	@(H'0001,X)
	bne	?L59
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
?LBB19:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0419
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0009
	st	AL,@(H'0001,X)
	add	AH,#H'0002
	ld	AL,@(H'0003,Y)
	add	AL,#H'0001
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0004,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE19:
	bra	(?L58)
?L59:
?LBB20:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'0005
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0001
	st	AL,@(H'0001,Y)
	ld	AL,#H'0005
	bsr	$_MessageSendConditionallyOnTask
?L58:
?LBE20:
?LBE18:
?LBE_connectionHandleReadRemoteName:
	leave	#7
;.stabn	192,0,0,?LBB19
;.stabn	224,0,0,?LBE19
;.stabn	192,0,0,?LBB20
;.stabn	224,0,0,?LBE20
;# begin scan referenced symbols
;# import $_memcpy
;# end scan referenced symbols
_remoteNameComplete:
	enter	#5
?LBB_remoteNameComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB21:
	cmp	AH,#H'0000
	beq	?L62
	ld	AH,@(H'0007,Y)
?LBB22:
	add	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0005,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	tst	@(H'0002,Y)
	beq	?L63
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	bra	(?L64)
?L63:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0001
	bsr	$_BdaddrSetZero
?L64:
	ld	AL,@(H'0007,Y)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0005,X)
	cmp	AL,#H'0000
	beq	?L65
	ld	AH,@$XAP_UXL
	add	AH,#H'0006
	st	AL,@(0,Y)
	ld	AL,@(H'0006,Y)
	bsr	$_memcpy
	ld	AH,@(H'0006,Y)
;	bsr	$_free
	DC	((256*4)+9)
	bra	(?L66)
?L65:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0006,X)
?L66:
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7003
	bsr	$_MessageSend
?LBE22:
	bra	(?L61)
?L62:
	tst	@(H'0007,Y)
	beq	?L61
	ld	AH,@(H'0006,Y)
;	bsr	$_free
	DC	((256*4)+9)
?L61:
?LBE21:
?LBE_remoteNameComplete:
	leave	#5
;.stabn	192,0,0,?LBB22
;.stabn	224,0,0,?LBE22
;# begin scan referenced symbols
;# import $_connectionConvertHciStatus
;# import _remoteNameComplete
;# end scan referenced symbols
$_connectionHandleRemoteNameComplete:
	enter	#13
?LBB_connectionHandleRemoteNameComplete:
	st	AH,@(H'0007,Y)
	st	AL,@(H'0008,Y)
?LBB23:
	add	AL,#H'0003
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0008,Y)
	tst	@(H'0002,X)
	bne	?L70
	tst	@(H'0007,X)
	beq	?L70
?LBB24:
	ld	AH,@(H'0007,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'000B,Y)
	ld	AL,#H'0000
	st	AL,@(H'0009,Y)
?L76:
	ld	X,@(H'000B,Y)
	add	X,@(H'0009,Y)
	tst	@(0,X)
	beq	?L72
	ld	AL,@(H'0009,Y)
	add	AL,#H'0001
	st	AL,@(H'0009,Y)
	cmp	AL,#H'001E
	bcz	?L76
?L72:
	ld	X,@(H'000B,Y)
	add	X,@(H'0009,Y)
	ld	AL,#H'0000
	st	AL,@(0,X)
	ld	AL,#H'0001
	st	AL,@(H'000A,Y)
?L82:
	ld	X,@(H'0008,Y)
	add	X,@(H'000A,Y)
	tst	@(H'0007,X)
	beq	?L79
	ld	AH,@(H'0007,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
;	bsr	$_free
	DC	((256*4)+9)
?L79:
	ld	AL,@(H'000A,Y)
	add	AL,#H'0001
	st	AL,@(H'000A,Y)
	cmp	AL,#H'0007
	bcz	?L82
	ld	X,@(H'0008,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	st	AH,@(0,Y)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0009,Y)
	bra	(?L87)
?L70:
	ld	X,@(H'0008,Y)
?LBE24:
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	st	AH,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
?L87:
	st	AL,@(H'0002,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0003
	bsr	_remoteNameComplete
	ld	AL,#H'0000
	ld	X,@(H'0007,Y)
	st	AL,@(H'0001,X)
?LBE23:
?LBE_connectionHandleRemoteNameComplete:
	leave	#13
;.stabn	192,0,0,?LBB23
;.stabn	192,0,0,?LBB24
;.stabn	224,0,0,?LBE24
;.stabn	224,0,0,?LBE23
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleReadLocalName:
	enter	#6
?LBB_connectionHandleReadLocalName:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB25:
	tst	@(H'0001,X)
	bne	?L91
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
?LBB26:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0C14
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE26:
	bra	(?L90)
?L91:
?LBB27:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0001
	st	AL,@(H'0001,Y)
	ld	AL,#H'0006
	bsr	$_MessageSendConditionallyOnTask
?L90:
?LBE27:
?LBE25:
?LBE_connectionHandleReadLocalName:
	leave	#6
;.stabn	192,0,0,?LBB26
;.stabn	224,0,0,?LBE26
;.stabn	192,0,0,?LBB27
;.stabn	224,0,0,?LBE27
;# begin scan referenced symbols
;# end scan referenced symbols
_localNameComplete:
	enter	#5
?LBB_localNameComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB28:
	cmp	AH,#H'0000
	beq	?L94
	ld	AH,@(H'0006,Y)
?LBB29:
	add	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0001,X)
	cmp	AL,#H'0000
	beq	?L95
	add	AH,#H'0002
	st	AL,@(0,Y)
	ld	AL,@(H'0005,Y)
	bsr	$_memcpy
	ld	AH,@(H'0005,Y)
;	bsr	$_free
	DC	((256*4)+9)
	bra	(?L96)
?L95:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
?L96:
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7004
	bsr	$_MessageSend
?LBE29:
	bra	(?L93)
?L94:
	tst	@(H'0006,Y)
	beq	?L93
	ld	AH,@(H'0005,Y)
;	bsr	$_free
	DC	((256*4)+9)
?L93:
?LBE28:
?LBE_localNameComplete:
	leave	#5
;.stabn	192,0,0,?LBB29
;.stabn	224,0,0,?LBE29
;# begin scan referenced symbols
;# import _localNameComplete
;# end scan referenced symbols
$_connectionHandleLocalNameComplete:
	enter	#8
?LBB_connectionHandleLocalNameComplete:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AL
?LBB30:
	tst	@(H'0002,X)
	bne	?L100
	tst	@(H'0003,X)
	beq	?L100
?LBB31:
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0006,Y)
	ld	AH,#H'0000
	st	AH,@(H'0004,Y)
?L106:
	ld	X,@(H'0006,Y)
	add	X,@(H'0004,Y)
	tst	@(0,X)
	beq	?L102
	ld	AL,@(H'0004,Y)
	add	AL,#H'0001
	st	AL,@(H'0004,Y)
	cmp	AL,#H'001E
	bcz	?L106
?L102:
	ld	X,@(H'0006,Y)
	add	X,@(H'0004,Y)
	ld	AL,#H'0000
	st	AL,@(0,X)
	ld	AH,#H'0001
	st	AH,@(H'0005,Y)
?L112:
	ld	X,@(H'0003,Y)
	add	X,@(H'0005,Y)
	tst	@(H'0003,X)
	beq	?L109
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
;	bsr	$_free
	DC	((256*4)+9)
?L109:
	ld	AL,@(H'0005,Y)
	add	AL,#H'0001
	st	AL,@(H'0005,Y)
	cmp	AL,#H'0007
	bcz	?L112
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	AL,@$XAP_AH
	ld	AH,@(H'0006,Y)
	st	AH,@(0,Y)
	ld	AH,@(H'0004,Y)
	bra	(?L117)
?L100:
	ld	X,@(H'0003,Y)
?LBE31:
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertHciStatus
	ld	AL,@$XAP_AH
	ld	AH,#H'0000
	st	AH,@(0,Y)
?L117:
	st	AH,@(H'0001,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	bsr	_localNameComplete
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(H'0001,X)
?LBE30:
?LBE_connectionHandleLocalNameComplete:
	leave	#8
;.stabn	192,0,0,?LBB31
;.stabn	224,0,0,?LBE31
;# begin scan referenced symbols
;# import $_memset
;# import $_malloc
;# import $_VmGetHandleFromPointer
;# end scan referenced symbols
$_connectionHandleWriteIacLapRequest:
	enter	#9
?LBB_connectionHandleWriteIacLapRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB32:
	tst	@(H'0002,X)
	bne	?L121
?LBB33:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0C3A
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0009
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0002,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0003
	ld	AL,#H'0006
	st	AL,@(0,Y)
	ld	AL,#H'0000
	bsr	$_memset
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0002,X)
	add	AH,@$XAP_AH
;	bsr	$_malloc
	DC	((256*3)+9)
	ld	X,@(H'0004,Y)
	st	AH,@(H'0003,X)
	st	AH,@H'fff8
	ld	AH,#H'0000
	st	AH,@H'fff9
	ld	X,@(H'0003,Y)
	cmp	AH,@(H'0001,X)
	bcc	?L129
?L126:
	ld	X,@H'fff9
	add	X,@H'fff9
	ld	AH,@H'fff8
	add	AH,@$XAP_UXL
	st	AH,@(H'0006,Y)
	add	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0006,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	ld	AL,#H'0001
	add	AL,@H'fff9
	st	AL,@H'fff9
	ld	X,@(H'0003,Y)
	cmp	AL,@(H'0001,X)
	bcs	?L126
?L129:
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0004,Y)
	st	AH,@(H'0003,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE33:
	bra	(?L120)
?L121:
?LBB34:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0003,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0002
	st	AL,@(H'0001,Y)
	ld	AL,#H'0023
	bsr	$_MessageSendConditionallyOnTask
?L120:
?LBE34:
?LBE32:
?LBE_connectionHandleWriteIacLapRequest:
	leave	#9
;.stabn	192,0,0,?LBB33
;.stabn	224,0,0,?LBE33
;.stabn	192,0,0,?LBB34
;.stabn	224,0,0,?LBE34
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleWriteIacLapComplete:
	enter	#4
?LBB_connectionHandleWriteIacLapComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB35:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	bne	?L133
	ld	AL,#H'0000
	bra	(?L135)
?L133:
	ld	AL,#H'0001
?L135:
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0002,X)
	ld	AL,#H'702D
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0002,X)
?LBE35:
?LBE_connectionHandleWriteIacLapComplete:
	leave	#4
;.stabn	192,0,0,?LBB35
;.stabn	224,0,0,?LBE35
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleWriteInquiryModeRequest:
	enter	#6
?LBB_connectionHandleWriteInquiryModeRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB36:
	tst	@(0,X)
	bne	?L137
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
?LBB37:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'700B
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0003
	st	AL,@(H'0001,X)
	ld	AH,#H'0000
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	cmp	AL,#H'0001
	bne	?L138
	ld	AH,#H'0001
?L138:
	ld	X,@H'fff8
	st	AH,@(H'0002,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE37:
	bra	(?L136)
?L137:
?LBB38:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@(H'0004,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0007
	bsr	$_MessageSendConditionallyOnTask
?L136:
?LBE38:
?LBE36:
?LBE_connectionHandleWriteInquiryModeRequest:
	leave	#6
;.stabn	192,0,0,?LBB37
;.stabn	224,0,0,?LBE37
;.stabn	192,0,0,?LBB38
;.stabn	224,0,0,?LBE38
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleWriteInquiryModeComplete:
	enter	#4
?LBB_connectionHandleWriteInquiryModeComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB39:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	beq	?L142
	ld	AL,#H'0001
?L142:
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'702E
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?LBE39:
?LBE_connectionHandleWriteInquiryModeComplete:
	leave	#4
;.stabn	192,0,0,?LBB39
;.stabn	224,0,0,?LBE39
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleReadInquiryModeRequest:
	enter	#6
?LBB_connectionHandleReadInquiryModeRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB40:
	tst	@(0,X)
	bne	?L144
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
?LBB41:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'700A
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE41:
	bra	(?L143)
?L144:
?LBB42:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0008
	bsr	$_MessageSendConditionallyOnTask
?L143:
?LBE42:
?LBE40:
?LBE_connectionHandleReadInquiryModeRequest:
	leave	#6
;.stabn	192,0,0,?LBB41
;.stabn	224,0,0,?LBE41
;.stabn	192,0,0,?LBB42
;.stabn	224,0,0,?LBE42
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleReadInquiryModeComplete:
	enter	#4
?LBB_connectionHandleReadInquiryModeComplete:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB43:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	beq	?L147
	ld	AL,#H'0001
?L147:
	ld	X,@H'fff8
	st	AL,@(0,X)
	ld	AH,#H'0000
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	cmp	AL,#H'0001
	bne	?L148
	ld	AH,#H'0001
?L148:
	ld	X,@H'fff8
	st	AH,@(H'0001,X)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'702F
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?LBE43:
?LBE_connectionHandleReadInquiryModeComplete:
	leave	#4
;.stabn	192,0,0,?LBB43
;.stabn	224,0,0,?LBE43
	ENDMOD

;# Function pattern *movqi2 used[0] = 253 used[1] = 29 used[3] = 1 total = 283
;# Function pattern *movqi3 used[0] = 273 total = 273
;# Function pattern *movqi8 used[0] = 14 total = 14
;# Function pattern *movhi used[2] = 9 used[3] = 8 total = 17
;# Function pattern *addqi0 used[0] = 6 total = 6
;# Function pattern *addqi2 used[0] = 37 used[2] = 3 total = 40
;# Function pattern *udivqi3_const used[0] = 4 total = 4
;# Function pattern *mulqi3_const used[0] = 2 total = 2
;# Function pattern *zero_extendqihi2_1 used[0] = 4 total = 4
;# Function pattern jump used[0] = 16 total = 16
;# Function pattern *call1 used[0] = 41 total = 41
;# Function pattern *call_value1 used[0] = 44 total = 44
;# Function pattern *movstrqi2 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 4 used[1] = 23 total = 27
;# Function pattern movstrqi+5 used[0] = 19 total = 19
;# Function pattern movstrqi+6 used[0] = 1 total = 1
	MODULE	dm_link_policy_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
_sendRoleCfmToClient:
	enter	#4
?LBB_sendRoleCfmToClient:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	cmp	AH,#H'0000
	beq	?L1
?LBB3:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7001
	bsr	$_MessageSend
?L1:
?LBE3:
?LBE2:
?LBE_sendRoleCfmToClient:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# import $_SinkGetBdAddr
;# import $_connectionConvertBdaddr_t
;# import $_connectionConvertHciRole_t
;# import $_VmSendDmPrim
;# end scan referenced symbols
_sendSetRoleRequest:
	enter	#7
?LBB_sendSetRoleRequest:
	st	AL,@(H'0004,Y)
?LBB4:
	ld	AL,@$XAP_UY
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	beq	?L4
?LBB5:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'080B
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0002
	ld	AL,@$XAP_UY
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0004,Y)
	bsr	$_connectionConvertHciRole_t
	ld	X,@(H'0005,Y)
	st	AH,@(H'0006,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
	ld	AH,#H'0001
	bra	(?L3)
?L4:
?LBE5:
	ld	AH,#H'0000
?L3:
?LBE4:
?LBE_sendSetRoleRequest:
	leave	#7
;.stabn	192,0,0,?LBB4
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;.stabn	224,0,0,?LBE4
;# begin scan referenced symbols
;# end scan referenced symbols
_sendGetRoleRequest:
	enter	#6
?LBB_sendGetRoleRequest:
?LBB6:
	ld	AL,@$XAP_UY
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	beq	?L6
?LBB7:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0809
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0007
	st	AL,@(H'0001,X)
	add	AH,#H'0003
	ld	AL,@$XAP_UY
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0004,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L6:
?LBE7:
?LBE6:
?LBE_sendGetRoleRequest:
	leave	#6
;.stabn	192,0,0,?LBB6
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;.stabn	224,0,0,?LBE6
;# begin scan referenced symbols
;# end scan referenced symbols
_sendLinkPolicyIndToClient:
	enter	#4
?LBB_sendLinkPolicyIndToClient:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB8:
	cmp	AH,#H'0000
	beq	?L8
?LBB9:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'702A
	bsr	$_MessageSend
?L8:
?LBE9:
?LBE8:
?LBE_sendLinkPolicyIndToClient:
	leave	#4
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
;# begin scan referenced symbols
;# import $_connectionGetCmTask
;# end scan referenced symbols
_sendLinkPolicyUpdateInd:
	enter	#4
?LBB_sendLinkPolicyUpdateInd:
	st	AH,@(H'0001,Y)
?LBB10:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	st	AH,@(0,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0001,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	ld	AL,#H'004A
	bsr	$_MessageSend
?LBE10:
?LBE_sendLinkPolicyUpdateInd:
	leave	#4
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;# begin scan referenced symbols
;# end scan referenced symbols
_setLinkSupervisionTimeout:
	enter	#4
?LBB_setLinkSupervisionTimeout:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB11:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,#H'0C37
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0008
	st	AL,@(H'0001,X)
	ld	AL,#H'0000
	st	AL,@(H'0002,X)
	add	AH,#H'0003
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AL,@(H'0001,Y)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0007,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE11:
?LBE_setLinkSupervisionTimeout:
	leave	#4
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
;# begin scan referenced symbols
;#(clobber:QI (reg:QI 0 AH))
;# import $_memcpy
;# import $_VmGetHandleFromPointer
;# end scan referenced symbols
_processPowerTable:
	enter	#7
?LBB_processPowerTable:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB12:
	smult	#H'0006
	st	AL,@(H'0004,Y)
	ld	AH,@$XAP_AL
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0007,Y)
	bsr	$_memcpy
?LBB13:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'7900
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(H'0001,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AL,@(H'0002,Y)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0005,X)
	ld	AH,@(H'0003,Y)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0005,Y)
	st	AH,@(H'0006,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE13:
?LBE12:
?LBE_processPowerTable:
	leave	#7
;.stabn	192,0,0,?LBB12
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
;.stabn	224,0,0,?LBE12
;# begin scan referenced symbols
;# import _setLinkSupervisionTimeout
;# import _processPowerTable
;# import $_ConnectionSetRole
;# end scan referenced symbols
_handleConnectionEvent:
	enter	#4
?LBB_handleConnectionEvent:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AL
	ld	AL,@(H'0002,X)
	bsr	_setLinkSupervisionTimeout
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0004,X)
	bsr	_processPowerTable
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	cmp	AL,#H'0002
	beq	?L13
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0001,X)
	bsr	$_ConnectionSetRole
?L13:
?LBE_handleConnectionEvent:
	leave	#4
;# begin scan referenced symbols
;# import $_calloc
;# import $_PanicNull
;# import $_StreamSinksFromBdAddr
;# import $_MessageSinkGetTask
;# import _sendLinkPolicyIndToClient
;# import _sendLinkPolicyUpdateInd
;# import $_free
;# end scan referenced symbols
_link_policy_update:
	enter	#9
?LBB_link_policy_update:
	st	AH,@(H'0002,Y)
?LBB14:
	ld	AL,#H'0000
	st	AL,@(H'0003,Y)
	ld	AL,#H'0006
	st	AL,@(H'0001,Y)
	ld	AH,@$XAP_AL
	ld	AL,#H'0001
	bsr	$_calloc
;	bsr	$_PanicNull
	DC	((256*15)+9)
	st	AH,@(H'0005,Y)
	ld	AL,@(H'0002,Y)
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	AL,@(H'0005,Y)
;	bsr	$_StreamSinksFromBdAddr
	DC	((256*87)+9)
	cmp	AH,#H'0000
	beq	?L17
?LBB15:
	ld	AH,#H'0001
	ld	AL,#H'0006
	bsr	$_calloc
;	bsr	$_PanicNull
	DC	((256*15)+9)
	st	AH,@(H'0006,Y)
	ld	AL,#H'0000
	st	AL,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	cmp	X,@(H'0001,Y)
	bcc	?L26
?L24:
	ld	AL,@(H'0005,Y)
	add	AL,@(H'0004,Y)
	st	AL,@(H'0007,Y)
	ld	X,@$XAP_AL
	tst	@(0,X)
	beq	?L20
?LBB16:
	ld	AH,@(0,X)
;	bsr	$_MessageSinkGetTask
	DC	((256*86)+9)
	cmp	AH,#H'0000
	beq	?L20
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	bsr	_sendLinkPolicyIndToClient
?L20:
	ld	AL,@(H'0004,Y)
?LBE16:
	add	AL,#H'0001
	st	AL,@(H'0004,Y)
	cmp	AL,@(H'0001,Y)
	bcs	?L24
?L26:
	ld	AH,@(H'0006,Y)
	bsr	_sendLinkPolicyUpdateInd
	ld	X,#H'0001
	st	X,@(H'0003,Y)
?L17:
?LBE15:
	ld	AH,@(H'0005,Y)
;	bsr	$_free
	DC	((256*4)+9)
?LBE14:
	ld	AH,@(H'0003,Y)
?LBE_link_policy_update:
	leave	#9
;.stabn	192,0,0,?LBB14
;.stabn	192,0,0,?LBB15
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
;.stabn	224,0,0,?LBE15
;.stabn	224,0,0,?LBE14
;# begin scan referenced symbols
;# import _handleConnectionEvent
;# end scan referenced symbols
$_connectionHandleLinkPolicyUpdate:
	enter	#6
?LBB_connectionHandleLinkPolicyUpdate:
	st	AH,@(H'0004,Y)
	ld	X,@$XAP_AH
?LBB17:
	tst	@(H'0001,X)
	beq	?L29
?LBB18:
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AL
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	beq	?L31
	ld	AH,@$XAP_UY
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0001,X)
	bsr	_handleConnectionEvent
?L31:
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0001,X)
;	bsr	$_free
	DC	((256*4)+9)
?L29:
?LBE18:
?LBE17:
?LBE_connectionHandleLinkPolicyUpdate:
	leave	#6
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
;# begin scan referenced symbols
;# import _link_policy_update
;# end scan referenced symbols
$_connectionLinkPolicyUpdate:
	enter	#6
?LBB_connectionLinkPolicyUpdate:
?LBB19:
	ld	AL,#H'0000
	st	AL,@(H'0004,Y)
	ld	AL,@$XAP_UY
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	beq	?L33
	ld	AH,@$XAP_UY
	bsr	_link_policy_update
	st	AH,@(H'0004,Y)
?L33:
?LBE19:
	ld	AH,@(H'0004,Y)
?LBE_connectionLinkPolicyUpdate:
	leave	#6
;.stabn	192,0,0,?LBB19
;.stabn	224,0,0,?LBE19
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionLinkPolicyUpdateByAddr:
	enter	#1
?LBB_connectionLinkPolicyUpdateByAddr:
	bsr	_link_policy_update
?LBE_connectionLinkPolicyUpdateByAddr:
	leave	#1
;# begin scan referenced symbols
;# import _sendSetRoleRequest
;# import _sendRoleCfmToClient
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import $_MessageSendConditionallyOnTask
;# end scan referenced symbols
$_connectionHandleLinkPolicySetRoleReq:
	enter	#6
?LBB_connectionHandleLinkPolicySetRoleReq:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB20:
	tst	@(0,X)
	bne	?L36
	ld	X,@$XAP_AL
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	bsr	_sendSetRoleRequest
	cmp	AH,#H'0000
	bne	?L37
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0001,X)
;	bsr	$_MessageSinkGetTask
	DC	((256*86)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0001,Y)
	ld	AL,#H'0002
	bsr	_sendRoleCfmToClient
	bra	(?L35)
?L37:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
	bra	(?L35)
?L36:
?LBB21:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0003
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'004B
	bsr	$_MessageSendConditionallyOnTask
?L35:
?LBE21:
?LBE20:
?LBE_connectionHandleLinkPolicySetRoleReq:
	leave	#6
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
;# begin scan referenced symbols
;# import _sendGetRoleRequest
;# end scan referenced symbols
$_connectionHandleLinkPolicyGetRoleReq:
	enter	#6
?LBB_connectionHandleLinkPolicyGetRoleReq:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB22:
	tst	@(0,X)
	bne	?L41
	ld	X,@$XAP_AL
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0001,X)
	bsr	_sendGetRoleRequest
	bra	(?L40)
?L41:
?LBB23:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@(H'0004,Y)
	st	AH,@(0,X)
	st	AL,@(1,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'004C
	bsr	$_MessageSendConditionallyOnTask
?L40:
?LBE23:
?LBE22:
?LBE_connectionHandleLinkPolicyGetRoleReq:
	leave	#6
;.stabn	192,0,0,?LBB23
;.stabn	224,0,0,?LBE23
;# begin scan referenced symbols
;# import $_connectionConvertHciStatus
;# import $_connectionConvertHciRole
;# end scan referenced symbols
$_connectionHandleDmSwitchRoleComplete:
	enter	#7
?LBB_connectionHandleDmSwitchRoleComplete:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
	tst	@(0,X)
	beq	?L43
	ld	AH,@(0,X)
;	bsr	$_MessageSinkGetTask
	DC	((256*86)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertHciStatus
	st	AH,@(H'0005,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0007,X)
	bsr	$_connectionConvertHciRole
	st	AH,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	st	AL,@(H'0001,Y)
	ld	AH,@(H'0004,Y)
	ld	AL,@(H'0005,Y)
	bsr	_sendRoleCfmToClient
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
?L43:
?LBE_connectionHandleDmSwitchRoleComplete:
	leave	#7
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleRoleDiscoveryComplete:
	enter	#7
?LBB_connectionHandleRoleDiscoveryComplete:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
	tst	@(0,X)
	beq	?L45
	ld	AH,@(0,X)
;	bsr	$_MessageSinkGetTask
	DC	((256*86)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertHciStatus
	st	AH,@(H'0005,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0007,X)
	bsr	$_connectionConvertHciRole
	st	AH,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	st	AL,@(H'0001,Y)
	ld	AH,@(H'0004,Y)
	ld	AL,@(H'0005,Y)
	bsr	_sendRoleCfmToClient
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
?L45:
?LBE_connectionHandleRoleDiscoveryComplete:
	leave	#7
;# begin scan referenced symbols
;# import $_Panic
;# end scan referenced symbols
$_connectionLinkPolicyHandleWritePowerStatesCfm:
	enter	#1
?LBB_connectionLinkPolicyHandleWritePowerStatesCfm:
	ld	X,@$XAP_AH
	tst	@(H'0005,X)
	beq	?L47
	ld	AL,@(H'0005,X)
	cmp	AL,#H'0002
	beq	?L47
;	bsr	$_Panic
	DC	((256*14)+9)
?L47:
?LBE_connectionLinkPolicyHandleWritePowerStatesCfm:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 115 used[1] = 19 total = 134
;# Function pattern *movqi3 used[0] = 109 total = 109
;# Function pattern *movhi used[2] = 1 used[3] = 1 total = 2
;# Function pattern *addqi0 used[0] = 1 total = 1
;# Function pattern *addqi2 used[0] = 6 total = 6
;# Function pattern *mulqi3_const used[0] = 1 total = 1
;# Function pattern jump used[0] = 4 total = 4
;# Function pattern *call1 used[0] = 26 total = 26
;# Function pattern *call_value1 used[0] = 38 total = 38
;# Function pattern *movstrqi2 used[0] = 1 total = 1
;# Function pattern movstrqi+2 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 9 used[1] = 7 total = 16
;# Function pattern movstrqi+5 used[0] = 4 total = 4
	MODULE	dm_security_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_connectionConvertBdaddr_t
;# import $_VmSendDmPrim
;# end scan referenced symbols
	.CODE
_aclOpen:
	enter	#3
?LBB_aclOpen:
	st	AH,@(0,Y)
?LBB2:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2805
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0001,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE2:
?LBE_aclOpen:
	leave	#3
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
;# begin scan referenced symbols
;# end scan referenced symbols
_aclClose:
	enter	#3
?LBB_aclClose:
	st	AH,@(0,Y)
?LBB3:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2806
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0001,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE3:
?LBE_aclClose:
	leave	#3
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# import $_MessageSend
;# end scan referenced symbols
_connectionSendAuthenticateCfm:
	enter	#4
?LBB_connectionSendAuthenticateCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB4:
	cmp	AH,#H'0000
	beq	?L3
?LBB5:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7013
	bsr	$_MessageSend
?L3:
?LBE5:
?LBE4:
?LBE_connectionSendAuthenticateCfm:
	leave	#4
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;# begin scan referenced symbols
;# import $_BdaddrIsZero
;# import _aclOpen
;# end scan referenced symbols
_handleInternalSetSecurityModeCfm:
	enter	#3
?LBB_handleInternalSetSecurityModeCfm:
	st	AH,@(0,Y)
	ld	X,@$XAP_AH
	tst	@(H'0005,X)
	beq	?L5
	ld	X,@$XAP_AL
	tst	@(H'0004,X)
	beq	?L5
	ld	AL,@$XAP_AH
	add	AL,#H'0008
	st	AL,@(H'0001,Y)
	ld	AH,@$XAP_AL
	bsr	$_BdaddrIsZero
	cmp	AH,#H'0000
	bne	?L8
	ld	AH,@(H'0001,Y)
	bsr	_aclOpen
	bra	(?L5)
?L8:
	ld	AL,#H'0000
	ld	X,@(0,Y)
	st	AL,@(H'0005,X)
?L5:
?LBE_handleInternalSetSecurityModeCfm:
	leave	#3
;# begin scan referenced symbols
;# import _connectionSendAuthenticateCfm
;# import _aclClose
;# import $_connectionGetCmTask
;# import $_MessageCancelFirst
;# import $_BdaddrSetZero
;# import $_ConnectionSmSetSecurityMode
;# end scan referenced symbols
_endAuthentication:
	enter	#4
?LBB_endAuthentication:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	cmp	AL,#H'0000
	beq	?L11
	ld	AL,@$XAP_AH
	add	AL,#H'0008
	ld	AH,@(H'0002,Y)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0005,X)
	bsr	_connectionSendAuthenticateCfm
?L11:
	ld	AH,@(H'0002,Y)
	cmp	AH,#H'0001
	bne	?L12
	ld	AH,@(H'0001,Y)
	add	AH,#H'0008
	bsr	_aclClose
	bra	(?L13)
?L12:
	bsr	$_connectionGetCmTask
	ld	AL,#H'000A
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
?L13:
	ld	AH,@(H'0001,Y)
	add	AH,#H'0008
	bsr	$_BdaddrSetZero
	bsr	$_connectionGetCmTask
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,X)
	bsr	$_ConnectionSmSetSecurityMode
?LBE_endAuthentication:
	leave	#4
;# begin scan referenced symbols
;# end scan referenced symbols
_sendEncryptionChangeInd:
	enter	#4
?LBB_sendEncryptionChangeInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB6:
	cmp	AH,#H'0000
	beq	?L15
?LBB7:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7018
	bsr	$_MessageSend
?L15:
?LBE7:
?LBE6:
?LBE_sendEncryptionChangeInd:
	leave	#4
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;# begin scan referenced symbols
;# import $_connectionGetMsgFilter
;# import $_connectionConvertBdaddr
;# import $_BdaddrIsSame
;# import _endAuthentication
;# end scan referenced symbols
_handleGenericAclClosedInd:
	enter	#9
?LBB_handleGenericAclClosedInd:
	st	AH,@(H'0005,Y)
	st	AL,@(H'0006,Y)
?LBB8:
	bsr	$_connectionGetMsgFilter
	st	AH,@(H'0007,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	AL,@(H'0009,Y)
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0006,Y)
	tst	@(H'0005,X)
	beq	?L18
	ld	AH,@$XAP_UXL
	add	AH,#H'0008
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	beq	?L18
	ld	AH,@(H'0006,Y)
	ld	AL,#H'0000
	bsr	_endAuthentication
?L18:
	tst	@(H'0005,Y)
	beq	?L17
	ld	X,@(H'0007,Y)
	ld	AL,@(0,X)
	and	AL,#H'0001
	cmp	AL,#H'0000
	beq	?L17
?LBB9:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0004,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0005,Y)
	ld	AL,#H'7012
	bsr	$_MessageSend
?L17:
?LBE9:
?LBE8:
?LBE_handleGenericAclClosedInd:
	leave	#9
;.stabn	192,0,0,?LBB8
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
;.stabn	224,0,0,?LBE8
;# begin scan referenced symbols
;# import $_connectionSendInternalInitCfm
;# end scan referenced symbols
$_connectionHandleSmAddDeviceCfm:
	enter	#1
?LBB_connectionHandleSmAddDeviceCfm:
	ld	X,@$XAP_AL
	tst	@(H'0006,X)
	beq	?L21
	ld	X,@$XAP_AH
	ld	AL,@(H'0001,X)
	add	AL,#H'0001
	st	AL,@(H'0001,X)
	cmp	AL,@(0,X)
	bne	?L21
	ld	AH,#H'0040
	bsr	$_connectionSendInternalInitCfm
?L21:
?LBE_connectionHandleSmAddDeviceCfm:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSmAddDeviceCfmReady:
	enter	#8
?LBB_connectionHandleSmAddDeviceCfmReady:
	st	AH,@(H'0005,Y)
	st	AL,@(H'0006,Y)
	ld	X,@$XAP_AH
?LBB10:
	tst	@(H'0007,X)
	beq	?L26
?LBB11:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_connectionConvertBdaddr
?LBB12:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	X,@$XAP_AH
	ld	AL,@(H'0001,X)
	ld	X,@H'fff8
	st	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,X)
	ld	X,@H'fff8
	st	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	st	AL,@(H'0004,X)
	ld	AL,#H'0000
	ld	X,@(H'0006,Y)
	tst	@(H'0006,X)
	bne	?L27
	ld	AL,#H'0001
?L27:
	ld	X,@H'fff8
	st	AL,@(0,X)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0007,X)
	ld	AL,#H'7032
	bsr	$_MessageSend
?L26:
?LBE12:
?LBE11:
	ld	AL,#H'0000
	ld	X,@(H'0005,Y)
	st	AL,@(H'0007,X)
?LBE10:
?LBE_connectionHandleSmAddDeviceCfmReady:
	leave	#8
;.stabn	192,0,0,?LBB11
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
;.stabn	224,0,0,?LBE11
;# begin scan referenced symbols
;# import $_connectionAuthSendLinkKey
;# end scan referenced symbols
$_connectionHandleSmLinkKeyReqInd:
	enter	#5
?LBB_connectionHandleSmLinkKeyReqInd:
	ld	AL,@$XAP_AH
?LBB13:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	bsr	$_connectionConvertBdaddr
	ld	AH,@$XAP_UY
	bsr	$_connectionAuthSendLinkKey
?LBE13:
?LBE_connectionHandleSmLinkKeyReqInd:
	leave	#5
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
;# begin scan referenced symbols
;# import $_connectionAuthAddDevice
;# end scan referenced symbols
$_connectionHandleSmLinkKeyInd:
	enter	#8
?LBB_connectionHandleSmLinkKeyInd:
	st	AH,@(H'0005,Y)
	st	AL,@(H'0006,Y)
?LBB14:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0006,Y)
	add	X,#H'0007
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	AL,@$XAP_UXL
	bsr	$_connectionAuthAddDevice
	cmp	AH,#H'0000
	bne	?L30
	ld	AL,#H'0002
	bra	(?L31)
?L30:
	ld	AL,#H'0000
?L31:
	st	AL,@(0,Y)
	ld	AH,@(H'0005,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	bsr	_connectionSendAuthenticateCfm
?LBE14:
?LBE_connectionHandleSmLinkKeyInd:
	leave	#8
;.stabn	192,0,0,?LBB14
;.stabn	224,0,0,?LBE14
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSmPinReqInd:
	enter	#5
?LBB_connectionHandleSmPinReqInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB15:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7015
	bsr	$_MessageSend
?LBE15:
?LBE_connectionHandleSmPinReqInd:
	leave	#5
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
;# begin scan referenced symbols
;# import $_connectionConvertProtocolId_t
;# end scan referenced symbols
$_connectionHandleSmAuthoriseInd:
	enter	#5
?LBB_connectionHandleSmAuthoriseInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB16:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0006,X)
	ld	AL,@(H'0007,X)
	bsr	$_connectionConvertProtocolId_t
	ld	X,@(H'0003,Y)
	st	AH,@(H'0004,X)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0008,X)
	ld	AL,@(H'0009,X)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'000A,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0007,X)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7016
	bsr	$_MessageSend
?LBE16:
?LBE_connectionHandleSmAuthoriseInd:
	leave	#5
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleDmAclOpenCfm:
	enter	#7
?LBB_connectionHandleDmAclOpenCfm:
	st	AH,@(H'0004,Y)
	ld	X,@$XAP_AH
?LBB17:
	tst	@(H'0005,X)
	beq	?L34
	ld	X,@$XAP_AL
	tst	@(H'0006,X)
	beq	?L36
?LBB18:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'0004,Y)
	add	AL,#H'0008
	st	AL,@(H'0005,Y)
	ld	AH,@$XAP_AL
	ld	AL,@$XAP_UY
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	beq	?L34
	ld	AH,@(H'0005,Y)
	bsr	_aclClose
?LBE18:
	bra	(?L34)
?L36:
	ld	AH,@(H'0004,Y)
	ld	AL,#H'0002
	bsr	_endAuthentication
?L34:
?LBE17:
?LBE_connectionHandleDmAclOpenCfm:
	leave	#7
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
;# begin scan referenced symbols
;# import _handleGenericAclClosedInd
;# end scan referenced symbols
$_connectionHandleDmAclClosedInd:
	enter	#3
?LBB_connectionHandleDmAclClosedInd:
	ld	X,@(H'0003,Y)
	add	X,#H'0002
	st	X,@(0,Y)
	ld	X,#H'0036
	st	X,@(H'0001,Y)
	bsr	_handleGenericAclClosedInd
?LBE_connectionHandleDmAclClosedInd:
	leave	#3
;# begin scan referenced symbols
;# import $_connectionConvertHciStatus
;# end scan referenced symbols
$_connectionHandleDmEnAclClosedInd:
	enter	#5
?LBB_connectionHandleDmEnAclClosedInd:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertHciStatus
	ld	AL,@(H'0005,Y)
	add	AL,#H'0002
	st	AL,@(0,Y)
	st	AH,@(H'0001,Y)
	ld	AH,@(H'0002,Y)
	ld	AL,@(H'0003,Y)
	bsr	_handleGenericAclClosedInd
?LBE_connectionHandleDmEnAclClosedInd:
	leave	#5
;# begin scan referenced symbols
;# import $_ConnectionSmDeleteAuthDevice
;# import $_MessageSendLater
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import $_MessageSendConditionallyOnTask
;# end scan referenced symbols
$_connectionHandleAuthenticationReq:
	enter	#8
?LBB_connectionHandleAuthenticationReq:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	X,@$XAP_AH
?LBB19:
	tst	@(H'0005,X)
	bne	?L42
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0005,X)
	ld	AH,@(H'0004,Y)
	add	AH,#H'0001
	bsr	$_ConnectionSmDeleteAuthDevice
?LBB20:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	X,@(H'0004,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	st	AH,@H'fff8
	ld	AH,@(H'0005,Y)
	st	AH,@(0,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@H'fff8
	ld	AL,#H'000A
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE20:
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,#H'0003
	bsr	$_ConnectionSmSetSecurityMode
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0008,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0009,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'000A,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'000B,X)
	bra	(?L41)
?L42:
?LBB21:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	AL,#H'0007
	ld	X,@(H'0004,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0003,Y)
	add	AL,#H'0005
	st	AL,@(H'0001,Y)
	ld	AL,#H'0009
	bsr	$_MessageSendConditionallyOnTask
?L41:
?LBE21:
?LBE19:
?LBE_connectionHandleAuthenticationReq:
	leave	#8
;.stabn	192,0,0,?LBB20
;.stabn	224,0,0,?LBE20
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleAuthenticationTimeout:
	enter	#1
?LBB_connectionHandleAuthenticationTimeout:
	ld	AL,#H'0001
	bsr	_endAuthentication
?LBE_connectionHandleAuthenticationTimeout:
	leave	#1
;# begin scan referenced symbols
;# import $_connectionConvertSecurityMode_t
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_handleSetSecurityModeReq:
	enter	#7
?LBB_handleSetSecurityModeReq:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB22:
	tst	@(H'0004,X)
	bne	?L46
	tst	@(H'0005,X)
	bne	?L47
	ld	X,@$XAP_AL
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0003,X)
?L47:
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0004,X)
?LBB23:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'2C07
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0001,X)
	bsr	$_connectionConvertSecurityMode_t
	ld	X,@(H'0004,Y)
	st	AH,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0002,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE23:
	bra	(?L45)
?L46:
?LBB24:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'0003
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0004
	st	AL,@(H'0001,Y)
	ld	AL,#H'000B
	bsr	$_MessageSendConditionallyOnTask
?L45:
?LBE24:
?LBE22:
?LBE_handleSetSecurityModeReq:
	leave	#7
;.stabn	192,0,0,?LBB23
;.stabn	224,0,0,?LBE23
;.stabn	192,0,0,?LBB24
;.stabn	224,0,0,?LBE24
;# begin scan referenced symbols
;# import _handleInternalSetSecurityModeCfm
;# end scan referenced symbols
$_connectionHandleSetSecurityModeCfm:
	enter	#4
?LBB_connectionHandleSetSecurityModeCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB25:
	bsr	$_connectionGetCmTask
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0004,X)
	cmp	AL,@$XAP_AH
	bne	?L50
	ld	AH,@$XAP_UXL
	ld	AL,@(H'0002,Y)
	bsr	_handleInternalSetSecurityModeCfm
	bra	(?L51)
?L50:
	ld	X,@(H'0001,Y)
	tst	@(H'0004,X)
	beq	?L51
?LBB26:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0004,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0004,X)
	ld	AL,#H'7014
	bsr	$_MessageSend
?L51:
?LBE26:
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0004,X)
?LBE25:
?LBE_connectionHandleSetSecurityModeCfm:
	leave	#4
;.stabn	192,0,0,?LBB26
;.stabn	224,0,0,?LBE26
;# begin scan referenced symbols
;# import $_connectionConvertProtocolId
;# import $_connectionConvertSecurityLevel_t
;# end scan referenced symbols
$_handleRegisterReq:
	enter	#3
?LBB_handleRegisterReq:
	st	AH,@(0,Y)
?LBB27:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2C02
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AH,@(0,X)
	bsr	$_connectionConvertProtocolId
	ld	X,@(H'0001,Y)
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0003,X)
	st	AL,@(H'0004,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'0005,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertSecurityLevel_t
	ld	X,@(H'0001,Y)
	st	AH,@(H'0006,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'0007,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE27:
?LBE_handleRegisterReq:
	leave	#3
;.stabn	192,0,0,?LBB27
;.stabn	224,0,0,?LBE27
;# begin scan referenced symbols
;# end scan referenced symbols
$_handleUnRegisterReq:
	enter	#3
?LBB_handleUnRegisterReq:
	st	AH,@(0,Y)
?LBB28:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2C03
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AH,@(0,X)
	bsr	$_connectionConvertProtocolId
	ld	X,@(H'0001,Y)
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0003,X)
	st	AL,@(H'0004,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE28:
?LBE_handleUnRegisterReq:
	leave	#3
;.stabn	192,0,0,?LBB28
;.stabn	224,0,0,?LBE28
;# begin scan referenced symbols
;# end scan referenced symbols
$_handleRegisterOutgoingReq:
	enter	#3
?LBB_handleRegisterOutgoingReq:
	st	AH,@(0,Y)
?LBB29:
	ld	AH,#H'000B
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2C04
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertProtocolId
	ld	X,@(H'0001,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0007,X)
	st	AL,@(H'0008,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0007,X)
	bsr	$_connectionConvertSecurityLevel_t
	ld	X,@(H'0001,Y)
	st	AH,@(H'0009,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'000A,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE29:
?LBE_handleRegisterOutgoingReq:
	leave	#3
;.stabn	192,0,0,?LBB29
;.stabn	224,0,0,?LBE29
;# begin scan referenced symbols
;# end scan referenced symbols
$_handleUnRegisterOutgoingReq:
	enter	#3
?LBB_handleUnRegisterOutgoingReq:
	st	AH,@(0,Y)
?LBB30:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2C05
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertProtocolId
	ld	X,@(H'0001,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0007,X)
	st	AL,@(H'0008,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE30:
?LBE_handleUnRegisterOutgoingReq:
	leave	#3
;.stabn	192,0,0,?LBB30
;.stabn	224,0,0,?LBE30
;# begin scan referenced symbols
;# import $_SinkGetBdAddr
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_handleEncryptReq:
	enter	#11
?LBB_handleEncryptReq:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	X,@$XAP_AH
?LBB31:
	tst	@(H'0006,X)
	bne	?L59
	ld	X,@$XAP_AL
?LBB32:
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0006,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'000C,X)
?LBB33:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'2C0E
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	beq	?L60
	ld	AH,@(H'0008,Y)
	add	AH,#H'0001
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_connectionConvertBdaddr_t
?L60:
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0008,Y)
	st	AL,@(H'0005,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE33:
?LBE32:
	bra	(?L58)
?L59:
?LBB34:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0009,Y)
	ld	AL,#H'0003
	ld	X,@(H'0007,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0009,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0006,Y)
	add	AL,#H'0006
	st	AL,@(H'0001,Y)
	ld	AL,#H'0010
	bsr	$_MessageSendConditionallyOnTask
?L58:
?LBE34:
?LBE31:
?LBE_handleEncryptReq:
	leave	#11
;.stabn	192,0,0,?LBB32
;.stabn	192,0,0,?LBB33
;.stabn	224,0,0,?LBE33
;.stabn	224,0,0,?LBE32
;.stabn	192,0,0,?LBB34
;.stabn	224,0,0,?LBE34
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleEncryptCfm:
	enter	#4
?LBB_connectionHandleEncryptCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB35:
	tst	@(H'0006,X)
	beq	?L63
?LBB36:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0002,Y)
	tst	@(H'0006,X)
	beq	?L64
	ld	AL,#H'0000
	bra	(?L66)
?L64:
	ld	AL,#H'0001
?L66:
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'000C,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0007,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0006,X)
	ld	AL,#H'7017
	bsr	$_MessageSend
?L63:
?LBE36:
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0006,X)
	st	AL,@(H'000C,X)
?LBE35:
?LBE_connectionHandleEncryptCfm:
	leave	#4
;.stabn	192,0,0,?LBB36
;.stabn	224,0,0,?LBE36
;# begin scan referenced symbols
;# import $_memcpy
;# end scan referenced symbols
$_handlePinRequestRes:
	enter	#5
?LBB_handlePinRequestRes:
	st	AH,@(H'0001,Y)
?LBB37:
	ld	AH,#H'0016
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,#H'2C0B
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(H'0001,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0004,X)
	ld	AL,#-H'0001
	add	AL,@$XAP_AH
	cmp	AL,#(H'0001+H'000F)
	bcc	?L68
	ld	X,@(H'0002,Y)
	st	AH,@(H'0005,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0006
	ld	AL,@(H'0001,Y)
	add	AL,#H'0005
	ld	X,@(H'0001,Y)
	ld	X,@(H'0004,X)
	st	X,@(0,Y)
	bsr	$_memcpy
	bra	(?L69)
?L68:
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(H'0005,X)
?L69:
	ld	AH,@(H'0002,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE37:
?LBE_handlePinRequestRes:
	leave	#5
;.stabn	192,0,0,?LBB37
;.stabn	224,0,0,?LBE37
;# begin scan referenced symbols
;# end scan referenced symbols
$_handleAuthoriseRes:
	enter	#3
?LBB_handleAuthoriseRes:
	st	AH,@(0,Y)
?LBB38:
	ld	AH,#H'000B
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'2C0C
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertProtocolId
	ld	X,@(H'0001,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0007,X)
	st	AL,@(H'0008,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'0009,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'000A,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE38:
?LBE_handleAuthoriseRes:
	leave	#3
;.stabn	192,0,0,?LBB38
;.stabn	224,0,0,?LBE38
;# begin scan referenced symbols
;# import $_ConnectionSmRegisterIncomingService
;# import $_ConnectionSmUnRegisterIncomingService
;# end scan referenced symbols
$_handleSetSdpSecurityInReq:
	enter	#4
?LBB_handleSetSdpSecurityInReq:
	ld	X,@$XAP_AH
	tst	@(0,X)
	beq	?L72
	ld	AL,#H'0001
	st	AL,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(0,Y)
	st	AL,@(H'0002,Y)
	ld	AH,#H'0000
	bsr	$_ConnectionSmRegisterIncomingService
	bra	(?L71)
?L72:
	ld	AL,#H'0001
	st	AL,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,#H'0000
	bsr	$_ConnectionSmUnRegisterIncomingService
?L71:
?LBE_handleSetSdpSecurityInReq:
	leave	#4
;# begin scan referenced symbols
;# import $_ConnectionSmRegisterOutgoingService
;# import $_ConnectionSmUnRegisterOutgoingService
;# end scan referenced symbols
$_handleSetSdpSecurityOutReq:
	enter	#4
?LBB_handleSetSdpSecurityOutReq:
	ld	X,@$XAP_AH
	tst	@(0,X)
	beq	?L75
	add	AH,#H'0001
	ld	AL,#H'0001
	st	AL,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(0,Y)
	st	AL,@(H'0002,Y)
	bsr	$_ConnectionSmRegisterOutgoingService
	bra	(?L74)
?L75:
	add	AH,#H'0001
	ld	AL,#H'0001
	st	AL,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(0,Y)
	bsr	$_ConnectionSmUnRegisterOutgoingService
?L74:
?LBE_handleSetSdpSecurityOutReq:
	leave	#4
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_handleAddAuthDeviceReq:
	enter	#7
?LBB_handleAddAuthDeviceReq:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB39:
	tst	@(H'0007,X)
	beq	?L78
?LBB40:
	ld	AH,#H'0016
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0016
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0007
	st	AL,@(H'0001,Y)
	ld	AL,#H'0014
	bsr	$_MessageSendConditionallyOnTask
?LBE40:
	bra	(?L77)
?L78:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0001
	ld	AL,@(H'0003,Y)
	add	AL,#H'0005
	ld	X,@(H'0003,Y)
	ld	X,@(H'0015,X)
	st	X,@(0,Y)
	bsr	$_connectionAuthAddDevice
	cmp	AH,#H'0000
	bne	?L80
?LBB41:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
	ld	AL,#H'0001
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7032
	bsr	$_MessageSend
?LBE41:
	bra	(?L77)
?L80:
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0007,X)
?L77:
?LBE39:
?LBE_handleAddAuthDeviceReq:
	leave	#7
;.stabn	192,0,0,?LBB40
;.stabn	224,0,0,?LBE40
;.stabn	192,0,0,?LBB41
;.stabn	224,0,0,?LBE41
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import $_connectionAuthGetDevice
;# end scan referenced symbols
$_handleGetAuthDeviceReq:
	enter	#24
?LBB_handleGetAuthDeviceReq:
	st	AH,@(H'0013,Y)
	st	AL,@(H'0014,Y)
	ld	X,@$XAP_AH
?LBB42:
	tst	@(H'0007,X)
	beq	?L83
?LBB43:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0015,Y)
	ld	AL,#H'0005
	ld	X,@(H'0014,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0015,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0013,Y)
	add	AL,#H'0007
	st	AL,@(H'0001,Y)
	ld	AL,#H'0015
	bsr	$_MessageSendConditionallyOnTask
?LBE43:
	bra	(?L82)
?L83:
?LBB44:
	ld	AH,#H'0018
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0016,Y)
	ld	X,@(H'0014,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0014,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0016,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0014,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0016,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0014,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0016,Y)
	st	AL,@(H'0004,X)
	ld	AH,@(H'0014,Y)
	add	AH,#H'0001
	ld	AL,@$XAP_UY
	add	AL,#H'0012
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_connectionAuthGetDevice
	cmp	AH,#H'0000
	beq	?L85
	ld	AL,#H'0000
	ld	X,@(H'0016,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0012,Y)
	st	AL,@(H'0005,X)
	ld	AL,#H'0010
	st	AL,@(H'0006,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0007
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_memcpy
	bra	(?L86)
?L85:
	ld	AL,#H'0001
	ld	X,@(H'0016,Y)
	st	AL,@(0,X)
?L86:
	ld	AL,@(H'0016,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0014,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7033
	bsr	$_MessageSend
?L82:
?LBE44:
?LBE42:
?LBE_handleGetAuthDeviceReq:
	leave	#24
;.stabn	192,0,0,?LBB43
;.stabn	224,0,0,?LBE43
;.stabn	192,0,0,?LBB44
;.stabn	224,0,0,?LBE44
;# begin scan referenced symbols
;# import $_calloc
;# import $_PanicNull
;# import $_StreamSinksFromBdAddr
;# import $_MessageSinkGetTask
;# import _sendEncryptionChangeInd
;# import $_free
;# end scan referenced symbols
$_connectionHandleEncryptionChange:
	enter	#11
?LBB_connectionHandleEncryptionChange:
	st	AH,@(H'0006,Y)
?LBB45:
	ld	AL,#H'0000
	st	AL,@(H'0007,Y)
	ld	AL,#H'0006
	st	AL,@(H'0005,Y)
	ld	AH,@$XAP_AL
	ld	AL,#H'0001
	bsr	$_calloc
;	bsr	$_PanicNull
	DC	((256*15)+9)
	st	AH,@(H'0008,Y)
	ld	AL,@(H'0006,Y)
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_connectionConvertBdaddr
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0005
	ld	AL,@(H'0008,Y)
;	bsr	$_StreamSinksFromBdAddr
	DC	((256*87)+9)
	cmp	AH,#H'0000
	beq	?L88
	ld	AL,@(H'0007,Y)
	cmp	AL,@(H'0005,Y)
	bcc	?L88
?L95:
	ld	X,@(H'0008,Y)
	add	X,@(H'0007,Y)
	st	X,@(H'0009,Y)
	tst	@(0,X)
	beq	?L91
?LBB46:
	ld	AH,@(0,X)
;	bsr	$_MessageSinkGetTask
	DC	((256*86)+9)
	cmp	AH,#H'0000
	beq	?L91
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0006,X)
	st	AL,@(0,Y)
	ld	X,@(H'0009,Y)
	ld	AL,@(0,X)
	bsr	_sendEncryptionChangeInd
?L91:
	ld	AL,@(H'0007,Y)
?LBE46:
	add	AL,#H'0001
	st	AL,@(H'0007,Y)
	cmp	AL,@(H'0005,Y)
	bcs	?L95
?L88:
	ld	AH,@(H'0008,Y)
;	bsr	$_free
	DC	((256*4)+9)
?LBE45:
?LBE_connectionHandleEncryptionChange:
	leave	#11
;.stabn	192,0,0,?LBB45
;.stabn	192,0,0,?LBB46
;.stabn	224,0,0,?LBE46
;.stabn	224,0,0,?LBE45
;# begin scan referenced symbols
;# import $_connectionAuthGetAttribute
;# end scan referenced symbols
$_connectionSmHandleGetAttributeReq:
	enter	#3
?LBB_connectionSmHandleGetAttributeReq:
	ld	X,@$XAP_AL
	st	AL,@(0,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0004,X)
	bsr	$_connectionAuthGetAttribute
?LBE_connectionSmHandleGetAttributeReq:
	leave	#3
;# begin scan referenced symbols
;# import $_connectionAuthGetIndexedAttribute
;# end scan referenced symbols
$_connectionSmHandleGetIndexedAttributeReq:
	enter	#3
?LBB_connectionSmHandleGetIndexedAttributeReq:
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	bsr	$_connectionAuthGetIndexedAttribute
?LBE_connectionSmHandleGetIndexedAttributeReq:
	leave	#3
	ENDMOD

;# Function pattern *movqi2 used[0] = 271 used[1] = 35 used[3] = 1 total = 307
;# Function pattern *movqi3 used[0] = 318 total = 318
;# Function pattern *movqi8 used[0] = 1 total = 1
;# Function pattern *movhi used[2] = 8 used[3] = 12 total = 20
;# Function pattern *addqi0 used[0] = 15 total = 15
;# Function pattern *addqi2 used[0] = 40 used[2] = 1 total = 41
;# Function pattern *andqi3 used[0] = 1 total = 1
;# Function pattern jump used[0] = 16 total = 16
;# Function pattern *call1 used[0] = 66 total = 66
;# Function pattern *call_value1 used[0] = 61 total = 61
;# Function pattern *movstrqi2 used[0] = 5 total = 5
;# Function pattern movstrqi+3 used[0] = 13 used[1] = 21 total = 34
;# Function pattern movstrqi+4 used[1] = 1 total = 1
;# Function pattern movstrqi+5 used[0] = 5 total = 5
	MODULE	dm_sync_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $___udivhi3
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
_sendSyncConnectCfmToClient:
	enter	#6
?LBB_sendSyncConnectCfmToClient:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
?LBB2:
	cmp	AH,#H'0000
	beq	?L1
?LBB3:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0000
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	st	AL,@(H'0002,X)
	st	AL,@(H'0004,X)
	st	AL,@(H'0003,X)
	st	AL,@(H'0006,X)
	st	AL,@(H'0005,X)
	tst	@(H'0003,Y)
	bne	?L3
	tst	@(H'0006,Y)
	beq	?L3
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0007,X)
	ld	X,@(H'0006,Y)
	tst	@(0,X)
	bne	?L4
	ld	AL,#H'0001
	ld	X,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	AL,#H'1F40
	st	AL,@(H'0004,X)
	ld	AH,@(H'0003,Y)
	st	AH,@(H'0003,X)
	st	AL,@(H'0006,X)
	st	AH,@(H'0005,X)
	bra	(?L3)
?L4:
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'0002
	bne	?L3
	ld	X,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	tst	@(H'0001,X)
	beq	?L3
	ld	AL,@(H'0002,X)
	umult	#H'0640
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,#H'0000
	ld	AL,@(H'0001,X)
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$___udivhi3
	ld	X,@(H'0004,Y)
	st	AH,@(H'0003,X)
	st	AL,@(H'0004,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0003,X)
	umult	#H'0640
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,#H'0000
	ld	AL,@(H'0001,X)
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	bsr	$___udivhi3
	ld	X,@(H'0004,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
?L3:
	ld	AH,@(H'0003,Y)
	ld	X,@(H'0004,Y)
	st	AH,@(0,X)
	st	X,@(0,Y)
	ld	AH,@(H'0002,Y)
	ld	AL,#H'7008
	bsr	$_MessageSend
?L1:
?LBE3:
?LBE2:
?LBE_sendSyncConnectCfmToClient:
	leave	#6
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# import $_VmSendDmPrim
;# import $_connectionGetCmTask
;# import $_MessageSendLater
;# end scan referenced symbols
$_connectionHandleSyncRegisterReq:
	enter	#6
?LBB_connectionHandleSyncRegisterReq:
	st	AH,@(H'0003,Y)
?LBB4:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'7C01
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AH,#H'0000
	ld	AL,@(0,X)
	ld	X,@H'fff8
	st	AH,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBB5:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AL,#H'03E8
	st	AL,@(H'0002,Y)
	ld	X,#H'0000
	st	X,@(H'0001,Y)
	ld	AL,#H'0048
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE5:
?LBE4:
?LBE_connectionHandleSyncRegisterReq:
	leave	#6
;.stabn	192,0,0,?LBB4
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;.stabn	224,0,0,?LBE4
;# begin scan referenced symbols
;# import $_MessageCancelFirst
;# end scan referenced symbols
$_connectionHandleSyncRegisterCfm:
	enter	#3
?LBB_connectionHandleSyncRegisterCfm:
	st	AH,@(H'0001,Y)
?LBB6:
	bsr	$_connectionGetCmTask
	ld	AL,#H'0048
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	cmp	AH,#H'0000
	bne	?L12
	cmp	AL,#H'0000
	beq	?L10
?L12:
?LBB7:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0000
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'7006
	bsr	$_MessageSend
?L10:
?LBE7:
?LBE6:
?LBE_connectionHandleSyncRegisterCfm:
	leave	#3
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSyncRegisterTimeoutInd:
	enter	#3
?LBB_connectionHandleSyncRegisterTimeoutInd:
	st	AH,@(H'0001,Y)
?LBB8:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0001
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7006
	bsr	$_MessageSend
?LBE8:
?LBE_connectionHandleSyncRegisterTimeoutInd:
	leave	#3
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSyncUnregisterReq:
	enter	#6
?LBB_connectionHandleSyncUnregisterReq:
	st	AH,@(H'0003,Y)
?LBB9:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'7C02
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AH,#H'0000
	ld	AL,@(0,X)
	ld	X,@H'fff8
	st	AH,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBB10:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AL,#H'03E8
	st	AL,@(H'0002,Y)
	ld	X,#H'0000
	st	X,@(H'0001,Y)
	ld	AL,#H'0049
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE10:
?LBE9:
?LBE_connectionHandleSyncUnregisterReq:
	leave	#6
;.stabn	192,0,0,?LBB9
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;.stabn	224,0,0,?LBE9
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSyncUnregisterTimeoutInd:
	enter	#3
?LBB_connectionHandleSyncUnregisterTimeoutInd:
	st	AH,@(H'0001,Y)
?LBB11:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0001
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7007
	bsr	$_MessageSend
?LBE11:
?LBE_connectionHandleSyncUnregisterTimeoutInd:
	leave	#3
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
;# begin scan referenced symbols
;# import $_SinkGetBdAddr
;# import _sendSyncConnectCfmToClient
;# import $_connectionConvertBdaddr_t
;# end scan referenced symbols
$_connectionHandleSyncConnectReq:
	enter	#8
?LBB_connectionHandleSyncConnectReq:
	st	AH,@(H'0005,Y)
	ld	X,@$XAP_AH
?LBB12:
	ld	AH,@(H'0001,X)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	cmp	AH,#H'0000
	bne	?L17
	st	AH,@(0,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
	bsr	_sendSyncConnectCfmToClient
	bra	(?L16)
?L17:
?LBB13:
	ld	AH,#H'0010
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	AL,#H'7C03
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	ld	X,@(H'0005,Y)
	ld	AH,#H'0000
	ld	AL,@(0,X)
	ld	X,@(H'0006,Y)
	st	AH,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0004
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0006,Y)
	st	AH,@(H'0008,X)
	st	AL,@(H'0009,X)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0004,X)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0006,Y)
	st	AH,@(H'000A,X)
	st	AL,@(H'000B,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'000C,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'000D,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'000E,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0009,X)
	xor	AL,#H'03C0
	ld	X,@(H'0006,Y)
	st	AL,@(H'000F,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L16:
?LBE13:
?LBE12:
?LBE_connectionHandleSyncConnectReq:
	leave	#8
;.stabn	192,0,0,?LBB12
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
;.stabn	224,0,0,?LBE12
;# begin scan referenced symbols
;# import $_connectionConvertBdaddr
;# import $_connectionLinkPolicyUpdateByAddr
;# end scan referenced symbols
$_connectionHandleSyncConnectCfm:
	enter	#13
?LBB_connectionHandleSyncConnectCfm:
	st	AH,@(H'000B,Y)
	ld	X,@$XAP_AH
?LBB14:
	ld	AL,@(H'000B,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'000C,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'000E,X)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'000F,X)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0006,X)
	st	AL,@(H'0006,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(H'0005,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	st	AL,@(0,Y)
	ld	AH,@(H'0003,X)
	ld	AL,@(H'0004,X)
	bsr	_sendSyncConnectCfmToClient
	ld	AL,@(H'000B,Y)
	add	AL,#H'0007
	ld	AH,@$XAP_UY
	add	AH,#H'0007
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'000B,Y)
	tst	@(H'0004,X)
	bne	?L19
	ld	AH,@$XAP_UY
	add	AH,#H'0007
	bsr	$_connectionLinkPolicyUpdateByAddr
?L19:
?LBE14:
?LBE_connectionHandleSyncConnectCfm:
	leave	#13
;.stabn	192,0,0,?LBB14
;.stabn	224,0,0,?LBE14
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSyncConnectInd:
	enter	#4
?LBB_connectionHandleSyncConnectInd:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AH
?LBB15:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	cmp	AH,#H'0000
	bne	?L23
	cmp	AL,#H'0000
	beq	?L21
?L23:
?LBB16:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	add	AL,#H'0004
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'0002,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'7009
	bsr	$_MessageSend
?L21:
?LBE16:
?LBE15:
?LBE_connectionHandleSyncConnectInd:
	leave	#4
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSyncConnectCompleteInd:
	enter	#13
?LBB_connectionHandleSyncConnectCompleteInd:
	st	AH,@(H'000B,Y)
	ld	X,@$XAP_AH
?LBB17:
	ld	AL,@(H'000B,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'000C,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'000E,X)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'000F,X)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0006,X)
	st	AL,@(H'0006,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(H'0005,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
	st	AL,@(0,Y)
	ld	AH,@(H'0003,X)
	ld	AL,@(H'0004,X)
	bsr	_sendSyncConnectCfmToClient
	ld	AL,@(H'000B,Y)
	add	AL,#H'0007
	ld	AH,@$XAP_UY
	add	AH,#H'0007
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'000B,Y)
	tst	@(H'0004,X)
	bne	?L24
	ld	AH,@$XAP_UY
	add	AH,#H'0007
	bsr	$_connectionLinkPolicyUpdateByAddr
?L24:
?LBE17:
?LBE_connectionHandleSyncConnectCompleteInd:
	leave	#13
;.stabn	192,0,0,?LBB17
;.stabn	224,0,0,?LBE17
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSyncConnectRes:
	enter	#3
?LBB_connectionHandleSyncConnectRes:
	st	AH,@(0,Y)
?LBB18:
	ld	AH,#H'000F
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0001,Y)
	ld	AL,#H'7C07
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	add	AL,#H'0001
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(0,Y)
	ld	AH,@(H'0006,X)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0006,X)
	st	AL,@(H'0007,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0008,X)
	ld	AL,@(H'0009,X)
	ld	X,@(H'0001,Y)
	st	AH,@(H'0008,X)
	st	AL,@(H'0009,X)
	ld	X,@(0,Y)
	ld	AL,@(H'000A,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'000A,X)
	ld	X,@(0,Y)
	ld	AL,@(H'000B,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'000B,X)
	ld	X,@(0,Y)
	ld	AL,@(H'000C,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'000C,X)
	ld	X,@(0,Y)
	ld	AL,@(H'000D,X)
	xor	AL,#H'03C0
	ld	X,@(H'0001,Y)
	st	AL,@(H'000D,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'0005,X)
	ld	X,@(0,Y)
	tst	@(H'0005,X)
	beq	?L27
	ld	AL,#H'0000
	bra	(?L29)
?L27:
	ld	AL,#H'000D
?L29:
	ld	X,@(H'0001,Y)
	st	AL,@(H'000E,X)
	ld	AH,@(H'0001,Y)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE18:
?LBE_connectionHandleSyncConnectRes:
	leave	#3
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSyncDisconnectReq:
	enter	#2
?LBB_connectionHandleSyncDisconnectReq:
	st	AH,@(0,Y)
?LBB19:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'7C22
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?LBE19:
?LBE_connectionHandleSyncDisconnectReq:
	leave	#2
;.stabn	192,0,0,?LBB19
;.stabn	224,0,0,?LBE19
;# begin scan referenced symbols
;# import $_connectionConvertHciStatus
;# end scan referenced symbols
$_connectionHandleSyncDisconnectInd:
	enter	#8
?LBB_connectionHandleSyncDisconnectInd:
	st	AH,@(H'0005,Y)
	ld	X,@$XAP_AH
?LBB20:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	cmp	AH,#H'0000
	bne	?L34
	cmp	AL,#H'0000
	beq	?L32
?L34:
?LBB21:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0006,Y)
	st	AH,@(0,X)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0006,Y)
	st	AH,@(H'0001,X)
	st	X,@(0,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'700A
	bsr	$_MessageSend
?L32:
	ld	AL,@(H'0005,Y)
?LBE21:
	add	AL,#H'0007
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0005,Y)
	tst	@(H'0004,X)
	bne	?L31
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_connectionLinkPolicyUpdateByAddr
?L31:
?LBE20:
?LBE_connectionHandleSyncDisconnectInd:
	leave	#8
;.stabn	192,0,0,?LBB20
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
;.stabn	224,0,0,?LBE20
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSyncDisconnectCfm:
	enter	#8
?LBB_connectionHandleSyncDisconnectCfm:
	st	AH,@(H'0005,Y)
	ld	X,@$XAP_AH
?LBB22:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	cmp	AH,#H'0000
	bne	?L38
	cmp	AL,#H'0000
	beq	?L36
?L38:
?LBB23:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0006,Y)
	st	AH,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	st	X,@(0,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'700A
	bsr	$_MessageSend
?L36:
	ld	AL,@(H'0005,Y)
?LBE23:
	add	AL,#H'0006
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0005,Y)
	tst	@(H'0004,X)
	bne	?L35
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_connectionLinkPolicyUpdateByAddr
?L35:
?LBE22:
?LBE_connectionHandleSyncDisconnectCfm:
	leave	#8
;.stabn	192,0,0,?LBB22
;.stabn	192,0,0,?LBB23
;.stabn	224,0,0,?LBE23
;.stabn	224,0,0,?LBE22
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSyncRenegotiateReq:
	enter	#3
?LBB_connectionHandleSyncRenegotiateReq:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AH
?LBB24:
	tst	@(H'0001,X)
	bne	?L40
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
	bsr	_sendSyncConnectCfmToClient
	bra	(?L39)
?L40:
?LBB25:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'7C25
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0008,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0009,X)
	xor	AL,#H'03C0
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L39:
?LBE25:
?LBE24:
?LBE_connectionHandleSyncRenegotiateReq:
	leave	#3
;.stabn	192,0,0,?LBB25
;.stabn	224,0,0,?LBE25
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSyncRenegotiateInd:
	enter	#4
?LBB_connectionHandleSyncRenegotiateInd:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AH
?LBB26:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	cmp	AH,#H'0000
	bne	?L44
	cmp	AL,#H'0000
	beq	?L42
?L44:
?LBB27:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0002,Y)
	st	AH,@(0,X)
	st	X,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'700B
	bsr	$_MessageSend
?L42:
?LBE27:
?LBE26:
?LBE_connectionHandleSyncRenegotiateInd:
	leave	#4
;.stabn	192,0,0,?LBB27
;.stabn	224,0,0,?LBE27
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSyncRenegotiateCfm:
	enter	#4
?LBB_connectionHandleSyncRenegotiateCfm:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AH
?LBB28:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	cmp	AH,#H'0000
	bne	?L47
	cmp	AL,#H'0000
	beq	?L45
?L47:
?LBB29:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertHciStatus
	ld	X,@(H'0002,Y)
	st	AH,@(0,X)
	st	X,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'700B
	bsr	$_MessageSend
?L45:
?LBE29:
?LBE28:
?LBE_connectionHandleSyncRenegotiateCfm:
	leave	#4
;.stabn	192,0,0,?LBB29
;.stabn	224,0,0,?LBE29
	ENDMOD

;# Function pattern *movqi2 used[0] = 149 used[1] = 6 total = 155
;# Function pattern *movqi3 used[0] = 204 total = 204
;# Function pattern *movhi used[2] = 12 used[3] = 13 total = 25
;# Function pattern *addqi0 used[0] = 12 total = 12
;# Function pattern *addqi2 used[0] = 8 total = 8
;# Function pattern *xorqi3 used[0] = 3 total = 3
;# Function pattern *umulqihi3_const used[0] = 2 total = 2
;# Function pattern *zero_extendqihi2 used[0] = 5 total = 5
;# Function pattern jump used[0] = 4 total = 4
;# Function pattern *call1 used[0] = 28 total = 28
;# Function pattern *call_value1 used[0] = 33 total = 33
;# Function pattern movstrqi+3 used[0] = 2 used[1] = 10 total = 12
;# Function pattern movstrqi+5 used[0] = 1 total = 1
;# Function pattern movstrqi+6 used[0] = 6 total = 6
	MODULE	l2cap_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
_getNextQosOpt:
	enter	#1
?LBB_getNextQosOpt:
	ld	X,@$XAP_AH
	ld	AH,#H'0000
	ld	AL,@(H'0003,X)
	asl	#H'0018
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,@(H'0002,X)
	ld	AL,#H'0000
	or	AL,@H'fff9
	or	AH,@H'fff8
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,#H'0000
	ld	AL,@(H'0001,X)
	asl	#H'0008
	or	AL,@H'fff9
	or	AH,@H'fff8
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,#H'0000
	ld	AL,@(0,X)
	or	AL,@H'fff9
	or	AH,@H'fff8
?LBE_getNextQosOpt:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
_setQosToDefault:
	enter	#1
?LBB_setQosToDefault:
	ld	X,@$XAP_AH
	ld	AL,#H'0001
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0002,X)
	st	AL,@(H'0001,X)
	st	AL,@(H'0004,X)
	st	AL,@(H'0003,X)
	st	AL,@(H'0006,X)
	st	AL,@(H'0005,X)
	ld	AL,#-H'0001
	st	AL,@(H'0008,X)
	st	AL,@(H'0007,X)
	st	AL,@(H'000A,X)
	st	AL,@(H'0009,X)
?LBE_setQosToDefault:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
_isQosDefault:
	enter	#1
?LBB_isQosDefault:
	ld	X,@$XAP_AH
	ld	AL,#H'0000
	st	AL,@(-1,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'0001
	bne	?L4
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	cmp	AH,#H'0000
	bne	?L4
	cmp	AL,#H'0000
	bne	?L4
	ld	AH,@(H'0003,X)
	ld	AL,@(H'0004,X)
	cmp	AH,#H'0000
	bne	?L4
	cmp	AL,#H'0000
	bne	?L4
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	cmp	AH,#H'0000
	bne	?L4
	cmp	AL,#H'0000
	bne	?L4
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0008,X)
	xor	AL,#H'FFFF
	xor	AH,#H'FFFF
	cmp	AH,#H'0000
	bne	?L4
	cmp	AL,#H'0000
	bne	?L4
	ld	AH,@(H'0009,X)
	ld	AL,@(H'000A,X)
	xor	AL,#H'FFFF
	xor	AH,#H'FFFF
	cmp	AH,#H'0000
	bne	?L4
	cmp	AL,#H'0000
	bne	?L4
	ld	AL,#H'0001
	st	AL,@(-1,Y)
?L4:
	ld	AH,@(-1,Y)
?LBE_isQosDefault:
	leave	#1
;# begin scan referenced symbols
;# end scan referenced symbols
_convertToQosFlow_t:
	enter	#1
?LBB_convertToQosFlow_t:
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,@$XAP_AH
	ld	AH,@(0,X)
	ld	X,@$XAP_AL
	st	AH,@(0,X)
	ld	X,@H'fff8
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	ld	X,@H'fff9
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	ld	X,@H'fff8
	ld	AH,@(H'0003,X)
	ld	AL,@(H'0004,X)
	ld	X,@H'fff9
	st	AH,@(H'0003,X)
	st	AL,@(H'0004,X)
	ld	X,@H'fff8
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@H'fff9
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	X,@H'fff8
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0008,X)
	ld	X,@H'fff9
	st	AH,@(H'0007,X)
	st	AL,@(H'0008,X)
	ld	X,@H'fff8
	ld	AH,@(H'0009,X)
	ld	AL,@(H'000A,X)
	ld	X,@H'fff9
	st	AH,@(H'0009,X)
	st	AL,@(H'000A,X)
?LBE_convertToQosFlow_t:
	leave	#1
;# begin scan referenced symbols
;# import $_connectionGetTaskFromMap
;# end scan referenced symbols
_getTask:
	enter	#1
?LBB_getTask:
	ld	AL,@$XAP_AH
?LBB2:
	ld	AH,#H'0000
	bsr	$_connectionGetTaskFromMap
?LBE2:
?LBE_getTask:
	leave	#1
;# begin scan referenced symbols
;# import $_connectionDeleteTaskMap
;# end scan referenced symbols
_deleteTaskMap:
	enter	#1
?LBB_deleteTaskMap:
	ld	AL,@$XAP_AH
?LBB3:
	ld	AH,#H'0000
	bsr	$_connectionDeleteTaskMap
?LBE3:
?LBE_deleteTaskMap:
	leave	#1
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import _setQosToDefault
;# import $_connectionAddInstance
;# end scan referenced symbols
_addConnection:
	enter	#4
?LBB_addConnection:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB4:
	ld	AH,#H'001E
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,#H'0000
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AH,@(0,Y)
	st	AH,@(H'0001,X)
	ld	AH,@(H'0001,Y)
	st	AH,@(H'0002,X)
	st	AL,@(H'001D,X)
	tst	@(H'0004,Y)
	beq	?L15
	ld	AH,@$XAP_UXL
	add	AH,#H'0008
	ld	AL,#H'0012
	ld	X,@(H'0004,Y)
	bc2
	bra	(?L16)
?L15:
	ld	AL,#H'0030
	ld	X,@(H'0002,Y)
	st	AL,@(H'0008,X)
	st	AL,@(H'0009,X)
	ld	AL,#-H'0001
	st	AL,@(H'000A,X)
	ld	AH,#H'0001
	st	AH,@(H'000B,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'000C
	bsr	_setQosToDefault
	ld	AH,#H'0001
	ld	X,@(H'0002,Y)
	st	AH,@(H'0017,X)
?L16:
	ld	AH,#H'0000
	ld	X,@(H'0002,Y)
	st	AH,@(H'001A,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'001C,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0007,X)
	ld	AL,#H'0001
	st	AL,@(H'001B,X)
	st	AH,@(H'001D,X)
	ld	AH,@$XAP_UXL
	bsr	$_connectionAddInstance
?LBE4:
?LBE_addConnection:
	leave	#4
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import $_connectionDeleteInstance
;# end scan referenced symbols
_deleteConnection:
	enter	#13
?LBB_deleteConnection:
?LBB5:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	AH,@$XAP_UY
	ld	AL,#H'0006
	ld	X,@$XAP_UY
	add	X,#H'0006
	bc2
	ld	AH,#H'0000
	bsr	$_connectionDeleteInstance
?LBE5:
?LBE_deleteConnection:
	leave	#13
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import $_connectionGetInstance
;# end scan referenced symbols
_getConnection:
	enter	#13
?LBB_getConnection:
?LBB6:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
	ld	AH,@$XAP_UY
	ld	AL,#H'0006
	ld	X,@$XAP_UY
	add	X,#H'0006
	bc2
	ld	AH,#H'0000
	bsr	$_connectionGetInstance
?LBE6:
?LBE_getConnection:
	leave	#13
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
;# begin scan referenced symbols
;# import $_MessageSend
;# end scan referenced symbols
_sendL2capRegisterCfmToTask:
	enter	#4
?LBB_sendL2capRegisterCfmToTask:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB7:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7020
	bsr	$_MessageSend
?LBE7:
?LBE_sendL2capRegisterCfmToTask:
	leave	#4
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;# begin scan referenced symbols
;# import $_connectionGetCmTask
;# import $_MessageCancelFirst
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
_sendL2capConnectCfmToTask:
	enter	#5
?LBB_sendL2capConnectCfmToTask:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB8:
	bsr	$_connectionGetCmTask
	ld	AL,#H'0039
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
?LBB9:
	ld	AH,#H'0011
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0007,Y)
	st	AL,@(H'0004,X)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0005,X)
	tst	@(H'0009,Y)
	beq	?L21
	add	AH,#H'0006
	ld	AL,#H'000B
	ld	X,@(H'0009,Y)
	bc2
	bra	(?L22)
?L21:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0006
	bsr	_setQosToDefault
?L22:
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7022
	bsr	$_MessageSend
?LBE9:
?LBE8:
?LBE_sendL2capConnectCfmToTask:
	leave	#5
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
;# begin scan referenced symbols
;# end scan referenced symbols
_sendL2capDisconnectIndToTask:
	enter	#4
?LBB_sendL2capDisconnectIndToTask:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB10:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7024
	bsr	$_MessageSend
?LBE10:
?LBE_sendL2capDisconnectIndToTask:
	leave	#4
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;# begin scan referenced symbols
;# import $_VmSendL2capPrim
;# end scan referenced symbols
_sendL2capConnectRes:
	enter	#3
?LBB_sendL2capConnectRes:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB11:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0004
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0003,X)
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
?LBE11:
?LBE_sendL2capConnectRes:
	leave	#3
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
;# begin scan referenced symbols
;# import _isQosDefault
;# import _convertToQosFlow_t
;# end scan referenced symbols
_sendL2capConfigReq:
	enter	#5
?LBB_sendL2capConfigReq:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB12:
	ld	AH,#H'0011
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,#H'0007
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	X,#H'0000
	st	X,@(H'0002,Y)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0008,X)
	cmp	AL,#H'02A0
	beq	?L26
	ld	AL,#H'0001
	st	AL,@(H'0002,Y)
?L26:
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'000A,X)
	cmp	AL,#-H'0001
	beq	?L27
	ld	AL,@(H'0002,Y)
	or	AL,#H'0002
	st	AL,@(H'0002,Y)
?L27:
	ld	X,@(H'0001,Y)
	ld	AL,@(H'000A,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'000F,X)
	ld	AH,@(H'0001,Y)
	add	AH,#H'000C
	bsr	_isQosDefault
	cmp	AH,#H'0000
	bne	?L28
	ld	AL,@(H'0002,Y)
	or	AL,#H'0004
	st	AL,@(H'0002,Y)
?L28:
	ld	AH,@(H'0001,Y)
	add	AH,#H'000C
	ld	AL,@(H'0003,Y)
	add	AL,#H'0004
	bsr	_convertToQosFlow_t
	ld	AL,@(H'0002,Y)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	AL,#H'0000
	st	AL,@(H'0010,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
?LBE12:
?LBE_sendL2capConfigReq:
	leave	#5
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
;# begin scan referenced symbols
;# import $_VmGetHandleFromPointer
;# end scan referenced symbols
_sendL2capConfigRes:
	enter	#4
?LBB_sendL2capConfigRes:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB13:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,#H'0008
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0002,X)
	ld	AL,#H'0000
	st	AL,@(H'0006,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0003,X)
	cmp	AL,#H'0000
	beq	?L32
	ld	AH,@(H'0004,Y)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0002,Y)
	st	AH,@(H'0004,X)
	bra	(?L33)
?L32:
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(H'0004,X)
?L33:
	ld	AL,@(H'0006,Y)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0005,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
?LBE13:
?LBE_sendL2capConfigRes:
	leave	#4
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
;# begin scan referenced symbols
;# end scan referenced symbols
_sendL2capDisconnectReq:
	enter	#2
?LBB_sendL2capDisconnectReq:
	st	AH,@(0,Y)
?LBB14:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0080
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
?LBE14:
?LBE_sendL2capDisconnectReq:
	leave	#2
;.stabn	192,0,0,?LBB14
;.stabn	224,0,0,?LBE14
;# begin scan referenced symbols
;# end scan referenced symbols
_sendInterlockL2capDisconnectRsp:
	enter	#5
?LBB_sendInterlockL2capDisconnectRsp:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB15:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'003A
	bsr	$_MessageSend
?LBE15:
?LBE_sendInterlockL2capDisconnectRsp:
	leave	#5
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
;# begin scan referenced symbols
;# import _getConnection
;# import $_StreamL2capSink
;# import _sendL2capConnectCfmToTask
;# import $_MessageSinkTask
;# import $_connectionLinkPolicyUpdate
;# import _deleteConnection
;# end scan referenced symbols
_configDanceCompleted:
	enter	#12
?LBB_configDanceCompleted:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
?LBB16:
	bsr	_getConnection
	st	AH,@(H'0008,Y)
	cmp	AH,#H'0000
	beq	?L36
	ld	X,@$XAP_AH
	tst	@(H'001A,X)
	bne	?L38
	ld	AL,#H'0001
	st	AL,@(H'001A,X)
	bra	(?L36)
?L38:
?LBB17:
	ld	AH,@(H'0007,Y)
;	bsr	$_StreamL2capSink
	DC	((256*112)+9)
	st	AH,@(H'000A,Y)
	ld	X,@(H'0008,Y)
	ld	X,@(H'0007,X)
	st	X,@(H'0009,Y)
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	st	AH,@(H'0001,Y)
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0009,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'000A,X)
	st	AL,@(H'0003,Y)
	ld	AL,@$XAP_UXL
	add	AL,#H'000C
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0007,Y)
	st	AL,@(H'0005,Y)
	ld	AH,@(H'0009,Y)
	ld	AL,#H'0000
	bsr	_sendL2capConnectCfmToTask
	ld	AH,@(H'000A,Y)
	ld	AL,@(H'0009,Y)
;	bsr	$_MessageSinkTask
	DC	((256*85)+9)
	ld	AH,@(H'000A,Y)
	bsr	$_connectionLinkPolicyUpdate
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
	bsr	_deleteConnection
?L36:
?LBE17:
?LBE16:
?LBE_configDanceCompleted:
	leave	#12
;.stabn	192,0,0,?LBB16
;.stabn	192,0,0,?LBB17
;.stabn	224,0,0,?LBE17
;.stabn	224,0,0,?LBE16
;# begin scan referenced symbols
;# import _sendL2capDisconnectReq
;# end scan referenced symbols
_configMoreFlagSet:
	enter	#2
?LBB_configMoreFlagSet:
	st	AL,@(0,Y)
?LBB18:
	bsr	_getConnection
	ld	X,@$XAP_AH
	ld	AL,#H'0002
	st	AL,@(H'001B,X)
	ld	AH,@(0,Y)
;	bsr	$_StreamL2capSink
	DC	((256*112)+9)
	bsr	_sendL2capDisconnectReq
?LBE18:
?LBE_configMoreFlagSet:
	leave	#2
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
;# begin scan referenced symbols
;#(clobber:QI (reg:QI 0 AH))
;#(clobber:QI (reg:QI 0 AH))
;#(clobber:QI (reg:QI 0 AH))
;# import _getNextQosOpt
;# end scan referenced symbols
_extractConfigOptions:
	enter	#6
?LBB_extractConfigOptions:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB19:
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
	ld	AL,#H'02A0
	ld	X,@(H'0006,Y)
	st	AL,@(0,X)
	ld	AL,#-H'0001
	ld	X,@(H'0007,Y)
	st	AL,@(0,X)
	ld	AH,@(H'0008,Y)
	bsr	_setQosToDefault
	ld	AL,@(H'0001,Y)
	cmp	AL,#H'0004
	bne	?L42
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'0001
	bne	?L42
	ld	AL,@(H'0003,X)
	asl	#H'0008
	or	AL,@(H'0002,X)
	ld	X,@(H'0006,Y)
	st	AL,@(0,X)
	bra	(?L43)
?L42:
	ld	AL,@(0,Y)
?LBB20:
	st	AL,@(H'0003,Y)
	tst	@(H'0001,Y)
	beq	?L43
?L58:
	ld	X,@(0,Y)
?LBB21:
	ld	AH,@(0,X)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0004,Y)
	add	X,#H'0002
	st	X,@(0,Y)
	ld	AL,@(H'0001,Y)
	add	AL,#-H'0002
	st	AL,@(H'0001,Y)
	ld	AL,@$XAP_AH
	and	AL,#H'0080
	cmp	AL,#H'0000
	bne	?L47
	cmp	AH,#H'0004
	bcz	?L48
	ld	X,@(H'0003,Y)
	add	X,@(H'0002,Y)
	st	AH,@(0,X)
	bra	(?L61)
?L48:
	ld	AL,@$XAP_AH
	and	AL,#H'007F
	cmp	AL,#H'0001
	bne	?L50
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	asl	#H'0008
	or	AL,@(0,X)
	ld	X,@(H'0006,Y)
	bra	(?L60)
?L50:
	ld	AL,@$XAP_AH
	and	AL,#H'007F
	cmp	AL,#H'0002
	bne	?L52
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	asl	#H'0008
	or	AL,@(0,X)
	ld	X,@(H'0007,Y)
?L60:
	st	AL,@(0,X)
	bra	(?L47)
?L52:
	ld	AL,@$XAP_AH
	and	AL,#H'007F
	cmp	AL,#H'0003
	bne	?L54
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0008,Y)
	st	AL,@(0,X)
	ld	AH,@(0,Y)
	bsr	_getNextQosOpt
	ld	X,@(H'0008,Y)
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	ld	AH,@(0,Y)
	add	AH,#H'0004
	bsr	_getNextQosOpt
	ld	X,@(H'0008,Y)
	st	AH,@(H'0003,X)
	st	AL,@(H'0004,X)
	ld	AH,@(0,Y)
	add	AH,#H'0008
	bsr	_getNextQosOpt
	ld	X,@(H'0008,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	AH,@(0,Y)
	add	AH,#H'000C
	bsr	_getNextQosOpt
	ld	X,@(H'0008,Y)
	st	AH,@(H'0007,X)
	st	AL,@(H'0008,X)
	ld	AH,@(0,Y)
	add	AH,#H'0010
	bsr	_getNextQosOpt
	ld	X,@(H'0008,Y)
	st	AH,@(H'0009,X)
	st	AL,@(H'000A,X)
	bra	(?L47)
?L54:
	ld	AL,@$XAP_AH
	and	AL,#H'007F
	cmp	AL,#H'0004
	beq	?L47
	ld	X,@(H'0003,Y)
	add	X,@(H'0002,Y)
	st	AH,@(0,X)
	ld	AL,#H'0000
?L61:
	st	AL,@(H'0001,X)
	ld	AL,@(H'0002,Y)
	add	AL,#H'0002
	st	AL,@(H'0002,Y)
?L47:
	ld	X,@(0,Y)
	add	X,@(H'0004,Y)
	st	X,@(0,Y)
	ld	AL,@(H'0001,Y)
	sub	AL,@(H'0004,Y)
	st	AL,@(H'0001,Y)
?LBE21:
	cmp	AL,#H'0000
	bne	?L58
?L43:
?LBE20:
?LBE19:
	ld	AH,@(H'0002,Y)
?LBE_extractConfigOptions:
	leave	#6
;.stabn	192,0,0,?LBB19
;.stabn	192,0,0,?LBB20
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
;.stabn	224,0,0,?LBE20
;.stabn	224,0,0,?LBE19
;# begin scan referenced symbols
;# import $_MessageSinkGetTask
;# import _sendL2capDisconnectIndToTask
;# end scan referenced symbols
_handleDisconnect:
	enter	#12
?LBB_handleDisconnect:
	st	AH,@(H'0006,Y)
	st	AL,@(H'0007,Y)
?LBB22:
	ld	AH,#H'0000
	ld	AL,@(H'0006,Y)
	bsr	_getConnection
	st	AH,@(H'0008,Y)
	cmp	AH,#H'0000
	beq	?L70
	ld	X,@$XAP_AH
	ld	AL,@(H'0001,X)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0005,Y)
	ld	AH,@(H'0007,X)
	ld	AL,@(H'001B,X)
	bsr	_sendL2capConnectCfmToTask
	ld	X,@(H'0008,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0006,Y)
	bsr	_deleteConnection
	bra	(?L69)
?L70:
?LBB23:
	ld	AH,@(H'0006,Y)
;	bsr	$_StreamL2capSink
	DC	((256*112)+9)
	st	AH,@(H'0009,Y)
	cmp	AH,#H'0000
	beq	?L69
?LBB24:
	tst	@(H'0007,Y)
	beq	?L74
	ld	AL,@(H'0007,Y)
	cmp	AL,#-H'1112
	beq	?L77
	bra	(?L78)
?L74:
	tst	@(H'000C,Y)
	beq	?L75
	ld	X,#H'0004
	bra	(?L81)
?L75:
	ld	AL,#H'0000
	bra	(?L80)
?L77:
	ld	X,#H'0001
?L81:
	st	X,@(H'000A,Y)
	bra	(?L73)
?L78:
	ld	AL,#H'0002
?L80:
	st	AL,@(H'000A,Y)
?L73:
	ld	AH,@(H'0009,Y)
;	bsr	$_MessageSinkGetTask
	DC	((256*86)+9)
	ld	AL,@(H'0009,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'000A,Y)
	bsr	_sendL2capDisconnectIndToTask
	ld	AH,@(H'0009,Y)
	bsr	$_connectionLinkPolicyUpdate
?L69:
?LBE24:
?LBE23:
?LBE22:
?LBE_handleDisconnect:
	leave	#12
;.stabn	192,0,0,?LBB22
;.stabn	192,0,0,?LBB23
;.stabn	192,0,0,?LBB24
;.stabn	224,0,0,?LBE24
;.stabn	224,0,0,?LBE23
;.stabn	224,0,0,?LBE22
;# begin scan referenced symbols
;# import $_connectionAddTaskMap
;# import $_MessageSendLater
;# import _sendL2capRegisterCfmToTask
;# end scan referenced symbols
$_connectionHandleL2capRegisterReq:
	enter	#6
?LBB_connectionHandleL2capRegisterReq:
	st	AH,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB25:
	ld	AL,@(H'0001,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(0,X)
	bsr	$_connectionAddTaskMap
	cmp	AH,#H'0000
	beq	?L84
?LBB26:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0001
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
?LBB27:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0001,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	AL,#H'03E8
	st	AL,@(H'0002,Y)
	ld	X,#H'0000
	st	X,@(H'0001,Y)
	ld	AL,#H'0038
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE27:
?LBE26:
	bra	(?L83)
?L84:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(0,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0001
	bsr	_sendL2capRegisterCfmToTask
?L83:
?LBE25:
?LBE_connectionHandleL2capRegisterReq:
	leave	#6
;.stabn	192,0,0,?LBB25
;.stabn	192,0,0,?LBB26
;.stabn	192,0,0,?LBB27
;.stabn	224,0,0,?LBE27
;.stabn	224,0,0,?LBE26
;.stabn	224,0,0,?LBE25
;# begin scan referenced symbols
;# import _getTask
;# import $_Panic
;# end scan referenced symbols
$_connectionHandleL2capRegisterCfm:
	enter	#4
?LBB_connectionHandleL2capRegisterCfm:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AH
?LBB28:
	ld	AH,@(H'0002,X)
	bsr	_getTask
	st	AH,@(H'0002,Y)
	bsr	$_connectionGetCmTask
	ld	AL,#H'0038
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	tst	@(H'0002,Y)
	beq	?L87
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(0,Y)
	ld	AH,@(H'0002,Y)
	ld	AL,#H'0000
	bsr	_sendL2capRegisterCfmToTask
	bra	(?L86)
?L87:
;	bsr	$_Panic
	DC	((256*14)+9)
?L86:
?LBE28:
?LBE_connectionHandleL2capRegisterCfm:
	leave	#4
;.stabn	192,0,0,?LBB28
;.stabn	224,0,0,?LBE28
;# begin scan referenced symbols
;# import _deleteTaskMap
;# end scan referenced symbols
$_connectionHandleL2capRegisterTimeout:
	enter	#3
?LBB_connectionHandleL2capRegisterTimeout:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0001,X)
	bsr	_deleteTaskMap
	cmp	AH,#H'0000
	bne	?L90
;	bsr	$_Panic
	DC	((256*14)+9)
?L90:
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(0,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0001
	bsr	_sendL2capRegisterCfmToTask
?LBE_connectionHandleL2capRegisterTimeout:
	leave	#3
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleL2capUnregisterReq:
	enter	#4
?LBB_connectionHandleL2capUnregisterReq:
	st	AH,@(H'0001,Y)
?LBB29:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	bsr	_deleteTaskMap
	cmp	AH,#H'0000
	beq	?L92
	ld	AL,#H'0000
	bra	(?L94)
?L92:
	ld	AL,#H'0001
?L94:
	ld	X,@(H'0002,Y)
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0001,X)
	st	X,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7021
	bsr	$_MessageSend
?LBE29:
?LBE_connectionHandleL2capUnregisterReq:
	leave	#4
;.stabn	192,0,0,?LBB29
;.stabn	224,0,0,?LBE29
;# begin scan referenced symbols
;# import $_connectionConvertBdaddr_t
;# import _addConnection
;# end scan referenced symbols
$_connectionHandleL2capConnectReq:
	enter	#7
?LBB_connectionHandleL2capConnectReq:
	st	AH,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB30:
	ld	X,@(0,X)
	st	X,@(H'0004,Y)
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'0003
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0001,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	ld	AL,@(H'0003,Y)
	add	AL,#H'0001
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'0006,X)
	ld	AL,#H'0000
	st	AL,@(H'0007,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
	ld	AL,@(H'0003,Y)
	add	AL,#H'0007
	st	AL,@(0,Y)
	ld	X,#H'0000
	st	X,@(H'0001,Y)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0005,X)
	ld	AL,#H'0000
	bsr	_addConnection
?LBE30:
?LBE_connectionHandleL2capConnectReq:
	leave	#7
;.stabn	192,0,0,?LBB30
;.stabn	224,0,0,?LBE30
;# begin scan referenced symbols
;# import _sendL2capConfigReq
;# end scan referenced symbols
$_connectionHandleL2capConnectCfm:
	enter	#11
?LBB_connectionHandleL2capConnectCfm:
	st	AH,@(H'0006,Y)
	ld	X,@$XAP_AH
?LBB31:
	ld	AL,@(H'0008,X)
	cmp	AL,#H'0001
	beq	?L109
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0006,X)
	bsr	_getConnection
	st	AH,@(H'0007,Y)
	cmp	AH,#H'0000
	bne	?L98
	ld	X,@(H'0006,Y)
?L109:
	ld	AH,@(H'0007,X)
	ld	AL,#H'0000
	bsr	_getConnection
	st	AH,@(H'0007,Y)
?L98:
	tst	@(H'0007,Y)
	bne	?L100
	ld	X,@(H'0006,Y)
?LBB32:
	ld	AH,@(H'0006,X)
;	bsr	$_StreamL2capSink
	DC	((256*112)+9)
	st	AH,@(H'0008,Y)
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0007,X)
	bsr	_getTask
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0007,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0007,Y)
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0006,X)
	st	AL,@(H'0005,Y)
	ld	AL,#H'0003
	bsr	_sendL2capConnectCfmToTask
	tst	@(H'0008,Y)
	beq	?L96
	ld	AH,@(H'0008,Y)
	bsr	_sendL2capDisconnectReq
?LBE32:
	bra	(?L96)
?L100:
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0006,Y)
	tst	@(H'0008,X)
	bne	?L103
	ld	AH,@(H'0006,X)
	ld	AL,@(H'0007,Y)
	bsr	_sendL2capConfigReq
?LBB33:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0009,Y)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0007,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0009,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0009,Y)
	st	AL,@(H'0002,X)
	bsr	$_connectionGetCmTask
	st	AH,@H'fffa
	ld	AL,@(H'0009,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0018,X)
	ld	AL,@(H'0019,X)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AL,@$XAP_AH
	smult	#H'03E8
	ld	X,@$XAP_AL
	ld	AL,@H'fff9
	umult	#H'03E8
	add	AH,@$XAP_UXL
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@H'fffa
	ld	AL,#H'0039
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE33:
	bra	(?L96)
?L103:
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0008,X)
	cmp	AL,#H'0001
	bne	?L105
	ld	AL,@(H'0006,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'0002,X)
	bra	(?L96)
?L105:
	ld	X,@(H'0006,Y)
?LBB34:
	ld	AL,@(H'0008,X)
	cmp	AL,#-H'2222
	bne	?L107
	ld	AL,#H'0006
	st	AL,@(-1,Y)
	bra	(?L108)
?L107:
	ld	X,#H'0004
	st	X,@(-1,Y)
?L108:
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0007,X)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@(H'0006,X)
	st	AL,@(H'0005,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0007,X)
	ld	AL,@(-1,Y)
	bsr	_sendL2capConnectCfmToTask
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0006,X)
	bsr	_deleteConnection
?L96:
?LBE34:
?LBE31:
?LBE_connectionHandleL2capConnectCfm:
	leave	#11
;.stabn	192,0,0,?LBB31
;.stabn	192,0,0,?LBB32
;.stabn	224,0,0,?LBE32
;.stabn	192,0,0,?LBB33
;.stabn	224,0,0,?LBE33
;.stabn	192,0,0,?LBB34
;.stabn	224,0,0,?LBE34
;.stabn	224,0,0,?LBE31
;# begin scan referenced symbols
;# import _configDanceCompleted
;# import _configMoreFlagSet
;# end scan referenced symbols
$_connectionHandleL2capConfigCfm:
	enter	#2
?LBB_connectionHandleL2capConfigCfm:
	st	AH,@(0,Y)
?LBB35:
	ld	AH,#H'0000
	ld	X,@(0,Y)
	ld	AL,@(H'0002,X)
	bsr	_getConnection
	cmp	AH,#H'0000
	beq	?L113
	ld	X,@$XAP_AH
	ld	AL,@(H'001B,X)
	cmp	AL,#H'0001
	bne	?L113
	ld	X,@(0,Y)
	tst	@(H'0003,X)
	bne	?L115
	tst	@(H'0012,X)
	bne	?L116
	ld	X,@$XAP_AH
	ld	AH,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0002,X)
	bsr	_configDanceCompleted
	bra	(?L113)
?L116:
	ld	X,@$XAP_AH
	ld	AH,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0002,X)
	bsr	_configMoreFlagSet
	bra	(?L113)
?L115:
	ld	AL,#H'0005
	ld	X,@$XAP_AH
	st	AL,@(H'001B,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0002,X)
;	bsr	$_StreamL2capSink
	DC	((256*112)+9)
	bsr	_sendL2capDisconnectReq
?L113:
?LBE35:
?LBE_connectionHandleL2capConfigCfm:
	leave	#2
;.stabn	192,0,0,?LBB35
;.stabn	224,0,0,?LBE35
;# begin scan referenced symbols
;# import $_VmGetPointerFromHandle
;# import _extractConfigOptions
;# import $_free
;#(clobber:QI (reg:QI 0 AH))
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import _sendL2capConfigRes
;# end scan referenced symbols
$_connectionHandleL2capConfigInd:
	enter	#12
?LBB_connectionHandleL2capConfigInd:
	st	AH,@(H'0005,Y)
?LBB36:
	ld	AH,#H'0000
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0002,X)
	bsr	_getConnection
	st	AH,@(H'0006,Y)
	cmp	AH,#H'0000
	beq	?L120
	ld	X,@$XAP_AH
	ld	AL,@(H'001B,X)
	cmp	AL,#H'0001
	bne	?L120
	ld	X,@(H'0005,Y)
	tst	@(H'0006,X)
	bne	?L122
?LBB37:
	ld	AH,#H'000B
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'000A,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0005,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0007,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0003
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	st	AL,@(H'0001,Y)
	ld	AL,@(H'000A,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0004,X)
	bsr	_extractConfigOptions
	st	AH,@(H'0008,Y)
	cmp	AH,#H'0000
	beq	?L123
	ld	AL,#H'0003
	st	AL,@(H'0009,Y)
	bra	(?L124)
?L123:
	ld	X,@(H'0005,Y)
	tst	@(H'0004,X)
	beq	?L125
	ld	AH,@(H'0007,Y)
;	bsr	$_free
	DC	((256*4)+9)
?L125:
	ld	AL,#H'0000
	st	AL,@(H'0008,Y)
	st	AL,@(H'0007,Y)
	st	AL,@(H'0009,Y)
	ld	AL,@(H'0003,Y)
	ld	X,@(H'0006,Y)
	cmp	AL,@(H'0009,X)
	bcc	?L126
?LBB38:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0007,Y)
	ld	AL,#H'0001
	st	AL,@(H'0009,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0002
	st	AL,@(H'0001,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0009,X)
	and	AL,#H'00FF
	ld	X,@(H'0007,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0009,X)
	asl	#H'0008
	ld	X,@(H'0007,Y)
	st	AL,@(H'0003,X)
	ld	AL,#H'0004
	st	AL,@(H'0008,Y)
?LBE38:
	bra	(?L127)
?L126:
	ld	AL,@(H'0003,Y)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0009,X)
?L127:
	ld	X,@(H'0006,Y)
	tst	@(H'000B,X)
	bne	?L128
	ld	AL,@(H'0004,Y)
	cmp	AL,#-H'0001
	beq	?L128
	ld	AL,#H'0002
	st	AL,@(H'0009,Y)
	bra	(?L129)
?L128:
	ld	AL,@(H'0004,Y)
	ld	X,@(H'0006,Y)
	st	AL,@(H'000A,X)
?L129:
	ld	X,@(H'0006,Y)
	tst	@(H'0017,X)
	bne	?L130
	ld	X,@(H'000A,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'0001
	bne	?L135
	bra	(?L134)
?L130:
	ld	X,@(H'000A,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	cmp	AH,#H'FFFF
	bne	?L145
	cmp	AL,#H'FFFF
	beq	?L135
?L145:
	ld	AH,@(H'0003,X)
	ld	AL,@(H'0004,X)
	cmp	AH,#H'FFFF
	bne	?L134
	cmp	AL,#H'FFFF
	bne	?L134
?L135:
	ld	AL,#H'0002
	st	AL,@(H'0009,Y)
	bra	(?L133)
?L134:
	ld	AH,@(H'0006,Y)
	add	AH,#H'000C
	ld	AL,#H'000B
	ld	X,@(H'000A,Y)
	bc2
?L133:
	tst	@(H'0009,Y)
	bne	?L124
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0001,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0002,X)
	bsr	_configDanceCompleted
?L124:
	ld	AL,@(H'0007,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0009,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	bsr	_sendL2capConfigRes
	ld	AH,@(H'000A,Y)
	bra	(?L140)
?L122:
?LBE37:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	st	AL,@(H'0001,Y)
	ld	AL,#H'0002
	st	AL,@(H'0002,Y)
	ld	X,@(H'0005,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	bsr	_sendL2capConfigRes
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0001,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0002,X)
	bsr	_configMoreFlagSet
	ld	X,@(H'0005,Y)
	tst	@(H'0004,X)
	beq	?L120
	ld	AH,@(H'0005,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	ld	X,@(H'0005,Y)
	st	AH,@(H'0005,X)
?L140:
;	bsr	$_free
	DC	((256*4)+9)
?L120:
?LBE36:
?LBE_connectionHandleL2capConfigInd:
	leave	#12
;.stabn	192,0,0,?LBB36
;.stabn	192,0,0,?LBB37
;.stabn	224,0,0,?LBE37
;.stabn	224,0,0,?LBE36
;# begin scan referenced symbols
;# import $_connectionConvertBdaddr
;# import _sendL2capConnectRes
;# end scan referenced symbols
$_connectionHandleL2capConnectInd:
	enter	#12
?LBB_connectionHandleL2capConnectInd:
	st	AH,@(H'0007,Y)
	ld	X,@$XAP_AH
?LBB39:
	ld	AH,@(H'0008,X)
	ld	AL,@(H'0007,X)
	bsr	_getConnection
	st	AH,@(H'0008,Y)
	cmp	AH,#H'0000
	bne	?L148
	ld	X,@(H'0007,Y)
?LBB40:
	ld	AH,@(H'0008,X)
	bsr	_getTask
	st	AH,@(H'0009,Y)
	cmp	AH,#H'0000
	beq	?L149
?LBB41:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'000A,Y)
	ld	AL,@(H'0007,Y)
	add	AL,#H'0003
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	bsr	$_connectionConvertBdaddr
	ld	AL,@(H'0003,Y)
	ld	X,@(H'000A,Y)
	st	AL,@(0,X)
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	ld	X,@$XAP_AH
	ld	AL,@(H'0001,X)
	ld	X,@(H'000A,Y)
	st	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,X)
	ld	X,@(H'000A,Y)
	st	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	ld	AL,@(H'0003,X)
	ld	X,@(H'000A,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'000A,Y)
	st	AL,@(H'0004,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'000A,Y)
	st	AL,@(H'0005,X)
	st	X,@(0,Y)
	ld	AH,@(H'0009,Y)
	ld	AL,#H'7023
	bsr	$_MessageSend
	ld	AL,@(H'0008,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0009,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@(H'0008,X)
	ld	AL,@(H'0007,X)
	bsr	_addConnection
?LBE41:
	bra	(?L147)
?L149:
	ld	AL,#H'0002
	bra	(?L152)
?L148:
?LBE40:
	ld	AL,#H'0000
?L152:
	st	AL,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0007,X)
	bsr	_sendL2capConnectRes
?L147:
?LBE39:
?LBE_connectionHandleL2capConnectInd:
	leave	#12
;.stabn	192,0,0,?LBB39
;.stabn	192,0,0,?LBB40
;.stabn	192,0,0,?LBB41
;.stabn	224,0,0,?LBE41
;.stabn	224,0,0,?LBE40
;.stabn	224,0,0,?LBE39
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionHandleL2capConnectRes:
	enter	#10
?LBB_connectionHandleL2capConnectRes:
	st	AH,@(H'0006,Y)
	ld	X,@$XAP_AH
?LBB42:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	bsr	_getConnection
	st	AH,@(H'0007,Y)
	cmp	AH,#H'0000
	bne	?L154
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(0,Y)
	st	AH,@(H'0001,Y)
	st	AH,@(H'0002,Y)
	st	AH,@(H'0003,Y)
	st	AH,@(H'0004,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(H'0005,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0009
	bsr	_sendL2capConnectCfmToTask
	bra	(?L153)
?L154:
	ld	X,@(H'0006,Y)
	tst	@(H'0001,X)
	beq	?L156
	ld	AH,@(H'0007,Y)
	add	AH,#H'0008
	ld	AL,#H'0012
	add	X,#H'0004
	bc2
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'0007,X)
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(H'001C,X)
	ld	AL,@(H'0002,X)
	bsr	_sendL2capConnectRes
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@$XAP_UXL
	bsr	_sendL2capConfigReq
?LBB43:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0008,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0008,Y)
	st	AL,@(H'0002,X)
	bsr	$_connectionGetCmTask
	st	AH,@H'fffa
	ld	AL,@(H'0008,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0018,X)
	ld	AL,@(H'0019,X)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AL,@$XAP_AH
	smult	#H'03E8
	ld	X,@$XAP_AL
	ld	AL,@H'fff9
	umult	#H'03E8
	add	AH,@$XAP_UXL
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@H'fffa
	ld	AL,#H'0039
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE43:
	bra	(?L153)
?L156:
	ld	AL,#H'0004
	st	AL,@(0,Y)
	ld	X,@(H'0007,Y)
	ld	AH,@(H'001C,X)
	ld	AL,@(H'0002,X)
	bsr	_sendL2capConnectRes
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0002,X)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0002,X)
	bsr	_deleteConnection
?L153:
?LBE42:
?LBE_connectionHandleL2capConnectRes:
	leave	#10
;.stabn	192,0,0,?LBB42
;.stabn	192,0,0,?LBB43
;.stabn	224,0,0,?LBE43
;.stabn	224,0,0,?LBE42
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleL2capDisconnectReq:
	enter	#2
?LBB_connectionHandleL2capDisconnectReq:
	ld	X,@$XAP_AH
	tst	@(H'0001,X)
	beq	?L159
	ld	AH,@(H'0001,X)
	bsr	_sendL2capDisconnectReq
	bra	(?L158)
?L159:
	ld	AL,@(H'0001,X)
	st	AL,@(0,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0003
	bsr	_sendL2capDisconnectIndToTask
?L158:
?LBE_connectionHandleL2capDisconnectReq:
	leave	#2
;# begin scan referenced symbols
;# import _handleDisconnect
;# end scan referenced symbols
$_connectionHandleL2capDisconnectCfm:
	enter	#2
?LBB_connectionHandleL2capDisconnectCfm:
	ld	X,@$XAP_AH
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	bsr	_handleDisconnect
?LBE_connectionHandleL2capDisconnectCfm:
	leave	#2
;# begin scan referenced symbols
;# import _sendInterlockL2capDisconnectRsp
;# end scan referenced symbols
$_connectionHandleL2capDisconnectInd:
	enter	#3
?LBB_connectionHandleL2capDisconnectInd:
	st	AH,@(H'0001,Y)
	ld	AL,#H'0000
	ld	X,@$XAP_AH
	tst	@(H'0002,X)
	bne	?L163
	ld	AL,#H'0001
?L163:
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#H'0000
	bsr	_handleDisconnect
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	bsr	_sendInterlockL2capDisconnectRsp
?LBE_connectionHandleL2capDisconnectInd:
	leave	#3
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleL2capConnectTimeout:
	enter	#2
?LBB_connectionHandleL2capConnectTimeout:
	st	AH,@(0,Y)
	ld	X,@$XAP_AH
?LBB44:
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	bsr	_getConnection
	ld	X,@$XAP_AH
	cmp	AH,#H'0000
	beq	?L164
	ld	AL,#H'0007
	st	AL,@(H'001B,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0002,X)
;	bsr	$_StreamL2capSink
	DC	((256*112)+9)
	bsr	_sendL2capDisconnectReq
?L164:
?LBE44:
?LBE_connectionHandleL2capConnectTimeout:
	leave	#2
;.stabn	192,0,0,?LBB44
;.stabn	224,0,0,?LBE44
;# begin scan referenced symbols
;# import $_VmSendDmPrim
;# end scan referenced symbols
$_connectionHandleQosSetupCfm:
	enter	#2
?LBB_connectionHandleQosSetupCfm:
	st	AH,@(0,Y)
	ld	X,@$XAP_AH
?LBB45:
	ld	AH,@(H'000D,X)
	ld	AL,@(H'000E,X)
	cmp	AH,#hwrd(H'0001+H'222D)
	bcs	?L169
	bne	?L167
	cmp	AL,#lwrd(H'0001+H'222D)
	bcc	?L167
?L169:
?LBB46:
	ld	AH,#H'0011
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0807
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0011
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0004,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0005,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0006,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0008,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0008,X)
	ld	X,@(0,Y)
	ld	AH,@(H'0009,X)
	ld	AL,@(H'000A,X)
	ld	X,@H'fff8
	st	AH,@(H'0009,X)
	st	AL,@(H'000A,X)
	ld	X,@(0,Y)
	ld	AH,@(H'000B,X)
	ld	AL,@(H'000C,X)
	ld	X,@H'fff8
	st	AH,@(H'000B,X)
	st	AL,@(H'000C,X)
	ld	AL,#H'61A8
	st	AL,@(H'000E,X)
	ld	AL,#H'0000
	st	AL,@(H'000D,X)
	ld	X,@(0,Y)
	ld	AH,@(H'000F,X)
	ld	AL,@(H'0010,X)
	ld	X,@H'fff8
	st	AH,@(H'000F,X)
	st	AL,@(H'0010,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendDmPrim
	DC	((256*107)+9)
?L167:
?LBE46:
?LBE45:
?LBE_connectionHandleQosSetupCfm:
	leave	#2
;.stabn	192,0,0,?LBB46
;.stabn	224,0,0,?LBE46
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleL2capInterlockDisconnectRsp:
	enter	#2
?LBB_connectionHandleL2capInterlockDisconnectRsp:
	st	AH,@(0,Y)
?LBB47:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'000F
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
;	bsr	$_VmSendL2capPrim
	DC	((256*106)+9)
?LBE47:
?LBE_connectionHandleL2capInterlockDisconnectRsp:
	leave	#2
;.stabn	192,0,0,?LBB47
;.stabn	224,0,0,?LBE47
	ENDMOD

;# Function pattern *movqi2 used[0] = 358 used[1] = 49 total = 407
;# Function pattern *movqi3 used[0] = 453 total = 453
;# Function pattern *movqi8 used[0] = 4 total = 4
;# Function pattern *movhi used[2] = 18 used[3] = 20 total = 38
;# Function pattern *iorhi3 used[0] = 3 total = 3
;# Function pattern *addqi0 used[0] = 6 total = 6
;# Function pattern *addqi2 used[0] = 27 total = 27
;# Function pattern *andqi3 used[0] = 6 total = 6
;# Function pattern *iorqi3 used[0] = 5 total = 5
;# Function pattern *subqi3 used[0] = 1 total = 1
;# Function pattern *mulqihi3_const used[0] = 2 total = 2
;# Function pattern *umulqihi3_const used[0] = 2 total = 2
;# Function pattern *ashlhi3 used[0] = 2 total = 2
;# Function pattern *ashlqi3 used[0] = 4 total = 4
;# Function pattern one_cmplhi2 used[0] = 2 total = 2
;# Function pattern *zero_extendqihi2 used[0] = 3 total = 3
;# Function pattern jump used[0] = 34 total = 34
;# Function pattern *call1 used[0] = 62 total = 62
;# Function pattern *call_value1 used[0] = 69 total = 69
;# Function pattern *movstrqi2 used[0] = 6 total = 6
;# Function pattern zero_extendqihi2+1 used[0] = 1 total = 1
;# Function pattern movstrqi+2 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 18 used[1] = 21 total = 39
;# Function pattern movstrqi+5 used[0] = 19 total = 19
;# Function pattern movstrqi+6 used[0] = 5 total = 5
;# Function pattern movstrqi+7 used[0] = 3 total = 3
	MODULE	rfc_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_connectionAddInstance
;# end scan referenced symbols
	.CODE
_addRfcommConnection:
	enter	#3
?LBB_addRfcommConnection:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB2:
	ld	AH,#H'001E
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0001
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0005,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0006,X)
	ld	AL,#H'0000
	st	AL,@(H'001D,X)
	bsr	$_connectionAddInstance
?LBE2:
?LBE_addRfcommConnection:
	leave	#3
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
;# begin scan referenced symbols
;# import $_connectionGetId
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import $_connectionGetInstance
;# end scan referenced symbols
_getRfcommConnection:
	enter	#13
?LBB_getRfcommConnection:
	ld	X,@(H'000D,Y)
?LBB3:
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0006
	st	AL,@H'fff8
	ld	AL,@$XAP_UXL
	bsr	$_connectionGetId
	ld	AH,@$XAP_UY
	ld	AL,#H'0006
	ld	X,@$XAP_UY
	add	X,#H'0006
	bc2
	ld	AH,#H'0001
	bsr	$_connectionGetInstance
?LBE3:
?LBE_getRfcommConnection:
	leave	#13
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import $_connectionDeleteInstance
;# end scan referenced symbols
_deleteRfcommConnection:
	enter	#13
?LBB_deleteRfcommConnection:
	ld	X,@(H'000D,Y)
?LBB4:
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0006
	st	AL,@H'fff8
	ld	AL,@$XAP_UXL
	bsr	$_connectionGetId
	ld	AH,@$XAP_UY
	ld	AL,#H'0006
	ld	X,@$XAP_UY
	add	X,#H'0006
	bc2
	ld	AH,#H'0001
	bsr	$_connectionDeleteInstance
?LBE4:
?LBE_deleteRfcommConnection:
	leave	#13
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;# begin scan referenced symbols
;# import $_connectionGetTaskFromMap
;# end scan referenced symbols
_getRfcommTask:
	enter	#1
?LBB_getRfcommTask:
	ld	AL,@$XAP_AH
?LBB5:
	ld	AH,#H'0001
	bsr	$_connectionGetTaskFromMap
?LBE5:
?LBE_getRfcommTask:
	leave	#1
;# begin scan referenced symbols
;# import $_MessageSend
;# end scan referenced symbols
_sendRfcommConnectionInd:
	enter	#4
?LBB_sendRfcommConnectionInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB6:
	cmp	AH,#H'0000
	beq	?L5
?LBB7:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0004,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0005,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7027
	bsr	$_MessageSend
?L5:
?LBE7:
?LBE6:
?LBE_sendRfcommConnectionInd:
	leave	#4
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;# begin scan referenced symbols
;# import $_connectionConvertRfcommDisconnectStatus
;# end scan referenced symbols
_sendRfcommDisconnectInd:
	enter	#5
?LBB_sendRfcommDisconnectInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB8:
	cmp	AH,#H'0000
	beq	?L7
?LBB9:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AH,@(H'0002,Y)
	bsr	$_connectionConvertRfcommDisconnectStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0001,X)
	st	X,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7028
	bsr	$_MessageSend
?L7:
?LBE9:
?LBE8:
?LBE_sendRfcommDisconnectInd:
	leave	#5
;.stabn	192,0,0,?LBB9
;.stabn	224,0,0,?LBE9
;# begin scan referenced symbols
;# end scan referenced symbols
_sendRfcommConnectionCfm:
	enter	#4
?LBB_sendRfcommConnectionCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB10:
	cmp	AH,#H'0000
	beq	?L9
?LBB11:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0003,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7026
	bsr	$_MessageSend
?L9:
?LBE11:
?LBE10:
?LBE_sendRfcommConnectionCfm:
	leave	#4
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
;# begin scan referenced symbols
;# end scan referenced symbols
_sendRfcommControlInd:
	enter	#4
?LBB_sendRfcommControlInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB12:
	cmp	AH,#H'0000
	beq	?L11
?LBB13:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7029
	bsr	$_MessageSend
?L11:
?LBE13:
?LBE12:
?LBE_sendRfcommControlInd:
	leave	#4
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
;# begin scan referenced symbols
;# import $_connectionConvertBdaddr_t
;# import $_VmSendRfcommPrim
;# end scan referenced symbols
_startMuxSession:
	enter	#4
?LBB_startMuxSession:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB14:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,#H'0005
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0001
	ld	AL,@(0,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	AL,#H'0003
	ld	X,@(H'0002,Y)
	st	AL,@(H'0005,X)
	ld	AL,#H'0000
	st	AL,@(H'0008,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0007,X)
	ld	AL,#H'00FF
	st	AL,@(H'0006,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE14:
?LBE_startMuxSession:
	leave	#4
;.stabn	192,0,0,?LBB14
;.stabn	224,0,0,?LBE14
;# begin scan referenced symbols
;# end scan referenced symbols
_startParnegPhase:
	enter	#2
?LBB_startParnegPhase:
	st	AH,@(0,Y)
?LBB15:
	ld	AH,#H'0007
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0020
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(0,Y)
	ld	AL,@(H'000A,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(0,Y)
	ld	AL,@(H'000C,X)
	add	AL,#-H'0001
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
	ld	AL,#H'0001
	st	AL,@(H'0005,X)
	ld	AL,#H'0000
	st	AL,@(H'0006,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE15:
?LBE_startParnegPhase:
	leave	#2
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
;# begin scan referenced symbols
;# end scan referenced symbols
_startEstablishPhase:
	enter	#2
?LBB_startEstablishPhase:
	st	AH,@(0,Y)
?LBB16:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'000C
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(0,Y)
	ld	AL,@(H'000A,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
	ld	AL,#H'0003
	ld	X,@(0,Y)
	st	AL,@(H'0008,X)
?LBE16:
?LBE_startEstablishPhase:
	leave	#2
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
;# begin scan referenced symbols
;# end scan referenced symbols
_startControlPhase:
	enter	#2
?LBB_startControlPhase:
	st	AH,@(0,Y)
?LBB17:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'001C
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	AL,#H'0003
	st	AL,@(H'0003,X)
	ld	AL,#H'0000
	st	AL,@(H'0004,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE17:
?LBE_startControlPhase:
	leave	#2
;.stabn	192,0,0,?LBB17
;.stabn	224,0,0,?LBE17
;# begin scan referenced symbols
;# end scan referenced symbols
_sendControlSignal:
	enter	#3
?LBB_sendControlSignal:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB18:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'002E
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	AL,#H'0000
	st	AL,@(H'0002,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0004,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE18:
?LBE_sendControlSignal:
	leave	#3
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
;# begin scan referenced symbols
;# end scan referenced symbols
_closeMuxSession:
	enter	#2
?LBB_closeMuxSession:
	st	AH,@(0,Y)
?LBB19:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'000A
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE19:
?LBE_closeMuxSession:
	leave	#2
;.stabn	192,0,0,?LBB19
;.stabn	224,0,0,?LBE19
;# begin scan referenced symbols
;# end scan referenced symbols
_releaseServerChannel:
	enter	#2
?LBB_releaseServerChannel:
	st	AH,@(0,Y)
?LBB20:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'002D
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	AL,#H'0000
	st	AL,@(H'0002,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE20:
?LBE_releaseServerChannel:
	leave	#2
;.stabn	192,0,0,?LBB20
;.stabn	224,0,0,?LBE20
;# begin scan referenced symbols
;# end scan referenced symbols
_releaseServerChannelNoSink:
	enter	#3
?LBB_releaseServerChannelNoSink:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB21:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0010
	st	AL,@(0,X)
	ld	AL,@(0,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0002,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE21:
?LBE_releaseServerChannelNoSink:
	leave	#3
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
;# begin scan referenced symbols
;# end scan referenced symbols
_sendEstablishRes:
	enter	#3
?LBB_sendEstablishRes:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
?LBB22:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'000D
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0003,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE22:
?LBE_sendEstablishRes:
	leave	#3
;.stabn	192,0,0,?LBB22
;.stabn	224,0,0,?LBE22
;# begin scan referenced symbols
;#(clobber (reg:QI 3 X))
;# import _closeMuxSession
;# import $_StreamRfcommSink
;# import _releaseServerChannel
;# import _releaseServerChannelNoSink
;# end scan referenced symbols
_endConnection:
	enter	#2
?LBB_endConnection:
	st	AH,@(0,Y)
	ld	X,@$XAP_AH
?LBB23:
	ld	AL,@(H'0008,X)
	cmp	AL,#(H'0001+H'0005)
	bcc	?L22
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE32,X)
	brxl
	.SEG	CONST
?JTBASE32:
	.CODE
?L32:
	.SEG	CONST
	dc	?L28-?L32
	dc	?L24-?L32
	dc	?L28-?L32
	dc	?L28-?L32
	dc	?L28-?L32
	dc	?L22-?L32
	.CODE
?L24:
	ld	X,@(0,Y)
	ld	AH,@(H'0005,X)
	bsr	_closeMuxSession
	bra	(?L22)
?L28:
	ld	X,@(0,Y)
?LBB24:
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
;	bsr	$_StreamRfcommSink
	DC	((256*103)+9)
	cmp	AH,#H'0000
	beq	?L29
	bsr	_releaseServerChannel
	bra	(?L22)
?L29:
	ld	X,@(0,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	bsr	_releaseServerChannelNoSink
?L22:
?LBE24:
?LBE23:
?LBE_endConnection:
	leave	#2
;.stabn	192,0,0,?LBB24
;.stabn	224,0,0,?LBE24
;# begin scan referenced symbols
;# end scan referenced symbols
_sendRfcommRegisterCfm:
	enter	#4
?LBB_sendRfcommRegisterCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB25:
	cmp	AH,#H'0000
	beq	?L34
?LBB26:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'7025
	bsr	$_MessageSend
?L34:
?LBE26:
?LBE25:
?LBE_sendRfcommRegisterCfm:
	leave	#4
;.stabn	192,0,0,?LBB26
;.stabn	224,0,0,?LBE26
;# begin scan referenced symbols
;# import $_connectionGetCmTask
;# import $_MessageSendLater
;# import $_MessageSendConditionallyOnTask
;# end scan referenced symbols
$_connectionHandleRfcommRegisterReq:
	enter	#8
?LBB_connectionHandleRfcommRegisterReq:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	X,@$XAP_AH
?LBB27:
	tst	@(0,X)
	bne	?L37
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
?LBB28:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0003
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE28:
?LBB29:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	X,@(H'0004,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	AL,#H'07D0
	st	AL,@(H'0002,Y)
	ld	X,#H'0000
	st	X,@(H'0001,Y)
	ld	AL,#H'003F
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
?LBE29:
	bra	(?L36)
?L37:
?LBB30:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	X,@(H'0004,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0003,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'003B
	bsr	$_MessageSendConditionallyOnTask
?L36:
?LBE30:
?LBE27:
?LBE_connectionHandleRfcommRegisterReq:
	leave	#8
;.stabn	192,0,0,?LBB28
;.stabn	224,0,0,?LBE28
;.stabn	192,0,0,?LBB29
;.stabn	224,0,0,?LBE29
;.stabn	192,0,0,?LBB30
;.stabn	224,0,0,?LBE30
;# begin scan referenced symbols
;# import $_MessageCancelFirst
;# import $_connectionAddTaskMap
;# import _sendRfcommRegisterCfm
;# end scan referenced symbols
$_connectionHandleRfcommRegisterCfm:
	enter	#5
?LBB_connectionHandleRfcommRegisterCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB31:
	ld	AL,#H'0001
	st	AL,@(H'0003,Y)
	bsr	$_connectionGetCmTask
	ld	AL,#H'003F
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	X,@(H'0001,Y)
	tst	@(0,X)
	beq	?L39
	ld	X,@(H'0002,Y)
	tst	@(H'0003,X)
	beq	?L41
?LBB32:
	ld	AL,@(H'0002,X)
	st	AL,@(0,Y)
	ld	AH,#H'0001
	ld	X,@(H'0001,Y)
	ld	AL,@(0,X)
	bsr	$_connectionAddTaskMap
	cmp	AH,#H'0000
	beq	?L41
	ld	AL,#H'0000
	st	AL,@(H'0003,Y)
?L41:
?LBE32:
	tst	@(H'0003,Y)
	bne	?L43
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	bra	(?L44)
?L43:
	ld	AL,#H'0000
?L44:
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,@(H'0003,Y)
	bsr	_sendRfcommRegisterCfm
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?L39:
?LBE31:
?LBE_connectionHandleRfcommRegisterCfm:
	leave	#5
;.stabn	192,0,0,?LBB31
;.stabn	192,0,0,?LBB32
;.stabn	224,0,0,?LBE32
;.stabn	224,0,0,?LBE31
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleRfcommRegisterTimeout:
	enter	#2
?LBB_connectionHandleRfcommRegisterTimeout:
	ld	X,@$XAP_AH
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0001
	bsr	_sendRfcommRegisterCfm
?LBE_connectionHandleRfcommRegisterTimeout:
	leave	#2
;# begin scan referenced symbols
;# import _getRfcommTask
;# import _sendRfcommConnectionCfm
;# import _addRfcommConnection
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import _startMuxSession
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionHandleRfcommConnectReq:
	enter	#10
?LBB_connectionHandleRfcommConnectReq:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	X,@$XAP_AH
?LBB33:
	tst	@(H'0001,X)
	bne	?L47
	ld	X,@$XAP_AL
	ld	AH,@(H'0005,X)
	bsr	_getRfcommTask
	st	AH,@(H'0006,Y)
	cmp	AH,#H'0000
	beq	?L49
	ld	X,@(H'0004,Y)
	cmp	AH,@(0,X)
	beq	?L48
?L49:
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
	bsr	_sendRfcommConnectionCfm
	bra	(?L46)
?L48:
	ld	AH,@(H'0006,Y)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0001,X)
	ld	AH,@(H'0004,Y)
	add	AH,#H'0001
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(0,Y)
	ld	AL,#H'00FF
	bsr	_addRfcommConnection
	st	AH,@(H'0005,Y)
	add	AH,#H'000C
	ld	AL,#H'000F
	ld	X,@(H'0004,Y)
	add	X,#H'0007
	bc2
	ld	AL,#H'0001
	ld	X,@(H'0005,Y)
	st	AL,@(H'0008,X)
	ld	AH,@(H'0006,Y)
	st	AH,@(H'0007,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0005,Y)
	st	AL,@(H'000A,X)
?LBB34:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0007,Y)
	ld	X,@(H'0004,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'0004,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0007,Y)
	st	AL,@(H'0005,X)
	bsr	$_connectionGetCmTask
	st	AH,@H'fff8
	ld	AH,@(H'0007,Y)
	st	AH,@(0,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'000A,X)
	ld	AL,@(H'000B,X)
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@H'fff8
	ld	AL,#H'0040
;	bsr	$_MessageSendLater
	DC	((256*9)+9)
	ld	AH,@(H'0005,Y)
?LBE34:
	add	AH,#H'0001
	ld	X,@(H'0005,Y)
	ld	AL,@(H'000C,X)
	bsr	_startMuxSession
	bra	(?L46)
?L47:
?LBB35:
	ld	AH,#H'0016
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'0016
	ld	X,@(H'0004,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0008,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0003,Y)
	add	AL,#H'0001
	st	AL,@(H'0001,Y)
	ld	AL,#H'003C
	bsr	$_MessageSendConditionallyOnTask
?L46:
?LBE35:
?LBE33:
?LBE_connectionHandleRfcommConnectReq:
	leave	#10
;.stabn	192,0,0,?LBB33
;.stabn	192,0,0,?LBB34
;.stabn	224,0,0,?LBE34
;.stabn	192,0,0,?LBB35
;.stabn	224,0,0,?LBE35
;.stabn	224,0,0,?LBE33
;# begin scan referenced symbols
;# import _getRfcommConnection
;# import _endConnection
;# import _deleteRfcommConnection
;# import $_Panic
;# end scan referenced symbols
$_connectionHandleRfcommConnectTimeout:
	enter	#7
?LBB_connectionHandleRfcommConnectTimeout:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
?LBB36:
	add	AL,#H'0001
	st	AL,@(H'0005,Y)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(0,Y)
	ld	AH,@(H'0005,Y)
	ld	AL,#H'00FF
	bsr	_getRfcommConnection
	cmp	AH,#H'0000
	beq	?L54
	bsr	_endConnection
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0003
	bsr	_sendRfcommConnectionCfm
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0005,X)
	st	AL,@(0,Y)
	ld	AH,@(H'0005,Y)
	ld	AL,#H'00FF
	bsr	_deleteRfcommConnection
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	bra	(?L53)
?L54:
;	bsr	$_Panic
	DC	((256*14)+9)
?L53:
?LBE36:
?LBE_connectionHandleRfcommConnectTimeout:
	leave	#7
;.stabn	192,0,0,?LBB36
;.stabn	224,0,0,?LBE36
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import _sendEstablishRes
;# import _startControlPhase
;# end scan referenced symbols
$_connectionHandleRfcommConnectRes:
	enter	#4
?LBB_connectionHandleRfcommConnectRes:
	st	AH,@(H'0001,Y)
?LBB37:
	add	AH,#H'0002
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0006,X)
	st	AL,@(0,Y)
	ld	AL,#H'00FF
	bsr	_getRfcommConnection
	st	AH,@(H'0002,Y)
	cmp	AH,#H'0000
	beq	?L57
	add	AH,#H'000C
	ld	AL,#H'000F
	ld	X,@(H'0001,Y)
	add	X,#H'0007
	bc2
	ld	X,@(H'0001,Y)
	tst	@(H'0001,X)
	beq	?L58
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0008,X)
	cmp	AL,#H'0003
	bne	?L59
	ld	AH,@$XAP_UXL
	ld	AL,#H'0001
	bsr	_sendEstablishRes
	ld	AL,#H'0004
	ld	X,@(H'0002,Y)
	st	AL,@(H'0008,X)
	ld	AH,@$XAP_UXL
	bsr	_startControlPhase
	bra	(?L56)
?L59:
?LBB38:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0021
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0002,Y)
	cmp	AL,@(H'0009,X)
	beq	?L71
	bcc	?L61
?L71:
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0009,X)
	bra	(?L62)
?L61:
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0009,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
?L62:
	ld	X,@(H'0002,Y)
	tst	@(H'000B,X)
	beq	?L63
	ld	AL,#H'0001
	bra	(?L69)
?L63:
	ld	AL,#H'0000
?L69:
	ld	X,@H'fff8
	st	AL,@(H'0004,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE38:
	bra	(?L56)
?L58:
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0008,X)
	cmp	AL,#H'0003
	bne	?L66
	ld	AH,@$XAP_UXL
	ld	AL,#H'0000
	bsr	_sendEstablishRes
	bra	(?L56)
?L66:
	ld	AL,#H'0000
	ld	X,@(H'0002,Y)
	st	AL,@(H'0008,X)
	ld	AH,@$XAP_UXL
	bsr	_endConnection
	bra	(?L56)
?L57:
;	bsr	$_Panic
	DC	((256*14)+9)
?L56:
?LBE37:
?LBE_connectionHandleRfcommConnectRes:
	leave	#4
;.stabn	192,0,0,?LBB37
;.stabn	192,0,0,?LBB38
;.stabn	224,0,0,?LBE38
;.stabn	224,0,0,?LBE37
;# begin scan referenced symbols
;# import $_connectionGetInstanceByState
;# end scan referenced symbols
$_connectionHandleRfcommDisconnectReq:
	enter	#3
?LBB_connectionHandleRfcommDisconnectReq:
	st	AH,@(0,Y)
	ld	X,@$XAP_AH
?LBB39:
	tst	@(H'0001,X)
	bne	?L78
?LBB40:
	ld	AH,#H'0003
	bsr	$_connectionGetInstanceByState
	st	AH,@(H'0001,Y)
	cmp	AH,#H'0000
	beq	?L76
	ld	X,@$XAP_AH
	ld	AH,@(H'0006,X)
	bsr	_getRfcommTask
	ld	X,@(0,Y)
	cmp	AH,@(0,X)
	bne	?L76
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	bsr	_releaseServerChannelNoSink
	bra	(?L73)
?L76:
	ld	X,@(0,Y)
?L78:
	ld	AH,@(H'0001,X)
	bsr	_releaseServerChannel
?L73:
?LBE40:
?LBE39:
?LBE_connectionHandleRfcommDisconnectReq:
	leave	#3
;.stabn	192,0,0,?LBB40
;.stabn	224,0,0,?LBE40
;# begin scan referenced symbols
;# import _sendControlSignal
;# end scan referenced symbols
$_connectionHandleRfcommControlReq:
	enter	#2
?LBB_connectionHandleRfcommControlReq:
	ld	X,@$XAP_AH
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	bsr	_sendControlSignal
?LBE_connectionHandleRfcommControlReq:
	leave	#2
;# begin scan referenced symbols
;# import $_connectionConvertBdaddr
;# import _startParnegPhase
;# end scan referenced symbols
$_connectionHandleRfcommStartCfm:
	enter	#10
?LBB_connectionHandleRfcommStartCfm:
	st	AH,@(H'0007,Y)
	st	AL,@(H'0008,Y)
?LBB41:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	bsr	$_connectionConvertBdaddr
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	ld	AL,#H'00FF
	bsr	_getRfcommConnection
	cmp	AH,#H'0000
	beq	?L82
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0007,X)
	cmp	AL,#H'0001
	beq	?L84
	cmp	AL,#H'0001
	bcs	?L86
	cmp	AL,#H'0029
	beq	?L86
	bra	(?L87)
?L84:
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0005,X)
	bra	(?L81)
?L86:
	ld	AL,#H'0002
	ld	X,@$XAP_AH
	st	AL,@(H'0008,X)
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0005,X)
	bsr	_startParnegPhase
	bra	(?L90)
?L87:
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	X,#H'0000
	st	X,@(H'0001,Y)
	st	X,@(H'0002,Y)
	ld	X,@$XAP_AH
	ld	AH,@(H'0007,X)
	ld	AL,#H'0001
	bsr	_sendRfcommConnectionCfm
	bsr	$_connectionGetCmTask
	ld	AL,#H'0040
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	ld	AL,#H'00FF
	bsr	_deleteRfcommConnection
?L90:
	ld	AL,#H'0000
	ld	X,@(H'0007,Y)
	st	AL,@(H'0001,X)
	bra	(?L81)
?L82:
	ld	X,@(H'0008,Y)
	ld	AH,@(H'0006,X)
	bsr	_closeMuxSession
?L81:
?LBE41:
?LBE_connectionHandleRfcommStartCfm:
	leave	#10
;.stabn	192,0,0,?LBB41
;.stabn	224,0,0,?LBE41
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleRfcommStartInd:
	enter	#8
?LBB_connectionHandleRfcommStartInd:
	st	AH,@(H'0005,Y)
	ld	AL,@$XAP_AH
?LBB42:
	add	AL,#H'0002
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_connectionConvertBdaddr
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0006,X)
	bsr	_getRfcommConnection
	st	AH,@(H'0006,Y)
	cmp	AH,#H'0000
	bne	?L95
	ld	AL,#H'0021
?LBB43:
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0006,X)
	bsr	_addRfcommConnection
	ld	AL,#H'0001
	ld	X,@$XAP_AH
	st	AL,@(H'0008,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0007,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0008,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0009,X)
	ld	AL,#H'00FF
	st	AL,@(H'0006,X)
?L95:
?LBE43:
?LBB44:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0006
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	AL,#H'0001
	st	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0007,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0008,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
	ld	AL,#-H'0001
	st	AL,@(H'0005,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE44:
?LBE42:
?LBE_connectionHandleRfcommStartInd:
	leave	#8
;.stabn	192,0,0,?LBB42
;.stabn	192,0,0,?LBB43
;.stabn	224,0,0,?LBE43
;.stabn	192,0,0,?LBB44
;.stabn	224,0,0,?LBE44
;.stabn	224,0,0,?LBE42
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleRfcommStartCmpInd:
	enter	#3
?LBB_connectionHandleRfcommStartCmpInd:
	st	AH,@(H'0001,Y)
?LBB45:
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	cmp	AH,#H'0000
	beq	?L97
	ld	X,@(H'0001,Y)
	tst	@(H'0003,X)
	bne	?L98
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0009,X)
	ld	AL,#H'0002
	st	AL,@(H'0008,X)
	bra	(?L96)
?L98:
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	bsr	_deleteRfcommConnection
	bra	(?L96)
?L97:
;	bsr	$_Panic
	DC	((256*14)+9)
?L96:
?LBE45:
?LBE_connectionHandleRfcommStartCmpInd:
	leave	#3
;.stabn	192,0,0,?LBB45
;.stabn	224,0,0,?LBE45
;# begin scan referenced symbols
;# import _sendRfcommConnectionInd
;# end scan referenced symbols
$_connectionHandleRfcommParnegInd:
	enter	#11
?LBB_connectionHandleRfcommParnegInd:
	st	AH,@(H'0006,Y)
	ld	X,@$XAP_AH
?LBB46:
	ld	AH,@(H'0003,X)
	bsr	_getRfcommTask
	st	AH,@(H'0007,Y)
	cmp	AH,#H'0000
	bne	?L102
	ld	X,@(H'0006,Y)
?LBB47:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
;	bsr	$_StreamRfcommSink
	DC	((256*103)+9)
	cmp	AH,#H'0000
	beq	?L103
	bsr	_releaseServerChannel
	bra	(?L101)
?L103:
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	bsr	_releaseServerChannelNoSink
?LBE47:
	bra	(?L101)
?L102:
?LBB48:
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	st	AH,@(H'0008,Y)
	cmp	AH,#H'0000
	beq	?L106
	ld	X,@(H'0006,Y)
?LBB49:
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	st	AH,@(H'0009,Y)
	cmp	AH,#H'0000
	beq	?L107
	ld	X,@(H'0006,Y)
	ld	AH,@(H'0004,X)
	ld	X,@(H'0008,Y)
	cmp	AH,@(H'0009,X)
	beq	?L113
	bcc	?L108
?L113:
	ld	X,@(H'0009,Y)
	st	AH,@(H'0009,X)
?L108:
?LBB50:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0021
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0009,Y)
	ld	AL,@(H'0006,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0009,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0009,Y)
	ld	AL,@(H'0009,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(H'0009,Y)
	ld	AL,@(H'000B,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE50:
	bra	(?L101)
?L107:
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0008,Y)
	st	AL,@(H'0006,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0008,Y)
	cmp	AL,@(H'0009,X)
	beq	?L114
	bcc	?L110
?L114:
	st	AL,@(H'0009,X)
?L110:
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0008,Y)
	st	AL,@(H'000B,X)
	ld	AL,@(H'0007,Y)
	st	AL,@(H'0007,X)
	ld	AL,@$XAP_UXL
	add	AL,#H'0001
	bra	(?L112)
?L106:
	ld	AL,@(H'0006,Y)
?LBE49:
?LBB51:
	add	AL,#H'0007
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	ld	AL,@(H'0002,X)
	bsr	_addRfcommConnection
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0004,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0009,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0005,X)
	ld	X,@$XAP_AH
	st	AL,@(H'000B,X)
	ld	AL,@(H'0007,Y)
	st	AL,@(H'0007,X)
	ld	AL,#H'0001
	add	AL,@$XAP_AH
?L112:
	ld	AH,@(H'0006,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0009,X)
	st	AH,@(H'0001,Y)
	ld	AH,@(H'0007,Y)
	bsr	_sendRfcommConnectionInd
?L101:
?LBE51:
?LBE48:
?LBE46:
?LBE_connectionHandleRfcommParnegInd:
	leave	#11
;.stabn	192,0,0,?LBB46
;.stabn	192,0,0,?LBB47
;.stabn	224,0,0,?LBE47
;.stabn	192,0,0,?LBB48
;.stabn	192,0,0,?LBB49
;.stabn	192,0,0,?LBB50
;.stabn	224,0,0,?LBE50
;.stabn	224,0,0,?LBE49
;.stabn	192,0,0,?LBB51
;.stabn	224,0,0,?LBE51
;.stabn	224,0,0,?LBE48
;.stabn	224,0,0,?LBE46
;# begin scan referenced symbols
;# import _startEstablishPhase
;# end scan referenced symbols
$_connectionHandleRfcommParnegCfm:
	enter	#3
?LBB_connectionHandleRfcommParnegCfm:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AH
?LBB52:
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	cmp	AH,#H'0000
	beq	?L116
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0004,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0009,X)
	bsr	_startEstablishPhase
	bra	(?L115)
?L116:
;	bsr	$_Panic
	DC	((256*14)+9)
?L115:
?LBE52:
?LBE_connectionHandleRfcommParnegCfm:
	leave	#3
;.stabn	192,0,0,?LBB52
;.stabn	224,0,0,?LBE52
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleRfcommEstablishInd:
	enter	#10
?LBB_connectionHandleRfcommEstablishInd:
	st	AH,@(H'0006,Y)
	ld	X,@$XAP_AH
?LBB53:
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	st	AH,@(H'0007,Y)
	cmp	AH,#H'0000
	beq	?L119
	ld	AL,#H'0001
	bsr	_sendEstablishRes
	ld	AL,#H'0004
	ld	X,@(H'0007,Y)
	st	AL,@(H'0008,X)
	ld	AH,@$XAP_UXL
	bsr	_startControlPhase
	bra	(?L118)
?L119:
	ld	X,@(H'0006,Y)
?LBB54:
	ld	AH,@(H'0003,X)
	bsr	_getRfcommTask
	st	AH,@(H'0008,Y)
	ld	AL,@(H'0006,Y)
	add	AL,#H'0004
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	ld	AL,@(H'0002,X)
	bsr	_addRfcommConnection
	ld	X,@$XAP_AH
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0007,X)
	ld	AL,#H'0003
	st	AL,@(H'0008,X)
	ld	X,@(H'0006,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	ld	AH,@(H'0008,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	_sendRfcommConnectionInd
?L118:
?LBE54:
?LBE53:
?LBE_connectionHandleRfcommEstablishInd:
	leave	#10
;.stabn	192,0,0,?LBB53
;.stabn	192,0,0,?LBB54
;.stabn	224,0,0,?LBE54
;.stabn	224,0,0,?LBE53
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleRfcommEstablishCfm:
	enter	#6
?LBB_connectionHandleRfcommEstablishCfm:
	st	AH,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB55:
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	st	AH,@(H'0004,Y)
	cmp	AH,#H'0000
	beq	?L121
	ld	X,@(H'0003,Y)
	tst	@(H'0004,X)
	bne	?L123
	ld	AL,#H'0004
	ld	X,@$XAP_AH
	st	AL,@(H'0008,X)
	bsr	_startControlPhase
	bra	(?L121)
?L123:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	cmp	AL,#H'0015
	bne	?L125
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0007,X)
	ld	AL,#H'0007
	bra	(?L129)
?L125:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	cmp	AL,#H'0011
	bne	?L127
	ld	AH,@(H'0004,Y)
	bsr	_endConnection
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0007,X)
	ld	AL,#H'0004
	bra	(?L129)
?L127:
	ld	AH,@(H'0004,Y)
	bsr	_endConnection
	ld	AL,#H'0021
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0007,X)
	ld	AL,#H'0001
?L129:
	bsr	_sendRfcommConnectionCfm
	bsr	$_connectionGetCmTask
	ld	AL,#H'0040
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_deleteRfcommConnection
?L121:
?LBE55:
?LBE_connectionHandleRfcommEstablishCfm:
	leave	#6
;.stabn	192,0,0,?LBB55
;.stabn	224,0,0,?LBE55
;# begin scan referenced symbols
;# import $_SinkGetBdAddr
;# import $_MessageSinkTask
;# import $_connectionLinkPolicyUpdate
;# import _sendRfcommControlInd
;# end scan referenced symbols
$_connectionHandleRfcommControlInd:
	enter	#12
?LBB_connectionHandleRfcommControlInd:
	st	AH,@(H'0007,Y)
	ld	X,@$XAP_AH
?LBB56:
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	st	AH,@(H'0008,Y)
	cmp	AH,#H'0000
	beq	?L133
	ld	X,@(H'0007,Y)
?LBB57:
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
;	bsr	$_StreamRfcommSink
	DC	((256*103)+9)
	st	AH,@(H'0009,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0003
;	bsr	$_SinkGetBdAddr
	DC	((256*84)+9)
	bsr	$_connectionGetCmTask
	ld	AL,#H'0040
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0009,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0009,Y)
	st	AL,@(H'0002,Y)
	ld	AH,@(H'0007,X)
	ld	AL,#H'0000
	bsr	_sendRfcommConnectionCfm
	ld	AH,@(H'0009,Y)
	ld	X,@(H'0008,Y)
	ld	AL,@(H'0007,X)
;	bsr	$_MessageSinkTask
	DC	((256*85)+9)
	ld	AH,@(H'0009,Y)
	bsr	$_connectionLinkPolicyUpdate
	ld	X,@(H'0007,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_deleteRfcommConnection
?LBE57:
	bra	(?L132)
?L133:
	ld	X,@(H'0007,Y)
?LBB58:
	ld	AH,@(H'0003,X)
	bsr	_getRfcommTask
	st	AH,@(H'000A,Y)
	cmp	AH,#H'0000
	beq	?L132
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
;	bsr	$_StreamRfcommSink
	DC	((256*103)+9)
	ld	AL,@$XAP_AH
	ld	X,@(H'0007,Y)
	ld	AH,@(H'0005,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0004,X)
	st	AH,@(H'0001,Y)
	ld	AH,@(H'000A,Y)
	bsr	_sendRfcommControlInd
?L132:
?LBE58:
?LBE56:
?LBE_connectionHandleRfcommControlInd:
	leave	#12
;.stabn	192,0,0,?LBB56
;.stabn	192,0,0,?LBB57
;.stabn	224,0,0,?LBE57
;.stabn	192,0,0,?LBB58
;.stabn	224,0,0,?LBE58
;.stabn	224,0,0,?LBE56
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleRfcommCloseInd:
	enter	#1
?LBB_connectionHandleRfcommCloseInd:
?LBE_connectionHandleRfcommCloseInd:
	leave	#1
;# begin scan referenced symbols
;# import _sendRfcommDisconnectInd
;# end scan referenced symbols
$_connectionHandleRfcommReleaseInd:
	enter	#7
?LBB_connectionHandleRfcommReleaseInd:
	st	AH,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB59:
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_getRfcommConnection
	st	AH,@(H'0004,Y)
	cmp	AH,#H'0000
	beq	?L139
	ld	X,@$XAP_AH
	tst	@(H'0007,X)
	beq	?L138
	bsr	$_connectionGetCmTask
	ld	AL,#H'0040
;	bsr	$_MessageCancelFirst
	DC	((256*10)+9)
	ld	X,@(H'0004,Y)
	tst	@(H'0008,X)
	beq	?L141
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	cmp	AL,#H'0011
	bne	?L142
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0007,X)
	ld	AL,#H'0004
	bra	(?L150)
?L142:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@(H'0004,Y)
	ld	AH,@(H'0007,X)
	ld	AL,#H'0001
?L150:
	bsr	_sendRfcommConnectionCfm
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0005,X)
	cmp	AL,#H'0001
	bne	?L141
	tst	@(H'0004,X)
	beq	?L146
	ld	AL,@(H'0004,X)
	cmp	AL,#H'0011
	bne	?L141
?L146:
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	bsr	_closeMuxSession
?L141:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	bsr	_deleteRfcommConnection
	bra	(?L138)
?L139:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0005,X)
	cmp	AL,#H'0001
	bne	?L148
	tst	@(H'0004,X)
	bne	?L148
	ld	AH,@(H'0002,X)
	bsr	_closeMuxSession
?L148:
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0003,X)
	bsr	_getRfcommTask
	st	AH,@(H'0005,Y)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
;	bsr	$_StreamRfcommSink
	DC	((256*103)+9)
	st	AH,@(0,Y)
	ld	AH,@(H'0005,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	bsr	_sendRfcommDisconnectInd
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
;	bsr	$_StreamRfcommSink
	DC	((256*103)+9)
	bsr	$_connectionLinkPolicyUpdate
?L138:
?LBE59:
?LBE_connectionHandleRfcommReleaseInd:
	leave	#7
;.stabn	192,0,0,?LBB59
;.stabn	224,0,0,?LBE59
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionHandleRfcommPortNegInd:
	enter	#2
?LBB_connectionHandleRfcommPortNegInd:
	st	AH,@(0,Y)
?LBB60:
	ld	AH,#H'000C
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(-1,Y)
	ld	AL,#H'0025
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(0,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	add	AH,#H'0003
	ld	AL,#H'0009
	ld	X,@(0,Y)
	add	X,#H'0005
	bc2
	ld	AH,@(-1,Y)
;	bsr	$_VmSendRfcommPrim
	DC	((256*102)+9)
?LBE60:
?LBE_connectionHandleRfcommPortNegInd:
	leave	#2
;.stabn	192,0,0,?LBB60
;.stabn	224,0,0,?LBE60
	ENDMOD

;# Function pattern *movqi2 used[0] = 376 used[1] = 23 total = 399
;# Function pattern *movqi3 used[0] = 493 total = 493
;# Function pattern *movhi used[2] = 1 used[3] = 1 total = 2
;# Function pattern *addqi0 used[0] = 16 total = 16
;# Function pattern *addqi2 used[0] = 18 used[2] = 1 total = 19
;# Function pattern jump used[0] = 32 total = 32
;# Function pattern *call1 used[0] = 70 total = 70
;# Function pattern *call_value1 used[0] = 83 total = 83
;# Function pattern tablejump_1 used[0] = 1 total = 1
;# Function pattern *movstrqi2 used[0] = 6 total = 6
;# Function pattern movstrqi+3 used[0] = 24 used[1] = 14 total = 38
;# Function pattern movstrqi+4 used[1] = 1 used[2] = 3 total = 4
;# Function pattern movstrqi+5 used[0] = 13 total = 13
	MODULE	sdp_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
_sendSdpCloseSearchCfm:
	enter	#4
?LBB_sendSdpCloseSearchCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	cmp	AH,#H'0000
	beq	?L1
?LBB3:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'701C
	bsr	$_MessageSend
?L1:
?LBE3:
?LBE2:
?LBE_sendSdpCloseSearchCfm:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# import $_BdaddrIsZero
;# import $_BdaddrIsSame
;# end scan referenced symbols
_sendSearchRequest:
	enter	#3
?LBB_sendSearchRequest:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	tst	@(0,X)
	beq	?L4
	add	AH,#H'0002
	bsr	$_BdaddrIsZero
	cmp	AH,#H'0000
	beq	?L5
	ld	AH,#H'0001
	bra	(?L3)
?L5:
	ld	X,@(0,Y)
	tst	@(H'0001,X)
	bne	?L14
	ld	AH,@(0,Y)
	add	AH,#H'0002
	ld	AL,@(H'0001,Y)
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	bne	?L12
	ld	AH,#H'0003
	bra	(?L3)
?L4:
	ld	X,@(0,Y)
	tst	@(H'0001,X)
	beq	?L12
?L14:
	ld	AH,#H'0002
	bra	(?L3)
?L12:
	ld	AH,#H'0000
?L3:
?LBE_sendSearchRequest:
	leave	#3
;# begin scan referenced symbols
;# import $_VmGetHandleFromPointer
;# import $_VmSendSdpPrim
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import $_connectionGetCmTask
;# import $_MessageSendConditionallyOnTask
;# end scan referenced symbols
$_connectionHandleSdpRegisterRequest:
	enter	#7
?LBB_connectionHandleSdpRegisterRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB4:
	tst	@(0,X)
	bne	?L16
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
?LBB5:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'000E
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0002,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0004,Y)
	st	AH,@(H'0002,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
?LBE5:
	bra	(?L15)
?L16:
?LBB6:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'0003
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0029
	bsr	$_MessageSendConditionallyOnTask
?L15:
?LBE6:
?LBE4:
?LBE_connectionHandleSdpRegisterRequest:
	leave	#7
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSdpRegisterCfm:
	enter	#4
?LBB_connectionHandleSdpRegisterCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB7:
	tst	@(0,X)
	beq	?L18
?LBB8:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0004,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'7019
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?L18:
?LBE8:
?LBE7:
?LBE_connectionHandleSdpRegisterCfm:
	leave	#4
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionHandleSdpUnregisterRequest:
	enter	#6
?LBB_connectionHandleSdpUnregisterRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB9:
	tst	@(0,X)
	bne	?L21
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
?LBB10:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	AL,#H'0010
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	ld	X,@H'fff8
	st	AH,@(H'0002,X)
	st	AL,@(H'0003,X)
	ld	AH,@H'fff8
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
?LBE10:
	bra	(?L20)
?L21:
?LBB11:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0003
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'002A
	bsr	$_MessageSendConditionallyOnTask
?L20:
?LBE11:
?LBE9:
?LBE_connectionHandleSdpUnregisterRequest:
	leave	#6
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSdpUnregisterCfm:
	enter	#4
?LBB_connectionHandleSdpUnregisterCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB12:
	tst	@(0,X)
	beq	?L23
?LBB13:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@H'fff8
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0004,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(0,Y)
	ld	AL,@H'ffff
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'701A
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
?L23:
?LBE13:
?LBE12:
?LBE_connectionHandleSdpUnregisterCfm:
	leave	#4
;.stabn	192,0,0,?LBB13
;.stabn	224,0,0,?LBE13
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSdpServerConfigMtu:
	enter	#6
?LBB_connectionHandleSdpServerConfigMtu:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB14:
	tst	@(0,X)
	bne	?L26
?LBB15:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'0012
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
?LBE15:
	bra	(?L25)
?L26:
?LBB16:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'002B
	bsr	$_MessageSendConditionallyOnTask
?L25:
?LBE16:
?LBE14:
?LBE_connectionHandleSdpServerConfigMtu:
	leave	#6
;.stabn	192,0,0,?LBB15
;.stabn	224,0,0,?LBE15
;.stabn	192,0,0,?LBB16
;.stabn	224,0,0,?LBE16
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSdpClientConfigMtu:
	enter	#6
?LBB_connectionHandleSdpClientConfigMtu:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB17:
	tst	@(0,X)
	bne	?L29
?LBB18:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,#H'000B
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
?LBE18:
	bra	(?L28)
?L29:
?LBB19:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'002C
	bsr	$_MessageSendConditionallyOnTask
?L28:
?LBE19:
?LBE17:
?LBE_connectionHandleSdpClientConfigMtu:
	leave	#6
;.stabn	192,0,0,?LBB18
;.stabn	224,0,0,?LBE18
;.stabn	192,0,0,?LBB19
;.stabn	224,0,0,?LBE19
;# begin scan referenced symbols
;# import $_connectionConvertBdaddr_t
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionHandleSdpOpenSearchRequest:
	enter	#7
?LBB_connectionHandleSdpOpenSearchRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AH
?LBB20:
	tst	@(0,X)
	bne	?L32
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0004,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0005,X)
?LBB21:
	ld	AH,#H'0006
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,#H'0008
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	add	AH,#H'0002
	ld	AL,@(H'0003,Y)
	add	AL,#H'0001
	bsr	$_connectionConvertBdaddr_t
	ld	AH,@(H'0004,Y)
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
?LBE21:
	bra	(?L31)
?L32:
?LBB22:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0005,Y)
	ld	AL,#H'0005
	ld	X,@(H'0003,Y)
	bc2
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0002,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'002D
	bsr	$_MessageSendConditionallyOnTask
?L31:
?LBE22:
?LBE20:
?LBE_connectionHandleSdpOpenSearchRequest:
	leave	#7
;.stabn	192,0,0,?LBB21
;.stabn	224,0,0,?LBE21
;.stabn	192,0,0,?LBB22
;.stabn	224,0,0,?LBE22
;# begin scan referenced symbols
;# import $_connectionConvertSdpOpenStatus
;# import $_BdaddrSetZero
;# end scan referenced symbols
$_connectionHandleSdpOpenSearchCfm:
	enter	#5
?LBB_connectionHandleSdpOpenSearchCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB23:
	tst	@(0,X)
	beq	?L35
?LBB24:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0002,X)
	bsr	$_connectionConvertSdpOpenStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	st	X,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'701B
	bsr	$_MessageSend
?L35:
	ld	X,@(H'0002,Y)
?LBE24:
	tst	@(H'0002,X)
	beq	?L34
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	bsr	$_BdaddrSetZero
?L34:
?LBE23:
?LBE_connectionHandleSdpOpenSearchCfm:
	leave	#5
;.stabn	192,0,0,?LBB24
;.stabn	224,0,0,?LBE24
;# begin scan referenced symbols
;# import _sendSdpCloseSearchCfm
;# end scan referenced symbols
$_connectionHandleSdpCloseSearchRequest:
	enter	#3
?LBB_connectionHandleSdpCloseSearchRequest:
	st	AH,@(0,Y)
	st	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
?LBB25:
	tst	@(0,X)
	beq	?L38
	add	AH,#H'0002
	bsr	$_BdaddrIsZero
	cmp	AH,#H'0000
	bne	?L38
	ld	X,@(0,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0001,Y)
	cmp	AL,@(0,X)
	bne	?L40
?LBB26:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'000A
	st	AL,@(0,X)
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
?LBE26:
	bra	(?L37)
?L40:
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0003
	bra	(?L44)
?L38:
	ld	X,@(H'0001,Y)
	ld	AH,@(0,X)
	ld	AL,#H'0002
?L44:
	bsr	_sendSdpCloseSearchCfm
?L37:
?LBE25:
?LBE_connectionHandleSdpCloseSearchRequest:
	leave	#3
;.stabn	192,0,0,?LBB26
;.stabn	224,0,0,?LBE26
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSdpCloseSearchInd:
	enter	#2
?LBB_connectionHandleSdpCloseSearchInd:
	st	AH,@(0,Y)
	ld	X,@$XAP_AH
	ld	AH,@(0,X)
	ld	X,@$XAP_AL
	ld	AL,@(H'0002,X)
	bsr	_sendSdpCloseSearchCfm
	ld	AL,#H'0000
	ld	X,@(0,Y)
	st	AL,@(0,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	bsr	$_BdaddrSetZero
?LBE_connectionHandleSdpCloseSearchInd:
	leave	#2
;# begin scan referenced symbols
;# import _sendSearchRequest
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import $_Panic
;# end scan referenced symbols
$_connectionHandleSdpServiceSearchRequest:
	enter	#10
?LBB_connectionHandleSdpServiceSearchRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
?LBB27:
	add	AL,#H'0001
	st	AL,@(H'0005,Y)
	bsr	_sendSearchRequest
	st	AH,@(H'0004,Y)
	cmp	AH,#H'0000
	bne	?L48
?LBB28:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	AL,#H'0001
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	add	AH,#H'0002
	ld	AL,@(H'0005,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0006,X)
	ld	X,@(H'0003,Y)
	tst	@(H'0005,X)
	beq	?L49
	ld	AH,@(H'0006,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0006,Y)
	st	AH,@(H'0007,X)
	bra	(?L50)
?L49:
	ld	AL,#H'0000
	ld	X,@(H'0006,Y)
	st	AL,@(H'0007,X)
?L50:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0008,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0001,X)
?LBE28:
	bra	(?L47)
?L48:
?LBB29:
	ld	AL,#H'0000
	st	AL,@(H'0007,Y)
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'0008
	ld	X,@(H'0003,Y)
	bc2
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0001
	beq	?L59
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L54
	ld	X,@(H'0002,Y)
	add	X,#H'0001
	bra	(?L58)
?L54:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0003
	bne	?L56
?L59:
	ld	X,@(H'0002,Y)
?L58:
	st	X,@(H'0007,Y)
	bra	(?L53)
?L56:
;	bsr	$_Panic
	DC	((256*14)+9)
?L53:
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0008,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0007,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'002F
	bsr	$_MessageSendConditionallyOnTask
?L47:
?LBE29:
?LBE27:
?LBE_connectionHandleSdpServiceSearchRequest:
	leave	#10
;.stabn	192,0,0,?LBB27
;.stabn	192,0,0,?LBB28
;.stabn	224,0,0,?LBE28
;.stabn	192,0,0,?LBB29
;.stabn	224,0,0,?LBE29
;.stabn	224,0,0,?LBE27
;# begin scan referenced symbols
;# import $_connectionConvertSdpSearchStatus
;# import $_connectionConvertBdaddr
;# import $_VmGetPointerFromHandle
;# import $_memcpy
;# import $_free
;# end scan referenced symbols
$_connectionHandleSdpServiceSearchCfm:
	enter	#6
?LBB_connectionHandleSdpServiceSearchCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB30:
	tst	@(H'0001,X)
	beq	?L64
	ld	X,@$XAP_AL
?LBB31:
	ld	AH,@(H'0003,X)
	add	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0005,X)
	bsr	$_connectionConvertSdpSearchStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0003
	ld	AL,@(H'0002,Y)
	add	AL,#H'0009
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0007,X)
	ld	X,@(H'0002,Y)
	tst	@(H'0003,X)
	beq	?L65
?LBB32:
	ld	AH,@(H'0004,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0004,Y)
	ld	AH,@(H'0003,Y)
	add	AH,#H'0008
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0004,Y)
	bsr	$_memcpy
	ld	AH,@(H'0004,Y)
;	bsr	$_free
	DC	((256*4)+9)
?LBE32:
	bra	(?L66)
?L65:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0008,X)
?L66:
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'701D
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0001,X)
?LBE31:
	bra	(?L63)
?L64:
	ld	X,@(H'0002,Y)
	tst	@(H'0003,X)
	beq	?L63
?LBB33:
	ld	AH,@(H'0004,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
;	bsr	$_free
	DC	((256*4)+9)
?L63:
?LBE33:
?LBE30:
?LBE_connectionHandleSdpServiceSearchCfm:
	leave	#6
;.stabn	192,0,0,?LBB31
;.stabn	192,0,0,?LBB32
;.stabn	224,0,0,?LBE32
;.stabn	224,0,0,?LBE31
;.stabn	192,0,0,?LBB33
;.stabn	224,0,0,?LBE33
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionHandleSdpAttributeSearchRequest:
	enter	#10
?LBB_connectionHandleSdpAttributeSearchRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	AH,@$XAP_AL
?LBB34:
	add	AH,#H'0001
	st	AH,@(H'0005,Y)
	ld	AH,@(H'0002,Y)
	ld	AL,@(H'0005,Y)
	bsr	_sendSearchRequest
	st	AH,@(H'0004,Y)
	cmp	AH,#H'0000
	bne	?L70
?LBB35:
	ld	AH,#H'000B
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	AL,#H'0003
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AH,@(H'0004,Y)
	st	AH,@(H'0001,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	ld	AL,@(H'0005,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0003,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0006,Y)
	st	AH,@(H'0006,X)
	st	AL,@(H'0007,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0008,X)
	ld	X,@(H'0003,Y)
	tst	@(H'0007,X)
	beq	?L71
	ld	AH,@(H'0008,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0006,Y)
	st	AH,@(H'0009,X)
	bra	(?L72)
?L71:
	ld	AL,#H'0000
	ld	X,@(H'0006,Y)
	st	AL,@(H'0009,X)
?L72:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0009,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'000A,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0001,X)
?LBE35:
	bra	(?L69)
?L70:
?LBB36:
	ld	AH,#H'0000
	st	AH,@(H'0007,Y)
	ld	AH,#H'000A
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'000A
	ld	X,@(H'0003,Y)
	bc2
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0001
	bne	?L74
	ld	X,@(H'0002,Y)
	st	X,@(H'0007,Y)
	bra	(?L75)
?L74:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0002
	bne	?L76
	ld	AL,@(H'0002,Y)
	add	AL,#H'0001
	bra	(?L80)
?L76:
	ld	AH,@(H'0004,Y)
	cmp	AH,#H'0003
	bne	?L78
	ld	AL,@(H'0002,Y)
?L80:
	st	AL,@(H'0007,Y)
	bra	(?L75)
?L78:
;	bsr	$_Panic
	DC	((256*14)+9)
?L75:
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0008,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0007,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0030
	bsr	$_MessageSendConditionallyOnTask
?L69:
?LBE36:
?LBE34:
?LBE_connectionHandleSdpAttributeSearchRequest:
	leave	#10
;.stabn	192,0,0,?LBB34
;.stabn	192,0,0,?LBB35
;.stabn	224,0,0,?LBE35
;.stabn	192,0,0,?LBB36
;.stabn	224,0,0,?LBE36
;.stabn	224,0,0,?LBE34
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSdpAttributeSearchCfm:
	enter	#6
?LBB_connectionHandleSdpAttributeSearchCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB37:
	tst	@(H'0001,X)
	beq	?L85
	ld	X,@$XAP_AL
?LBB38:
	ld	AH,@(H'0002,X)
	add	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0004,X)
	bsr	$_connectionConvertSdpSearchStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0002
	ld	AL,@(H'0002,Y)
	add	AL,#H'0008
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0006,X)
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	beq	?L86
?LBB39:
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0004,Y)
	ld	AH,@(H'0003,Y)
	add	AH,#H'0007
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0004,Y)
	bsr	$_memcpy
	ld	AH,@(H'0004,Y)
;	bsr	$_free
	DC	((256*4)+9)
?LBE39:
	bra	(?L87)
?L86:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0007,X)
?L87:
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'701E
	bsr	$_MessageSend
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0001,X)
?LBE38:
	bra	(?L84)
?L85:
	ld	X,@(H'0002,Y)
	tst	@(H'0002,X)
	beq	?L84
?LBB40:
	ld	AH,@(H'0003,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
;	bsr	$_free
	DC	((256*4)+9)
?L84:
?LBE40:
?LBE37:
?LBE_connectionHandleSdpAttributeSearchCfm:
	leave	#6
;.stabn	192,0,0,?LBB38
;.stabn	192,0,0,?LBB39
;.stabn	224,0,0,?LBE39
;.stabn	224,0,0,?LBE38
;.stabn	192,0,0,?LBB40
;.stabn	224,0,0,?LBE40
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionHandleSdpServiceSearchAttrRequest:
	enter	#10
?LBB_connectionHandleSdpServiceSearchAttrRequest:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
?LBB41:
	add	AL,#H'0001
	st	AL,@(H'0005,Y)
	bsr	_sendSearchRequest
	st	AH,@(H'0004,Y)
	cmp	AH,#H'0000
	bne	?L91
?LBB42:
	ld	AH,#H'000B
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0006,Y)
	ld	AL,#H'0005
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	add	AH,#H'0002
	ld	AL,@(H'0005,Y)
	bsr	$_connectionConvertBdaddr_t
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0006,X)
	ld	X,@(H'0003,Y)
	tst	@(H'0006,X)
	beq	?L92
	ld	AH,@(H'0007,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0006,Y)
	st	AH,@(H'0007,X)
	bra	(?L93)
?L92:
	ld	AL,#H'0000
	ld	X,@(H'0006,Y)
	st	AL,@(H'0007,X)
?L93:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0008,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'0008,X)
	ld	X,@(H'0003,Y)
	tst	@(H'0008,X)
	beq	?L94
	ld	AH,@(H'0009,X)
;	bsr	$_VmGetHandleFromPointer
	DC	((256*109)+9)
	ld	X,@(H'0006,Y)
	st	AH,@(H'0009,X)
	bra	(?L95)
?L94:
	ld	AL,#H'0000
	ld	X,@(H'0006,Y)
	st	AL,@(H'0009,X)
?L95:
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0006,Y)
	st	AL,@(H'000A,X)
	ld	AH,@$XAP_UXL
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0002,Y)
	st	AL,@(H'0001,X)
?LBE42:
	bra	(?L90)
?L91:
?LBB43:
	ld	AL,#H'0000
	st	AL,@(H'0007,Y)
	ld	AH,#H'000A
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0008,Y)
	ld	AL,#H'000A
	ld	X,@(H'0003,Y)
	bc2
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0001
	beq	?L104
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0002
	bne	?L99
	ld	X,@(H'0002,Y)
	add	X,#H'0001
	bra	(?L103)
?L99:
	ld	AL,@(H'0004,Y)
	cmp	AL,#H'0003
	bne	?L101
?L104:
	ld	X,@(H'0002,Y)
?L103:
	st	X,@(H'0007,Y)
	bra	(?L98)
?L101:
;	bsr	$_Panic
	DC	((256*14)+9)
?L98:
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0008,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0007,Y)
	st	X,@(H'0001,Y)
	ld	AL,#H'0031
	bsr	$_MessageSendConditionallyOnTask
?L90:
?LBE43:
?LBE41:
?LBE_connectionHandleSdpServiceSearchAttrRequest:
	leave	#10
;.stabn	192,0,0,?LBB41
;.stabn	192,0,0,?LBB42
;.stabn	224,0,0,?LBE42
;.stabn	192,0,0,?LBB43
;.stabn	224,0,0,?LBE43
;.stabn	224,0,0,?LBE41
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSdpServiceSearchAttributeCfm:
	enter	#6
?LBB_connectionHandleSdpServiceSearchAttributeCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
?LBB44:
	tst	@(H'0001,X)
	beq	?L109
	ld	X,@$XAP_AL
?LBB45:
	ld	AH,@(H'0003,X)
	add	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0006,X)
	bsr	$_connectionConvertSdpSearchStatus
	ld	X,@(H'0003,Y)
	st	AH,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0007,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	AH,@$XAP_UXL
	add	AH,#H'0003
	ld	AL,@(H'0002,Y)
	add	AL,#H'000A
	bsr	$_connectionConvertBdaddr
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0007,X)
	ld	X,@(H'0002,Y)
	tst	@(H'0003,X)
	beq	?L110
?LBB46:
	ld	AH,@(H'0004,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
	st	AH,@(H'0004,Y)
	ld	AH,@(H'0003,Y)
	add	AH,#H'0008
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0004,Y)
	bsr	$_memcpy
	ld	AH,@(H'0004,Y)
;	bsr	$_free
	DC	((256*4)+9)
?LBE46:
	bra	(?L111)
?L110:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0008,X)
?L111:
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'701F
	bsr	$_MessageSend
	ld	X,@(H'0002,Y)
	tst	@(H'0005,X)
	bne	?L108
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0001,X)
?LBE45:
	bra	(?L108)
?L109:
	ld	X,@(H'0002,Y)
	tst	@(H'0003,X)
	beq	?L108
?LBB47:
	ld	AH,@(H'0004,X)
;	bsr	$_VmGetPointerFromHandle
	DC	((256*110)+9)
;	bsr	$_free
	DC	((256*4)+9)
?L108:
?LBE47:
?LBE44:
?LBE_connectionHandleSdpServiceSearchAttributeCfm:
	leave	#6
;.stabn	192,0,0,?LBB45
;.stabn	192,0,0,?LBB46
;.stabn	224,0,0,?LBE46
;.stabn	224,0,0,?LBE45
;.stabn	192,0,0,?LBB47
;.stabn	224,0,0,?LBE47
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionHandleSdpTerminatePrimitiveRequest:
	enter	#1
?LBB_connectionHandleSdpTerminatePrimitiveRequest:
	ld	X,@$XAP_AH
?LBB48:
	tst	@(H'0001,X)
	beq	?L115
	ld	X,@$XAP_AL
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	cmp	AL,@(H'0001,X)
	bne	?L115
?LBB49:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,#H'0007
	st	AL,@(0,X)
	ld	AL,#H'0000
	st	AL,@(H'0001,X)
;	bsr	$_VmSendSdpPrim
	DC	((256*108)+9)
?L115:
?LBE49:
?LBE48:
?LBE_connectionHandleSdpTerminatePrimitiveRequest:
	leave	#1
;.stabn	192,0,0,?LBB49
;.stabn	224,0,0,?LBE49
	ENDMOD

;# Function pattern *movqi2 used[0] = 222 used[1] = 24 used[3] = 2 total = 248
;# Function pattern *movqi3 used[0] = 303 total = 303
;# Function pattern *movhi used[2] = 4 used[3] = 4 total = 8
;# Function pattern *addqi2 used[0] = 28 total = 28
;# Function pattern jump used[0] = 30 total = 30
;# Function pattern *call1 used[0] = 45 total = 45
;# Function pattern *call_value1 used[0] = 57 total = 57
;# Function pattern *movstrqi2 used[0] = 6 total = 6
;# Function pattern movstrqi+3 used[0] = 7 used[1] = 28 total = 35
;# Function pattern movstrqi+5 used[0] = 11 total = 11
	MODULE	connection_manager
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.SEG	VAR
_conn_list_head:
	DS	1
_map?:
	DS	1
_mapSize:
	DS	1
;# begin scan referenced symbols
;# import $_BdaddrIsSame
;# import $_BdaddrIsZero
;# end scan referenced symbols
	.CODE
_id_match:
	enter	#3
?LBB_id_match:
	st	AH,@(0,Y)
?LBB2:
	ld	AH,#H'0000
	st	AH,@(H'0001,Y)
	tst	@(0,Y)
	beq	?L2
	ld	X,@(0,Y)
	ld	AH,@(0,X)
	cmp	AH,@$XAP_AL
	bne	?L2
	cmp	AH,#H'0001
	beq	?L5
	cmp	AH,#H'0001
	bcs	?L16
	cmp	AH,#H'0002
	beq	?L24
	cmp	AH,#H'0003
	beq	?L24
	bra	(?L2)
?L5:
	ld	AL,@(H'0008,Y)
	cmp	AL,#H'0021
	bne	?L6
	ld	AH,@(0,Y)
	add	AH,#H'0001
	ld	AL,@$XAP_UY
	add	AL,#H'0003
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	bne	?L8
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	cmp	AL,@(H'0007,Y)
	bne	?L7
?L8:
	ld	AH,#H'0001
	st	AH,@(H'0001,Y)
?L7:
	ld	AH,@$XAP_UY
	add	AH,#H'0003
	bsr	$_BdaddrIsZero
	cmp	AH,#H'0000
	beq	?L2
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	cmp	AL,@(H'0007,Y)
	bne	?L2
	ld	AL,@(H'0006,X)
	cmp	AL,#H'00FF
	bne	?L2
	bra	(?L28)
?L6:
	ld	AL,@(H'0007,Y)
	cmp	AL,#H'00FF
	bne	?L12
	ld	AH,@(0,Y)
	add	AH,#H'0001
	ld	AL,@$XAP_UY
	add	AL,#H'0003
	bsr	$_BdaddrIsSame
	cmp	AH,#H'0000
	beq	?L2
	ld	X,@(0,Y)
	bra	(?L30)
?L12:
	ld	X,@(0,Y)
	ld	AL,@(H'0005,X)
	cmp	AL,@(H'0007,Y)
	bne	?L2
?L30:
	ld	AL,@(H'0006,X)
	cmp	AL,@(H'0008,Y)
	bne	?L2
	bra	(?L28)
?L16:
	ld	X,@(0,Y)
	ld	AL,@(H'0002,X)
	cmp	AL,@(H'0004,Y)
	bne	?L17
	cmp	AL,#H'0000
	bne	?L28
?L17:
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	cmp	AL,@(H'0003,Y)
	bne	?L19
	tst	@(H'0003,Y)
	beq	?L19
	tst	@(H'0004,Y)
	beq	?L19
	tst	@(H'0002,X)
	bne	?L19
	ld	AH,#H'0000
	bra	(?L29)
?L19:
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	cmp	AL,@(H'0003,Y)
	bne	?L2
	tst	@(H'0003,Y)
	beq	?L2
	tst	@(H'0002,X)
	bne	?L2
	bra	(?L28)
?L24:
	ld	X,@(0,Y)
	ld	AL,@(H'0001,X)
	cmp	AL,@(H'0003,Y)
	bne	?L2
?L28:
	ld	AH,#H'0001
?L29:
	st	AH,@(H'0001,Y)
?L2:
?LBE2:
	ld	AH,@(H'0001,Y)
?LBE_id_match:
	leave	#3
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
;# begin scan referenced symbols
;# import _mapSize
;#(clobber:QI (reg:QI 0 AH))
;# import $_malloc
;# import $_PanicNull
;# import _map?
;#(clobber:QI (reg:QI 0 AH))
;#(clobber:QI (reg:QI 0 AH))
;# import $_memcpy
;#(clobber:QI (reg:QI 0 AH))
;# import $_free
;# end scan referenced symbols
_deleteElement:
	enter	#5
?LBB_deleteElement:
	st	AH,@(H'0001,Y)
?LBB3:
	ld	AL,@_mapSize
	add	AL,#-H'0001
	st	AL,@_mapSize
	smult	#H'0003
	ld	AH,@$XAP_AL
;	bsr	$_malloc
	DC	((256*3)+9)
;	bsr	$_PanicNull
	DC	((256*15)+9)
	st	AH,@(H'0002,Y)
	tst	@(H'0001,Y)
	bne	?L48
	ld	X,@_map?
	add	X,#H'0003
	ld	AL,@_mapSize
	smult	#H'0003
	st	AL,@(0,Y)
	ld	AH,@(H'0002,Y)
	bra	(?L51)
?L48:
	ld	AL,@(H'0001,Y)
	smult	#H'0003
	st	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0002,Y)
	ld	AL,@_map?
	bsr	$_memcpy
	ld	AL,@_mapSize
	cmp	AL,@(H'0001,Y)
	beq	?L49
	ld	AH,@(H'0002,Y)
	add	AH,@(H'0003,Y)
	st	AH,@(-1,Y)
	ld	X,@(H'0003,Y)
	add	X,@_map?
	add	X,#H'0003
	sub	AL,@(H'0001,Y)
	smult	#H'0003
	st	AL,@(0,Y)
	ld	AH,@(-1,Y)
?L51:
	ld	AL,@$XAP_UXL
	bsr	$_memcpy
?L49:
	ld	AH,@_map?
;	bsr	$_free
	DC	((256*4)+9)
	ld	AL,@(H'0002,Y)
	st	AL,@_map?
?LBE3:
?LBE_deleteElement:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# import _conn_list_head
;# end scan referenced symbols
$_connectionAddInstance:
	enter	#1
?LBB_connectionAddInstance:
	ld	X,@$XAP_AH
	ld	AL,@_conn_list_head
	st	AL,@(H'001D,X)
	st	AH,@_conn_list_head
?LBE_connectionAddInstance:
	leave	#1
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import _id_match
;# end scan referenced symbols
$_connectionDeleteInstance:
	enter	#10
?LBB_connectionDeleteInstance:
	st	AH,@(H'0006,Y)
?LBB4:
	ld	AL,@_conn_list_head
	st	AL,@(H'0007,Y)
	st	AL,@(H'0008,Y)
	cmp	AL,#H'0000
	beq	?L65
?L63:
	ld	AH,@$XAP_UY
	ld	AL,#H'0006
	ld	X,@$XAP_UY
	add	X,#H'000A
	bc2
	ld	AH,@(H'0007,Y)
	ld	AL,@(H'0006,Y)
	bsr	_id_match
	cmp	AH,#H'0000
	beq	?L58
	ld	X,@_conn_list_head
	tst	@(H'001D,X)
	bne	?L59
	ld	AL,#H'0000
	bra	(?L66)
?L59:
	ld	X,@(H'0007,Y)
	cmp	X,@_conn_list_head
	bne	?L61
	ld	AL,@(H'001D,X)
?L66:
	st	AL,@_conn_list_head
	bra	(?L60)
?L61:
	ld	X,@(H'0007,Y)
	ld	AL,@(H'001D,X)
	ld	X,@(H'0008,Y)
	st	AL,@(H'001D,X)
?L60:
	ld	AH,@(H'0007,Y)
;	bsr	$_free
	DC	((256*4)+9)
	ld	AH,#H'0001
	bra	(?L54)
?L58:
	ld	AL,@(H'0007,Y)
	st	AL,@(H'0008,Y)
	ld	X,@$XAP_AL
	ld	X,@(H'001D,X)
	st	X,@(H'0007,Y)
	cmp	X,#H'0000
	bne	?L63
?L65:
	ld	AH,#H'0000
?L54:
?LBE4:
?LBE_connectionDeleteInstance:
	leave	#10
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionGetInstance:
	enter	#9
?LBB_connectionGetInstance:
	st	AH,@(H'0006,Y)
?LBB5:
	ld	AL,@_conn_list_head
	st	AL,@(H'0007,Y)
	cmp	AL,#H'0000
	beq	?L70
?L73:
	ld	AH,@$XAP_UY
	ld	AL,#H'0006
	ld	X,@$XAP_UY
	add	X,#H'0009
	bc2
	ld	AH,@(H'0007,Y)
	ld	AL,@(H'0006,Y)
	bsr	_id_match
	cmp	AH,#H'0000
	bne	?L70
	ld	X,@(H'0007,Y)
	ld	X,@(H'001D,X)
	st	X,@(H'0007,Y)
	cmp	X,#H'0000
	bne	?L73
?L70:
?LBE5:
	ld	AH,@(H'0007,Y)
?LBE_connectionGetInstance:
	leave	#9
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;# begin scan referenced symbols
;# end scan referenced symbols
$_connectionGetInstanceByState:
	enter	#1
?LBB_connectionGetInstanceByState:
?LBB6:
	ld	X,@_conn_list_head
	cmp	X,#H'0000
	beq	?L77
?L80:
	ld	AL,@(0,X)
	cmp	AL,#H'0001
	bne	?L79
	ld	AL,@(H'0008,X)
	cmp	AL,@$XAP_AH
	beq	?L77
?L79:
	ld	X,@(H'001D,X)
	cmp	X,#H'0000
	bne	?L80
?L77:
?LBE6:
	ld	AH,@$XAP_UXL
?LBE_connectionGetInstanceByState:
	leave	#1
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
;# begin scan referenced symbols
;# import $_BdaddrSetZero
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionGetId:
	enter	#13
?LBB_connectionGetId:
	st	AL,@H'ffff
	ld	AL,@H'fff8
	st	AL,@(H'000A,Y)
	ld	AL,@H'ffff
	st	AL,@(H'000B,Y)
?LBB7:
	cmp	AH,#H'0000
	bne	?L85
	ld	AH,@$XAP_UY
	add	AH,#H'0006
	bsr	$_BdaddrSetZero
	bra	(?L86)
?L85:
	ld	X,@$XAP_AH
	ld	AL,@(0,X)
	st	AL,@(H'0006,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0007,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0008,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(H'0009,Y)
?L86:
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	X,@$XAP_UY
	add	X,#H'0006
	ld	AL,@(H'0001,X)
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(H'0003,Y)
	ld	AL,@(H'000B,Y)
	st	AL,@(H'0005,Y)
	ld	X,@(H'000D,Y)
	st	X,@(H'0004,Y)
	ld	AH,@(H'000A,Y)
	ld	AL,#H'0006
	ld	X,@$XAP_UY
	bc2
?LBE7:
	ld	AH,@(H'000A,Y)
?LBE_connectionGetId:
	leave	#13
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;# begin scan referenced symbols
;#(clobber:QI (reg:QI 0 AH))
;#(clobber:QI (reg:QI 0 AH))
;# end scan referenced symbols
_findMatchInMap:
	enter	#1
?LBB_findMatchInMap:
	st	AH,@H'fff8
	st	AL,@H'fff9
?LBB8:
	ld	AL,#H'0000
	st	AL,@(-1,Y)
	cmp	AL,@_mapSize
	bcc	?L104
?L102:
	ld	AL,@(-1,Y)
	smult	#H'0003
	ld	X,@_map?
	add	X,@$XAP_AL
	ld	AL,@(0,X)
	cmp	AL,@H'fff8
	bne	?L90
	ld	AL,@H'fff8
	cmp	AL,#H'0001
	beq	?L96
	cmp	AL,#H'0001
	bcc	?L90
	bra	(?L106)
?L96:
	ld	AL,@(-1,Y)
	smult	#H'0003
	ld	X,@_map?
	add	X,@$XAP_AL
?L106:
	ld	AL,@(H'0002,X)
	cmp	AL,@H'fff9
	bne	?L90
	ld	AL,@(-1,Y)
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
	ld	AH,#H'0001
	bra	(?L87)
?L90:
	ld	X,#H'0001
	add	X,@(-1,Y)
	st	X,@(-1,Y)
	cmp	X,@_mapSize
	bcs	?L102
?L104:
	ld	AH,#H'0000
?L87:
?LBE8:
?LBE_findMatchInMap:
	leave	#1
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
;# begin scan referenced symbols
;# import _findMatchInMap
;#(clobber:QI (reg:QI 0 AH))
;# import $_realloc
;#(clobber:QI (reg:QI 0 AH))
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_connectionAddTaskMap:
	enter	#8
?LBB_connectionAddTaskMap:
	st	AH,@(H'0005,Y)
	st	AL,@(H'0006,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0004
?LBB9:
	st	AL,@(0,Y)
	ld	AL,@(H'0008,Y)
	bsr	_findMatchInMap
	cmp	AH,#H'0000
	beq	?L114
	ld	AH,#H'0000
	bra	(?L113)
?L114:
	ld	AL,@(H'0005,Y)
?LBB10:
	st	AL,@(H'0001,Y)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0002,Y)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0003,Y)
	ld	AL,@_mapSize
	smult	#H'0003
	add	AL,#H'0003
	ld	AH,@_map?
;	bsr	$_realloc
	DC	((256*5)+9)
;	bsr	$_PanicNull
	DC	((256*15)+9)
	ld	X,@$XAP_AH
	st	AH,@_map?
	ld	AL,@_mapSize
	smult	#H'0003
	add	AL,@$XAP_UXL
	ld	AH,@$XAP_AL
	ld	AL,#H'0003
	ld	X,@$XAP_UY
	add	X,#H'0001
	bc2
	ld	AL,@_mapSize
	add	AL,#H'0001
	st	AL,@_mapSize
	ld	AH,#H'0001
?L113:
?LBE10:
?LBE9:
?LBE_connectionAddTaskMap:
	leave	#8
;.stabn	192,0,0,?LBB9
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;.stabn	224,0,0,?LBE9
;# begin scan referenced symbols
;#(clobber:QI (reg:QI 0 AH))
;# end scan referenced symbols
$_connectionGetTaskFromMap:
	enter	#3
?LBB_connectionGetTaskFromMap:
?LBB11:
	ld	X,#H'0000
	st	X,@(H'0001,Y)
	ld	X,@$XAP_UY
	add	X,#H'0001
	st	X,@(0,Y)
	bsr	_findMatchInMap
	cmp	AH,#H'0000
	beq	?L117
	ld	AL,@(H'0001,Y)
	smult	#H'0003
	ld	X,@_map?
	add	X,@$XAP_AL
	ld	AH,@(H'0001,X)
	bra	(?L116)
?L117:
	ld	AH,#H'0000
?L116:
?LBE11:
?LBE_connectionGetTaskFromMap:
	leave	#3
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
;# begin scan referenced symbols
;# import _deleteElement
;# end scan referenced symbols
$_connectionDeleteTaskMap:
	enter	#3
?LBB_connectionDeleteTaskMap:
	ld	X,@$XAP_UY
	add	X,#H'0001
?LBB12:
	st	X,@(0,Y)
	bsr	_findMatchInMap
	cmp	AH,#H'0000
	beq	?L120
	ld	AL,@_mapSize
	cmp	AL,#H'0001
	bne	?L121
	ld	AH,@_map?
;	bsr	$_free
	DC	((256*4)+9)
	ld	AL,#H'0000
	st	AL,@_map?
	st	AL,@_mapSize
	bra	(?L122)
?L121:
	ld	AH,@(H'0001,Y)
	bsr	_deleteElement
?L122:
	ld	AH,#H'0001
	bra	(?L119)
?L120:
	ld	AH,#H'0000
?L119:
?LBE12:
?LBE_connectionDeleteTaskMap:
	leave	#3
;.stabn	192,0,0,?LBB12
;.stabn	224,0,0,?LBE12
	ENDMOD

;# Function pattern *movqi2 used[0] = 65 used[1] = 18 used[3] = 1 total = 84
;# Function pattern *movqi3 used[0] = 82 total = 82
;# Function pattern *movqi8 used[0] = 13 total = 13
;# Function pattern *addqi0 used[0] = 11 total = 11
;# Function pattern *addqi2 used[0] = 10 used[2] = 4 total = 14
;# Function pattern *subqi3 used[0] = 1 total = 1
;# Function pattern *mulqi3_const used[0] = 9 total = 9
;# Function pattern jump used[0] = 17 total = 17
;# Function pattern *call1 used[0] = 5 total = 5
;# Function pattern *call_value1 used[0] = 14 total = 14
;# Function pattern *movstrqi2 used[0] = 4 total = 4
;# Function pattern movstrqi+3 used[0] = 16 used[1] = 8 total = 24
;# Function pattern movstrqi+5 used[0] = 27 total = 27
	MODULE	dm_link_policy
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
$_ConnectionLinkPolicyResponse:
	enter	#1
?LBB_ConnectionLinkPolicyResponse:
	ld	X,@$XAP_AL
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0006,Y)
	cmp	X,#H'0000
	beq	?L1
	cmp	AL,#H'0000
	beq	?L1
	cmp	AH,@(0,X)
	bcs	?L1
	st	AH,@(0,X)
	ld	AH,@(H'0002,Y)
	st	AH,@(H'0001,X)
	ld	AH,@(H'0004,Y)
	st	AH,@(H'0003,X)
	ld	AH,@(H'0005,Y)
	st	AH,@(H'0004,X)
	st	AL,@(H'0005,X)
	ld	AL,@(H'0003,Y)
	st	AL,@(H'0002,X)
?L1:
?LBE_ConnectionLinkPolicyResponse:
	leave	#1
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_connectionGetCmTask
;# import $_MessageSend
;# end scan referenced symbols
$_ConnectionSetRole:
	enter	#5
?LBB_ConnectionSetRole:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
?LBB3:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'004B
	bsr	$_MessageSend
?LBE3:
?LBE2:
?LBE_ConnectionSetRole:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionGetRole:
	enter	#5
?LBB_ConnectionGetRole:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB4:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'004C
	bsr	$_MessageSend
?LBE4:
?LBE_ConnectionGetRole:
	leave	#5
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
	ENDMOD

;# Function pattern *movqi2 used[0] = 20 total = 20
;# Function pattern *movqi3 used[0] = 13 total = 13
;# Function pattern *call1 used[0] = 2 total = 2
;# Function pattern *call_value1 used[0] = 4 total = 4
;# Function pattern movstrqi+2 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 2 total = 2
;# Function pattern movstrqi+5 used[0] = 1 total = 1
	MODULE	initx
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_MessageSend
;# import $_free
;# end scan referenced symbols
	.CODE
_sendInitCfmToApp:
	enter	#4
?LBB_sendInitCfmToApp:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'6F00
	bsr	$_MessageSend
	tst	@(H'0001,Y)
	beq	?L1
	ld	AH,@(H'0002,Y)
;	bsr	$_free
	DC	((256*4)+9)
?L1:
?LBE2:
?LBE_sendInitCfmToApp:
	leave	#4
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
;# begin scan referenced symbols
;# import $_sppProfileHandler
;# import $_sppSetState
;# end scan referenced symbols
$_SppInit:
	enter	#5
?LBB_SppInit:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB3:
	ld	AH,#H'0009
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,#lwrd($_sppProfileHandler)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0003,X)
	ld	AL,#H'0000
	st	AL,@(H'0002,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0007,X)
	ld	AL,#H'0000
	st	AL,@(H'0004,X)
	st	AL,@(H'0006,X)
	st	AL,@(H'0005,X)
	st	AL,@(H'0008,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0001,X)
	ld	AL,#H'0000
	bsr	$_sppSetState
	ld	X,#H'0000
	st	X,@(0,Y)
	ld	AH,@(H'0003,Y)
	ld	AL,#H'0000
	bsr	$_MessageSend
?LBE3:
?LBE_SppInit:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# import $_ConnectionRfcommAllocateChannel
;# end scan referenced symbols
$_sppHandleInternalInitReq:
	enter	#1
?LBB_sppHandleInternalInitReq:
	bsr	$_ConnectionRfcommAllocateChannel
?LBE_sppHandleInternalInitReq:
	leave	#1
;# begin scan referenced symbols
;# import $_sppSendInternalInitCfm
;# end scan referenced symbols
$_sppHandleRfcommRegisterCfm:
	enter	#2
?LBB_sppHandleRfcommRegisterCfm:
	ld	X,@$XAP_AL
	tst	@(0,X)
	bne	?L6
	ld	AL,@(H'0001,X)
	st	AL,@(0,Y)
	ld	AL,#H'0000
	bra	(?L8)
?L6:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AL,#H'0001
?L8:
	bsr	$_sppSendInternalInitCfm
?LBE_sppHandleRfcommRegisterCfm:
	leave	#2
;# begin scan referenced symbols
;# end scan referenced symbols
$_sppSendInternalInitCfm:
	enter	#4
?LBB_sppSendInternalInitCfm:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB4:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	ld	AL,@(H'0004,Y)
	st	AL,@(H'0001,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'0001
	bsr	$_MessageSend
?LBE4:
?LBE_sppSendInternalInitCfm:
	leave	#4
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;# begin scan referenced symbols
;# import _sendInitCfmToApp
;# import $_sppRegisterServiceRecord
;# end scan referenced symbols
$_sppHandleInternalInitCfm:
	enter	#2
?LBB_sppHandleInternalInitCfm:
	st	AH,@(0,Y)
	st	AL,@H'fff8
	ld	X,@$XAP_AL
	tst	@(0,X)
	beq	?L11
	ld	AH,@(0,X)
	bra	(?L15)
?L11:
	ld	X,@$XAP_AL
	tst	@(H'0001,X)
	bne	?L13
	ld	AH,@(0,Y)
	ld	AL,#H'0001
	bsr	$_sppSetState
	ld	AH,#H'0000
?L15:
	ld	AL,@(0,Y)
	bsr	_sendInitCfmToApp
	bra	(?L10)
?L13:
	ld	X,@$XAP_AL
	ld	AL,@(H'0001,X)
	ld	X,@(0,Y)
	st	AL,@(H'0002,X)
	ld	AH,@$XAP_UXL
	ld	X,@H'fff8
	ld	AL,@(H'0001,X)
	bsr	$_sppRegisterServiceRecord
?L10:
?LBE_sppHandleInternalInitCfm:
	leave	#2
	ENDMOD

;# Function pattern *movqi2 used[0] = 35 used[1] = 5 total = 40
;# Function pattern *movqi3 used[0] = 29 total = 29
;# Function pattern jump used[0] = 3 total = 3
;# Function pattern *call1 used[0] = 10 total = 10
;# Function pattern *call_value1 used[0] = 3 total = 3
;# Function pattern movstrqi+2 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[1] = 4 total = 4
	MODULE	spp_connect
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
$_SppConnect:
	enter	#4
?LBB_SppConnect:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'0003
	bsr	$_MessageSend
?LBE2:
?LBE_SppConnect:
	leave	#4
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
;# begin scan referenced symbols
;# end scan referenced symbols
$_SppConnectResponse:
	enter	#4
?LBB_SppConnectResponse:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB3:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0004,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0004,X)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'0004
	bsr	$_MessageSend
?LBE3:
?LBE_SppConnectResponse:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# end scan referenced symbols
$_SppDisconnect:
	enter	#2
?LBB_SppDisconnect:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AL,#H'0006
	bsr	$_MessageSend
?LBE_SppDisconnect:
	leave	#2
	ENDMOD

;# Function pattern *movqi2 used[0] = 24 used[1] = 2 total = 26
;# Function pattern *movqi3 used[0] = 23 total = 23
;# Function pattern *call1 used[0] = 3 total = 3
;# Function pattern *call_value1 used[0] = 2 total = 2
	MODULE	rfc
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
_initConfigParams:
	enter	#1
?LBB_initConfigParams:
	ld	X,@$XAP_AH
	ld	AL,#H'007F
	st	AL,@(0,X)
	ld	AH,#H'0000
	st	AH,@(H'0001,X)
	st	AH,@(H'0002,X)
	ld	AL,#-H'15A0
	st	AL,@(H'0004,X)
	st	AH,@(H'0003,X)
	ld	AL,#H'0001
	st	AL,@(H'0005,X)
	ld	AL,#H'00FF
	st	AL,@(H'0006,X)
	ld	AL,#H'0003
	st	AL,@(H'0007,X)
	st	AH,@(H'0008,X)
	ld	AL,#H'0001
	st	AL,@(H'0009,X)
	st	AH,@(H'000A,X)
	st	AH,@(H'000B,X)
	ld	AL,#H'0011
	st	AL,@(H'000C,X)
	ld	AL,#H'0013
	st	AL,@(H'000D,X)
	ld	AL,#H'3F7F
	st	AL,@(H'000E,X)
?LBE_initConfigParams:
	leave	#1
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_connectionGetCmTask
;# import $_MessageSend
;# end scan referenced symbols
$_ConnectionRfcommAllocateChannel:
	enter	#4
?LBB_ConnectionRfcommAllocateChannel:
	st	AH,@(H'0001,Y)
?LBB2:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	ld	AL,#H'003B
	bsr	$_MessageSend
?LBE2:
?LBE_ConnectionRfcommAllocateChannel:
	leave	#4
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# import _initConfigParams
;# end scan referenced symbols
$_ConnectionRfcommConnectRequest:
	enter	#5
?LBB_ConnectionRfcommConnectRequest:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB3:
?LBB4:
	ld	AH,#H'0016
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0005,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0006,X)
	tst	@(H'0007,Y)
	beq	?L4
	ld	AH,@$XAP_UXL
	add	AH,#H'0007
	ld	AL,#H'000F
	ld	X,@(H'0007,Y)
	bc2
	bra	(?L5)
?L4:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0007
	bsr	_initConfigParams
?L5:
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'003C
	bsr	$_MessageSend
?LBE4:
?LBE3:
?LBE_ConnectionRfcommConnectRequest:
	leave	#5
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;# begin scan referenced symbols
;#(clobber (reg:QI 0 AH))
;#(clobber (mem:BLK (const_int 0 [0x0]) [0 A16]))
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
$_ConnectionRfcommConnectResponse:
	enter	#5
?LBB_ConnectionRfcommConnectResponse:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB5:
?LBB6:
	ld	AH,#H'0016
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	ld	X,@(H'0005,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0005,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0006,X)
	tst	@(H'0007,Y)
	beq	?L7
	ld	AH,@$XAP_UXL
	add	AH,#H'0007
	ld	AL,#H'000F
	ld	X,@(H'0007,Y)
	bc2
	bra	(?L8)
?L7:
	ld	AH,@(H'0003,Y)
	add	AH,#H'0007
	bsr	_initConfigParams
?L8:
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'003D
	bsr	$_MessageSend
?LBE6:
?LBE5:
?LBE_ConnectionRfcommConnectResponse:
	leave	#5
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionRfcommDisconnectRequest:
	enter	#5
?LBB_ConnectionRfcommDisconnectRequest:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB7:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'003E
	bsr	$_MessageSend
?LBE7:
?LBE_ConnectionRfcommDisconnectRequest:
	leave	#5
;.stabn	192,0,0,?LBB7
;.stabn	224,0,0,?LBE7
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionRfcommControlSignalRequest:
	enter	#5
?LBB_ConnectionRfcommControlSignalRequest:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB8:
	ld	AH,#H'0004
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0002,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0003,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'0041
	bsr	$_MessageSend
?LBE8:
?LBE_ConnectionRfcommControlSignalRequest:
	leave	#5
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
	ENDMOD

;# Function pattern *movqi2 used[0] = 58 used[1] = 2 total = 60
;# Function pattern *movqi3 used[0] = 56 total = 56
;# Function pattern *addqi2 used[0] = 4 total = 4
;# Function pattern jump used[0] = 2 total = 2
;# Function pattern *call1 used[0] = 7 total = 7
;# Function pattern *call_value1 used[0] = 10 total = 10
;# Function pattern *movstrqi2 used[0] = 2 total = 2
;# Function pattern movstrqi+2 used[0] = 5 total = 5
;# Function pattern movstrqi+3 used[1] = 2 total = 2
	MODULE	spp_common
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
$_sppSetState:
	enter	#1
?LBB_sppSetState:
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
?LBE_sppSetState:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 2 total = 2
	MODULE	spp_profile_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
_handleUnexpected:
	enter	#1
?LBB_handleUnexpected:
?LBE_handleUnexpected:
	leave	#1
;# begin scan referenced symbols
;# import $_sppHandleInternalInitReq
;# import $_sppHandleRfcommRegisterCfm
;#(clobber (reg:QI 3 X))
;# import $_sppHandleInternalInitCfm
;# import $_sppHandleSdpRegisterCfm
;# import $_sppHandleSdpUnregisterCfm
;# import $_sppHandleConnectRequest
;#(clobber (reg:QI 3 X))
;# import $_sppHandleConnectResponse
;# import $_sppSendConnectCfmToApp
;#(clobber (reg:QI 3 X))
;# import $_sppHandleSdpServiceSearchAttributeCfm
;# import $_sppHandleInternalRFCommConnectRequest
;# import $_sppHandleRfcommConnectCfm
;# import $_sppHandleRfcommConnectInd
;# import $_sppHandleConnectIndReject
;# import $_sppHandleRfcommDisconnectInd
;#(clobber (reg:QI 3 X))
;# import $_sppHandleInternalDisconnectReq
;# import $_sppSendDisconnectIndToApp
;#(clobber (reg:QI 3 X))
;# import $_sppHandleLinkPolicyInd
;# import _handleUnexpected
;# import $_PanicUnlessMalloc
;# import $_MessageSend
;# end scan referenced symbols
$_sppProfileHandler:
	enter	#3
?LBB_sppProfileHandler:
?LBB2:
	st	AH,@(H'0001,Y)
	ld	X,@$XAP_AH
	ld	X,@(H'0004,X)
	st	X,@H'fff8
	cmp	AL,#H'7025
	beq	?L13
	cmp	AL,#(H'0001+H'7025)
	bcc	?L138
	cmp	AL,#H'0005
	beq	?L76
	cmp	AL,#(H'0001+H'0005)
	bcc	?L139
	cmp	AL,#H'0001
	beq	?L22
	cmp	AL,#H'0001
	bcs	?L4
	cmp	AL,#H'0003
	beq	?L49
	cmp	AL,#H'0004
	beq	?L58
	bra	(?L2)
?L139:
	cmp	AL,#H'7019
	beq	?L31
	cmp	AL,#(H'0001+H'7019)
	bcc	?L140
	cmp	AL,#H'0006
	beq	?L112
	bra	(?L2)
?L140:
	cmp	AL,#H'701A
	beq	?L40
	cmp	AL,#H'701F
	beq	?L67
	bra	(?L2)
?L138:
	cmp	AL,#H'702A
	beq	?L121
	cmp	AL,#(H'0001+H'702A)
	bcc	?L141
	cmp	AL,#H'7027
	beq	?L94
	cmp	AL,#H'7027
	bcs	?L85
	cmp	AL,#H'7028
	beq	?L103
	cmp	AL,#H'7029
	beq	?L130
	bra	(?L2)
?L141:
	cmp	AL,#-H'7FDE
	beq	?L133
	cmp	AL,#(H'0001-H'7FDE)
	bcc	?L2
	cmp	AL,#-H'7FDF
	beq	?L132
	bra	(?L2)
?L4:
	cmp	X,#H'0000
	bne	?L119
	ld	AH,@(H'0001,Y)
	bsr	$_sppHandleInternalInitReq
	bra	(?L2)
?L13:
	cmp	X,#H'0000
	bne	?L128
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0003,Y)
	bsr	$_sppHandleRfcommRegisterCfm
	bra	(?L2)
?L22:
	cmp	X,#(H'0001+H'0004)
	bcc	?L119
	ld	X,@(?JTBASE30,X)
	brxl
	.SEG	CONST
?JTBASE30:
	.CODE
?L30:
	.SEG	CONST
	dc	?L24-?L30
	dc	?L2-?L30
	dc	?L2-?L30
	dc	?L119-?L30
	dc	?L119-?L30
	.CODE
?L24:
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0003,Y)
	bsr	$_sppHandleInternalInitCfm
	bra	(?L2)
?L31:
	cmp	X,#(H'0001+H'0003)
	bcc	?L128
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0003,Y)
	bsr	$_sppHandleSdpRegisterCfm
	bra	(?L2)
?L40:
	cmp	X,#H'0003
	bcz	?L128
	cmp	X,#H'0004
	bne	?L128
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0003,Y)
	bsr	$_sppHandleSdpUnregisterCfm
	bra	(?L2)
?L49:
	cmp	X,#H'0001
	beq	?L51
	cmp	X,#H'0001
	bcs	?L119
	cmp	X,#(H'0001+H'0004)
	bcc	?L119
	bra	(?L63)
?L51:
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0003,Y)
	bsr	$_sppHandleConnectRequest
	bra	(?L2)
?L58:
	cmp	X,#(H'0001+H'0004)
	bcc	?L119
	ld	X,@(?JTBASE66,X)
	brxl
	.SEG	CONST
?JTBASE66:
	.CODE
?L66:
	.SEG	CONST
	dc	?L119-?L66
	dc	?L63-?L66
	dc	?L63-?L66
	dc	?L60-?L66
	dc	?L63-?L66
	.CODE
?L60:
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0003,Y)
	bsr	$_sppHandleConnectResponse
	bra	(?L2)
?L63:
	ld	AH,#H'0003
	ld	AL,@(H'0001,Y)
	bsr	$_sppSendConnectCfmToApp
	bra	(?L2)
?L67:
	cmp	X,#(H'0001+H'0004)
	bcc	?L128
	ld	X,@(?JTBASE75,X)
	brxl
	.SEG	CONST
?JTBASE75:
	.CODE
?L75:
	.SEG	CONST
	dc	?L128-?L75
	dc	?L2-?L75
	dc	?L69-?L75
	dc	?L2-?L75
	dc	?L2-?L75
	.CODE
?L69:
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0003,Y)
	bsr	$_sppHandleSdpServiceSearchAttributeCfm
	bra	(?L2)
?L76:
	cmp	X,#H'0003
	bne	?L119
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0003,Y)
	bsr	$_sppHandleInternalRFCommConnectRequest
	bra	(?L2)
?L85:
	cmp	X,#H'0003
	bne	?L128
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0003,Y)
	bsr	$_sppHandleRfcommConnectCfm
	bra	(?L2)
?L94:
	cmp	X,#H'0001
	beq	?L96
	cmp	X,#H'0001
	bcs	?L128
	cmp	X,#(H'0001+H'0004)
	bcc	?L128
	bra	(?L99)
?L96:
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0003,Y)
	bsr	$_sppHandleRfcommConnectInd
	bra	(?L2)
?L99:
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0003,Y)
	bsr	$_sppHandleConnectIndReject
	bra	(?L2)
?L103:
	cmp	X,#H'0000
	beq	?L128
	cmp	X,#(H'0001+H'0004)
	bcc	?L128
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0003,Y)
	bsr	$_sppHandleRfcommDisconnectInd
	bra	(?L2)
?L112:
	cmp	X,#(H'0001+H'0004)
	bcc	?L119
	ld	X,@(?JTBASE120,X)
	brxl
	.SEG	CONST
?JTBASE120:
	.CODE
?L120:
	.SEG	CONST
	dc	?L119-?L120
	dc	?L117-?L120
	dc	?L117-?L120
	dc	?L115-?L120
	dc	?L115-?L120
	.CODE
?L115:
	ld	AH,@(H'0001,Y)
	bsr	$_sppHandleInternalDisconnectReq
	bra	(?L2)
?L117:
	ld	AH,@(H'0001,Y)
	ld	AL,#H'0002
	bsr	$_sppSendDisconnectIndToApp
	bra	(?L2)
?L119:
	st	AL,@(0,Y)
	ld	AH,#H'0001
	bra	(?L144)
?L121:
	cmp	X,#(H'0001+H'0004)
	bcc	?L128
	ld	X,@(?JTBASE129,X)
	brxl
	.SEG	CONST
?JTBASE129:
	.CODE
?L129:
	.SEG	CONST
	dc	?L128-?L129
	dc	?L2-?L129
	dc	?L128-?L129
	dc	?L124-?L129
	dc	?L124-?L129
	.CODE
?L124:
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0003,Y)
	bsr	$_sppHandleLinkPolicyInd
	bra	(?L2)
?L128:
	st	AL,@(0,Y)
	ld	AH,#H'0000
?L144:
	ld	AL,@H'fff8
	bsr	_handleUnexpected
	bra	(?L2)
?L130:
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	add	AL,#-H'0002
	cmp	AL,#(H'0001+H'0001)
	bcc	?L2
?LBB3:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'7029
	bra	(?L143)
?L132:
?LBE3:
?LBB4:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0001,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'6F03
	bra	(?L143)
?L133:
?LBE4:
?LBB5:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0003,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0001,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'6F04
?L143:
	bsr	$_MessageSend
?L2:
?LBE5:
?LBE2:
?LBE_sppProfileHandler:
	leave	#3
;.stabn	192,0,0,?LBB2
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 20 used[1] = 31 total = 51
;# Function pattern *movqi3 used[0] = 31 total = 31
;# Function pattern *addqi2 used[0] = 1 total = 1
;# Function pattern jump used[0] = 28 total = 28
;# Function pattern *call1 used[0] = 19 total = 19
;# Function pattern *call_value1 used[0] = 3 total = 3
;# Function pattern tablejump_1 used[0] = 5 total = 5
;# Function pattern movstrqi+3 used[0] = 3 total = 3
;# Function pattern movstrqi+4 used[1] = 15 total = 15
;# Function pattern movstrqi+5 used[0] = 25 total = 25
	MODULE	spp_sdp
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.SEG	CONST
_spp_service_record_devA:
	dc	H'0009
	dc	H'0000
	dc	H'0001
	dc	H'0035
	dc	H'0003
	dc	H'0019
	dc	H'0011
	dc	H'0001
	dc	H'0009
	dc	H'0000
	dc	H'0004
	dc	H'0035
	dc	H'000C
	dc	H'0035
	dc	H'0003
	dc	H'0019
	dc	H'0001
	dc	H'0000
	dc	H'0035
	dc	H'0005
	dc	H'0019
	dc	H'0000
	dc	H'0003
	dc	H'0008
	dc	H'0000
	dc	H'0009
	dc	H'0000
	dc	H'0006
	dc	H'0035
	dc	H'0009
	dc	H'0009
	dc	H'0065
	dc	H'006E
	dc	H'0009
	dc	H'0000
	dc	H'006A
	dc	H'0009
	dc	H'0001
	dc	H'0000
	dc	H'0009
	dc	H'0001
	dc	H'0000
	dc	H'0025
	dc	H'0005
	dc	H'0044
	dc	H'0065
	dc	H'0076
	dc	H'0020
	dc	H'0041
_spp_service_record_devB:
	dc	H'0009
	dc	H'0000
	dc	H'0001
	dc	H'0035
	dc	H'0003
	dc	H'0019
	dc	H'0011
	dc	H'0001
	dc	H'0009
	dc	H'0000
	dc	H'0004
	dc	H'0035
	dc	H'000C
	dc	H'0035
	dc	H'0003
	dc	H'0019
	dc	H'0001
	dc	H'0000
	dc	H'0035
	dc	H'0005
	dc	H'0019
	dc	H'0000
	dc	H'0003
	dc	H'0008
	dc	H'0000
	dc	H'0009
	dc	H'0000
	dc	H'0006
	dc	H'0035
	dc	H'0009
	dc	H'0009
	dc	H'0065
	dc	H'006E
	dc	H'0009
	dc	H'0000
	dc	H'006A
	dc	H'0009
	dc	H'0001
	dc	H'0000
	dc	H'0009
	dc	H'0001
	dc	H'0000
	dc	H'0025
	dc	H'0005
	dc	H'0044
	dc	H'0065
	dc	H'0076
	dc	H'0020
	dc	H'0042
_spp_service_record_dunDCE:
	dc	H'0009
	dc	H'0000
	dc	H'0001
	dc	H'0035
	dc	H'0003
	dc	H'0019
	dc	H'0011
	dc	H'0003
	dc	H'0009
	dc	H'0000
	dc	H'0004
	dc	H'0035
	dc	H'000C
	dc	H'0035
	dc	H'0003
	dc	H'0019
	dc	H'0001
	dc	H'0000
	dc	H'0035
	dc	H'0005
	dc	H'0019
	dc	H'0000
	dc	H'0003
	dc	H'0008
	dc	H'0000
	dc	H'0009
	dc	H'0000
	dc	H'0006
	dc	H'0035
	dc	H'0009
	dc	H'0009
	dc	H'0065
	dc	H'006E
	dc	H'0009
	dc	H'0000
	dc	H'006A
	dc	H'0009
	dc	H'0001
	dc	H'0000
	dc	H'0009
	dc	H'0000
	dc	H'0009
	dc	H'0035
	dc	H'0008
	dc	H'0035
	dc	H'0006
	dc	H'0019
	dc	H'0011
	dc	H'0003
	dc	H'0009
	dc	H'0001
	dc	H'0000
	dc	H'0009
	dc	H'0001
	dc	H'0000
	dc	H'0025
	dc	H'0012
	dc	H'0044
	dc	H'0069
	dc	H'0061
	dc	H'006C
	dc	H'002D
	dc	H'0075
	dc	H'0070
	dc	H'0020
	dc	H'004E
	dc	H'0065
	dc	H'0074
	dc	H'0077
	dc	H'006F
	dc	H'0072
	dc	H'006B
	dc	H'0069
	dc	H'006E
	dc	H'0067
;# begin scan referenced symbols
;# import $_ServiceGetValue
;# import $_RegionMatchesUUID32
;# import $_ServiceFindAttribute
;# end scan referenced symbols
	.CODE
_findRfcommServerChannel:
	enter	#10
?LBB_findRfcommServerChannel:
	st	AH,@(H'0002,Y)
?LBB2:
	st	AL,@(H'0003,Y)
	bra	(?L13)
?L11:
	ld	AL,@(H'0006,Y)
	cmp	AL,#H'0006
	bne	?L13
	bra	(?L12)
?L10:
	ld	AL,@(H'0006,Y)
	cmp	AL,#H'0006
	bne	?L12
	ld	AL,@(H'000A,Y)
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0004
	ld	AL,@$XAP_UY
	add	AL,#H'0006
	bsr	$_ServiceGetValue
	cmp	AH,#H'0000
	beq	?L12
	ld	AL,@(H'0006,Y)
	cmp	AL,#H'0003
	bne	?L12
	st	AL,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(H'000A,Y)
	bsr	$_RegionMatchesUUID32
	cmp	AH,#H'0000
	beq	?L12
	ld	X,@(H'000A,Y)
	st	X,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0004
	ld	AL,@$XAP_UY
	add	AL,#H'0006
	bsr	$_ServiceGetValue
	cmp	AH,#H'0000
	beq	?L12
	ld	AL,@(H'0006,Y)
	cmp	AL,#H'0001
	bne	?L12
	ld	AH,#H'0001
	bra	(?L1)
?L12:
	ld	AL,@$XAP_UY
	add	AL,#H'0004
	st	AL,@(0,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0007
	ld	AL,@$XAP_UY
	add	AL,#H'0006
	bsr	$_ServiceGetValue
	cmp	AH,#H'0000
	bne	?L10
?L13:
	ld	AL,@$XAP_UY
	add	AL,#H'0006
	st	AL,@(0,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0007
	st	AL,@(H'0001,Y)
	ld	AH,@$XAP_UY
	add	AH,#H'0002
	ld	AL,#H'0004
	bsr	$_ServiceFindAttribute
	cmp	AH,#H'0000
	bne	?L11
	ld	AH,#H'0000
?L1:
?LBE2:
?LBE_findRfcommServerChannel:
	leave	#10
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
;# begin scan referenced symbols
;# import _findRfcommServerChannel
;# import $_RegionReadUnsigned
;# end scan referenced symbols
_getRfcommChannelNumber:
	enter	#4
?LBB_getRfcommChannelNumber:
	ld	X,@$XAP_UY
	add	X,#H'0001
?LBB3:
	st	X,@(0,Y)
	bsr	_findRfcommServerChannel
	cmp	AH,#H'0000
	beq	?L19
	ld	AH,@$XAP_UY
	add	AH,#H'0001
	bsr	$_RegionReadUnsigned
	ld	X,@(H'0004,Y)
	st	AL,@(0,X)
	ld	AH,#H'0001
	bra	(?L18)
?L19:
	ld	AH,#H'0000
?L18:
?LBE3:
?LBE_getRfcommChannelNumber:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# import $_RegionWriteUnsigned
;# end scan referenced symbols
_insertRfcommServerChannel:
	enter	#5
?LBB_insertRfcommServerChannel:
	ld	X,@$XAP_AL
?LBB4:
	cmp	AH,#H'0000
	beq	?L22
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	st	AL,@(0,Y)
	ld	AL,@$XAP_UXL
	bsr	_findRfcommServerChannel
	cmp	AH,#H'0000
	beq	?L22
	ld	X,@$XAP_UY
	add	X,#H'0002
	ld	AL,@(H'0001,X)
	sub	AL,@(H'0002,Y)
	cmp	AL,#H'0001
	bne	?L22
	ld	AH,#H'0000
	ld	AL,@(H'0005,Y)
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,@$XAP_UXL
	bsr	$_RegionWriteUnsigned
	ld	AH,#H'0001
	bra	(?L20)
?L22:
	ld	AH,#H'0000
?L20:
?LBE4:
?LBE_insertRfcommServerChannel:
	leave	#5
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import _spp_service_record_devA
;# import _spp_service_record_devB
;# import _spp_service_record_dunDCE
;# import $_memcpy
;# import $_sppSendInternalInitCfm
;# import _insertRfcommServerChannel
;# import $_free
;# import $_ConnectionRegisterServiceRecord
;# end scan referenced symbols
$_sppRegisterServiceRecord:
	enter	#7
?LBB_sppRegisterServiceRecord:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB5:
	ld	AH,#H'0000
	st	AH,@(H'0003,Y)
	st	AH,@(H'0004,Y)
	ld	X,@(H'0001,Y)
	tst	@(H'0003,X)
	bne	?L25
	ld	AH,#H'0031
	st	AH,@(H'0003,Y)
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#(_spp_service_record_devA)
	bra	(?L38)
?L25:
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	cmp	AL,#H'0001
	bne	?L27
	ld	AH,#H'0031
	st	AH,@(H'0003,Y)
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#(_spp_service_record_devB)
	bra	(?L38)
?L27:
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	cmp	AL,#H'0002
	bne	?L29
	ld	AH,#H'004B
	st	AH,@(H'0003,Y)
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#(_spp_service_record_dunDCE)
?L38:
	bsr	$_memcpy
	bra	(?L26)
?L29:
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0003,X)
	cmp	AL,#H'0003
	bne	?L31
	ld	AL,#H'0000
	st	AL,@(H'0006,X)
	st	AL,@(H'0005,X)
	st	AL,@(0,Y)
	ld	AH,@$XAP_UXL
	bra	(?L37)
?L31:
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,#H'0002
?L37:
	bsr	$_sppSendInternalInitCfm
?L26:
	tst	@(H'0004,Y)
	bne	?L33
	ld	AH,@(H'0004,Y)
	st	AH,@(0,Y)
	bra	(?L39)
?L33:
	ld	AL,@(H'0004,Y)
	add	AL,@(H'0003,Y)
	ld	AH,@(H'0002,Y)
	st	AH,@(0,Y)
	ld	AH,@(H'0004,Y)
	bsr	_insertRfcommServerChannel
	st	AH,@(H'0005,Y)
	cmp	AH,#H'0000
	bne	?L35
	ld	AH,@(H'0004,Y)
;	bsr	$_free
	DC	((256*4)+9)
	ld	AL,@(H'0005,Y)
	st	AL,@(0,Y)
?L39:
	ld	AH,@(H'0001,Y)
	ld	AL,#H'0002
	bsr	$_sppSendInternalInitCfm
	bra	(?L24)
?L35:
	ld	AH,@(H'0004,Y)
	st	AH,@(0,Y)
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0003,Y)
	bsr	$_ConnectionRegisterServiceRecord
?L24:
?LBE5:
?LBE_sppRegisterServiceRecord:
	leave	#7
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;# begin scan referenced symbols
;# end scan referenced symbols
$_sppHandleSdpRegisterCfm:
	enter	#2
?LBB_sppHandleSdpRegisterCfm:
	st	AH,@H'fff8
	ld	X,@$XAP_AL
	tst	@(0,X)
	bne	?L44
	ld	AH,@(H'0001,X)
	ld	AL,@(H'0002,X)
	ld	X,@H'fff8
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	AL,#H'0000
	st	AL,@(0,Y)
	ld	AH,@H'fff8
	bra	(?L46)
?L44:
	ld	AL,#H'0000
	ld	X,@$XAP_AH
	st	AL,@(H'0006,X)
	st	AL,@(H'0005,X)
	st	AL,@(0,Y)
	ld	AL,#H'0002
?L46:
	bsr	$_sppSendInternalInitCfm
?LBE_sppHandleSdpRegisterCfm:
	leave	#2
;# begin scan referenced symbols
;# end scan referenced symbols
$_sppHandleSdpUnregisterCfm:
	enter	#1
?LBB_sppHandleSdpUnregisterCfm:
	ld	X,@$XAP_AL
	tst	@(0,X)
	bne	?L47
	ld	AL,#H'0000
	ld	X,@$XAP_AH
	st	AL,@(H'0006,X)
	st	AL,@(H'0005,X)
?L47:
?LBE_sppHandleSdpUnregisterCfm:
	leave	#1
;# begin scan referenced symbols
;# import _getRfcommChannelNumber
;# import $_sppSetState
;# import $_MessageSend
;# import $_Panic
;# import $_sppSendConnectCfmToApp
;# end scan referenced symbols
$_sppHandleSdpServiceSearchAttributeCfm:
	enter	#6
?LBB_sppHandleSdpServiceSearchAttributeCfm:
	st	AH,@(H'0002,Y)
	st	AL,@(H'0003,Y)
	ld	X,@$XAP_AL
?LBB6:
	tst	@(0,X)
	bne	?L50
?LBB7:
	ld	AL,#H'0000
	st	AL,@(H'0001,Y)
	ld	AH,@$XAP_UXL
	add	AH,#H'0008
	ld	AL,@$XAP_UXL
	add	AL,@(H'0007,X)
	add	AL,#H'0008
	ld	X,@$XAP_UY
	add	X,#H'0001
	st	X,@(0,Y)
	bsr	_getRfcommChannelNumber
	cmp	AH,#H'0000
	beq	?L51
?LBB8:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0004,Y)
	ld	AH,@(H'0002,Y)
	ld	AL,#H'0003
	bsr	$_sppSetState
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0004,Y)
	st	AL,@(0,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0004,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0005,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0006,X)
	ld	X,@(H'0004,Y)
	st	AL,@(H'0003,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(H'0004,X)
	st	X,@(0,Y)
	ld	AH,@(H'0002,Y)
	ld	AL,#H'0005
	bsr	$_MessageSend
?LBE8:
	bra	(?L49)
?L51:
;	bsr	$_Panic
	DC	((256*14)+9)
?LBE7:
	bra	(?L49)
?L50:
	ld	AH,#H'0001
	ld	AL,@(H'0002,Y)
	bsr	$_sppSendConnectCfmToApp
?L49:
?LBE6:
?LBE_sppHandleSdpServiceSearchAttributeCfm:
	leave	#6
;.stabn	192,0,0,?LBB7
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
;.stabn	224,0,0,?LBE7
	ENDMOD

;# Function pattern *movqi2 used[0] = 63 used[1] = 12 total = 75
;# Function pattern *movqi3 used[0] = 58 total = 58
;# Function pattern *movqi8 used[0] = 6 total = 6
;# Function pattern *movhi used[2] = 1 used[3] = 2 total = 3
;# Function pattern *addqi0 used[0] = 15 total = 15
;# Function pattern *addqi2 used[0] = 4 total = 4
;# Function pattern *subqi3 used[0] = 1 total = 1
;# Function pattern *zero_extendqihi2_1 used[1] = 1 total = 1
;# Function pattern jump used[0] = 14 total = 14
;# Function pattern *call1 used[0] = 10 total = 10
;# Function pattern *call_value1 used[0] = 15 total = 15
;# Function pattern movstrqi+3 used[0] = 10 used[1] = 5 total = 15
;# Function pattern movstrqi+5 used[0] = 8 total = 8
	MODULE	sdp_register
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_connectionGetCmTask
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
$_ConnectionRegisterServiceRecord:
	enter	#5
?LBB_ConnectionRegisterServiceRecord:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
?LBB3:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(H'0001,X)
	cmp	AL,#H'0000
	beq	?L2
	ld	AL,@(H'0005,Y)
	bra	(?L4)
?L2:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
?L4:
	st	AL,@(H'0002,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#H'0029
	bsr	$_MessageSend
?LBE3:
?LBE2:
?LBE_ConnectionRegisterServiceRecord:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionUnregisterServiceRecord:
	enter	#4
?LBB_ConnectionUnregisterServiceRecord:
	st	AH,@(H'0001,Y)
?LBB4:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	AH,@(H'0004,Y)
	ld	AL,@(H'0005,Y)
	ld	X,@(H'0002,Y)
	st	AH,@(H'0001,X)
	st	AL,@(H'0002,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0002,Y)
	st	AL,@(0,Y)
	ld	AL,#H'002A
	bsr	$_MessageSend
?LBE4:
?LBE_ConnectionUnregisterServiceRecord:
	leave	#4
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
	ENDMOD

;# Function pattern *movqi2 used[0] = 13 total = 13
;# Function pattern *movqi3 used[0] = 13 total = 13
;# Function pattern *movhi used[2] = 1 used[3] = 1 total = 2
;# Function pattern jump used[0] = 1 total = 1
;# Function pattern *call1 used[0] = 2 total = 2
;# Function pattern *call_value1 used[0] = 4 total = 4
;# Function pattern movstrqi+3 used[0] = 1 total = 1
	MODULE	spp_connect_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.SEG	CONST
_SppServiceRequest:
	dc	H'0035
	dc	H'0005
	dc	H'001A
	dc	H'0000
	dc	H'0000
	dc	H'0011
	dc	H'0001
_DunServiceRequest:
	dc	H'0035
	dc	H'0005
	dc	H'001A
	dc	H'0000
	dc	H'0000
	dc	H'0011
	dc	H'0003
_protocolAttributeRequest:
	dc	H'0035
	dc	H'0003
	dc	H'0009
	dc	H'0000
	dc	H'0004
;# begin scan referenced symbols
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
	.CODE
_convertRfcommConnectStatus:
	enter	#1
?LBB_convertRfcommConnectStatus:
	cmp	AH,#(H'0001+H'0006)
	bcc	?L10
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE11,X)
	brxl
	.SEG	CONST
?JTBASE11:
	.CODE
?L11:
	.SEG	CONST
	dc	?L3-?L11
	dc	?L10-?L11
	dc	?L5-?L11
	dc	?L6-?L11
	dc	?L7-?L11
	dc	?L8-?L11
	dc	?L9-?L11
	.CODE
?L3:
	ld	AH,#H'0000
	bra	(?L1)
?L5:
	ld	AH,#H'0005
	bra	(?L1)
?L6:
	ld	AH,#H'0006
	bra	(?L1)
?L7:
	ld	AH,#H'0007
	bra	(?L1)
?L8:
	ld	AH,#H'0008
	bra	(?L1)
?L9:
	ld	AH,#H'0009
	bra	(?L1)
?L10:
	ld	AH,#H'0004
?L1:
?LBE_convertRfcommConnectStatus:
	leave	#1
;# begin scan referenced symbols
;#(clobber (reg:QI 3 X))
;# end scan referenced symbols
_convertRfcommDisconnectStatus:
	enter	#1
?LBB_convertRfcommDisconnectStatus:
	cmp	AH,#(H'0001+H'0021)
	bcc	?L48
	ld	X,@$XAP_AH
	ld	X,@(?JTBASE49,X)
	brxl
	.SEG	CONST
?JTBASE49:
	.CODE
?L49:
	.SEG	CONST
	dc	?L15-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L17-?L49
	dc	?L15-?L49
	dc	?L16-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	dc	?L48-?L49
	.CODE
?L15:
	ld	AH,#H'0000
	bra	(?L12)
?L16:
	ld	AH,#H'0001
	bra	(?L12)
?L17:
	ld	AH,#H'0003
	bra	(?L12)
?L48:
	ld	AH,#H'0004
?L12:
?LBE_convertRfcommDisconnectStatus:
	leave	#1
;# begin scan referenced symbols
;# import $_sppSetState
;# import $_ConnectionUnregisterServiceRecord
;# end scan referenced symbols
_connectSuccessTidy:
	enter	#4
?LBB_connectSuccessTidy:
	st	AH,@(H'0002,Y)
	ld	AL,#H'0004
	bsr	$_sppSetState
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AH,@$XAP_UXL
	bsr	$_ConnectionUnregisterServiceRecord
?LBE_connectSuccessTidy:
	leave	#4
;# begin scan referenced symbols
;# import $_sppSendConnectCfmToApp
;# import _DunServiceRequest
;# import _SppServiceRequest
;# import _protocolAttributeRequest
;# import $_ConnectionSdpServiceSearchAttributeRequest
;# end scan referenced symbols
$_sppHandleConnectRequest:
	enter	#12
?LBB_sppHandleConnectRequest:
	st	AH,@(H'0009,Y)
	ld	X,@$XAP_AL
?LBB2:
	ld	AL,@(0,X)
	st	AL,@(H'0005,Y)
	ld	AL,@(H'0001,X)
	st	AL,@(H'0006,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0007,Y)
	ld	AL,@(H'0003,X)
	st	AL,@(H'0008,Y)
	ld	X,@(H'0009,Y)
	ld	AH,@(H'0003,X)
	ld	AL,#-H'0002
	add	AL,@$XAP_AH
	cmp	AL,#(H'0001+H'0001)
	bcc	?L52
	cmp	AH,#H'0002
	bne	?L53
	ld	AH,#H'000A
	ld	AL,@$XAP_UXL
	bsr	$_sppSendConnectCfmToApp
	bra	(?L51)
?L53:
	ld	AL,#(_DunServiceRequest)
	st	AL,@(H'000A,Y)
	bra	(?L54)
?L52:
	ld	X,#(_SppServiceRequest)
	st	X,@(H'000A,Y)
?L54:
	ld	AH,@(H'0009,Y)
	ld	AL,#H'0002
	bsr	$_sppSetState
	ld	AL,#H'0040
	st	AL,@(0,Y)
	ld	AL,#H'0007
	st	AL,@(H'0001,Y)
	ld	X,@(H'000A,Y)
	st	X,@(H'0002,Y)
	ld	AL,#H'0005
	st	AL,@(H'0003,Y)
	ld	AL,#(_protocolAttributeRequest)
	st	AL,@(H'0004,Y)
	ld	AH,@(H'0009,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0005
	bsr	$_ConnectionSdpServiceSearchAttributeRequest
?L51:
?LBE2:
?LBE_sppHandleConnectRequest:
	leave	#12
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
;# begin scan referenced symbols
;# import $_ConnectionRfcommConnectRequest
;# end scan referenced symbols
$_sppHandleInternalRFCommConnectRequest:
	enter	#4
?LBB_sppHandleInternalRFCommConnectRequest:
	st	AL,@H'fff8
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,X)
	st	AL,@(0,Y)
	ld	X,@H'fff8
	ld	AL,@(H'0004,X)
	st	AL,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
	ld	AL,@H'fff8
	bsr	$_ConnectionRfcommConnectRequest
?LBE_sppHandleInternalRFCommConnectRequest:
	leave	#4
;# begin scan referenced symbols
;# import $_ConnectionRfcommConnectResponse
;# end scan referenced symbols
$_sppHandleConnectResponse:
	enter	#6
?LBB_sppHandleConnectResponse:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	X,@$XAP_AL
	tst	@(H'0004,X)
	bne	?L58
	ld	AL,#H'0001
	bsr	$_sppSetState
?L58:
	ld	AL,@(H'0004,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0003,Y)
	ld	AL,@(H'0002,X)
	st	AL,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
	ld	AH,@$XAP_UXL
	ld	X,@(H'0004,Y)
	ld	AL,@(H'0004,X)
	bsr	$_ConnectionRfcommConnectResponse
?LBE_sppHandleConnectResponse:
	leave	#6
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_MessageSend
;# import _connectSuccessTidy
;# end scan referenced symbols
$_sppSendConnectCfmToApp:
	enter	#4
?LBB_sppSendConnectCfmToApp:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB3:
	ld	AH,#H'0003
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0008,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	AL,@(H'0002,Y)
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0002,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'6F01
	bsr	$_MessageSend
	tst	@(H'0001,Y)
	bne	?L60
	ld	AH,@(H'0002,Y)
	bsr	_connectSuccessTidy
	bra	(?L59)
?L60:
	ld	AH,@(H'0002,Y)
	ld	AL,#H'0001
	bsr	$_sppSetState
?L59:
?LBE3:
?LBE_sppSendConnectCfmToApp:
	leave	#4
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# import _convertRfcommConnectStatus
;# end scan referenced symbols
$_sppHandleRfcommConnectCfm:
	enter	#2
?LBB_sppHandleRfcommConnectCfm:
	st	AH,@(0,Y)
	ld	AH,@$XAP_AL
	ld	X,@$XAP_AL
	tst	@(0,X)
	bne	?L63
	ld	AL,@(H'0003,X)
	ld	X,@(0,Y)
	st	AL,@(H'0008,X)
?L63:
	ld	X,@$XAP_AH
	ld	AH,@(0,X)
	bsr	_convertRfcommConnectStatus
	ld	AL,@(0,Y)
	bsr	$_sppSendConnectCfmToApp
?LBE_sppHandleRfcommConnectCfm:
	leave	#2
;# begin scan referenced symbols
;# end scan referenced symbols
$_sppHandleRfcommConnectInd:
	enter	#4
?LBB_sppHandleRfcommConnectInd:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB4:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@$XAP_AH
	st	AL,@(H'0004,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(0,X)
	st	AH,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'6F02
	bsr	$_MessageSend
	ld	AH,@(H'0001,Y)
	ld	AL,#H'0003
	bsr	$_sppSetState
?LBE4:
?LBE_sppHandleRfcommConnectInd:
	leave	#4
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;# begin scan referenced symbols
;# end scan referenced symbols
$_sppHandleConnectIndReject:
	enter	#4
?LBB_sppHandleConnectIndReject:
	ld	X,@$XAP_AL
	st	AL,@(0,Y)
	ld	AL,@(H'0004,X)
	st	AL,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
	bsr	$_ConnectionRfcommConnectResponse
?LBE_sppHandleConnectIndReject:
	leave	#4
;# begin scan referenced symbols
;# import _convertRfcommDisconnectStatus
;# import $_sppSendDisconnectIndToApp
;# end scan referenced symbols
$_sppHandleRfcommDisconnectInd:
	enter	#2
?LBB_sppHandleRfcommDisconnectInd:
	st	AH,@(0,Y)
	ld	X,@$XAP_AL
	ld	AH,@(0,X)
	bsr	_convertRfcommDisconnectStatus
	ld	AL,@$XAP_AH
	ld	AH,@(0,Y)
	bsr	$_sppSendDisconnectIndToApp
?LBE_sppHandleRfcommDisconnectInd:
	leave	#2
;# begin scan referenced symbols
;# import $_sppRegisterServiceRecord
;# end scan referenced symbols
$_sppSendDisconnectIndToApp:
	enter	#5
?LBB_sppSendDisconnectIndToApp:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB5:
	ld	AH,#H'0002
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0002,Y)
	ld	X,@$XAP_AH
	st	AL,@(H'0001,X)
	ld	AL,@(H'0001,Y)
	st	AL,@(0,X)
	ld	AH,@$XAP_AL
	ld	AL,#H'0001
	bsr	$_sppSetState
	ld	AL,#H'0000
	ld	X,@(H'0001,Y)
	st	AL,@(H'0008,X)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0005,X)
	ld	AL,@(H'0006,X)
	cmp	AH,#H'0000
	bne	?L68
	cmp	AL,#H'0000
	bne	?L68
	ld	AH,@$XAP_UXL
	ld	AL,@(H'0002,X)
	bsr	$_sppRegisterServiceRecord
?L68:
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	X,@(H'0001,Y)
	ld	AH,@(H'0001,X)
	ld	AL,#H'6F05
	bsr	$_MessageSend
?LBE5:
?LBE_sppSendDisconnectIndToApp:
	leave	#5
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;# begin scan referenced symbols
;# import $_ConnectionRfcommDisconnectRequest
;# end scan referenced symbols
$_sppHandleInternalDisconnectReq:
	enter	#1
?LBB_sppHandleInternalDisconnectReq:
	ld	X,@$XAP_AH
	ld	AL,@(H'0008,X)
	bsr	$_ConnectionRfcommDisconnectRequest
?LBE_sppHandleInternalDisconnectReq:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 73 used[1] = 9 total = 82
;# Function pattern *movqi3 used[0] = 79 total = 79
;# Function pattern *movqi8 used[0] = 1 total = 1
;# Function pattern *movhi used[2] = 2 used[3] = 1 total = 3
;# Function pattern *addqi0 used[0] = 1 total = 1
;# Function pattern *addqi2 used[2] = 1 total = 1
;# Function pattern jump used[0] = 12 total = 12
;# Function pattern *call1 used[0] = 20 total = 20
;# Function pattern *call_value1 used[0] = 5 total = 5
;# Function pattern tablejump_1 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[1] = 3 total = 3
;# Function pattern movstrqi+4 used[1] = 3 total = 3
;# Function pattern movstrqi+5 used[0] = 1 total = 1
;# Function pattern movstrqi+6 used[0] = 1 total = 1
	MODULE	spp_link_policy_handler
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.SEG	CONST
_spp_powertable:
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0000
	dc	H'0005
	dc	H'0001
	dc	H'0020
	dc	H'00C8
	dc	H'0001
	dc	H'0008
	dc	H'0000
;# begin scan referenced symbols
;# import _spp_powertable
;# import $_ConnectionLinkPolicyResponse
;# end scan referenced symbols
	.CODE
$_sppHandleLinkPolicyInd:
	enter	#7
?LBB_sppHandleLinkPolicyInd:
	ld	X,@$XAP_AH
	st	AL,@H'fff8
	ld	AL,@(H'0007,X)
	st	AL,@(0,Y)
	ld	AL,@(H'0008,X)
	st	AL,@(H'0001,Y)
	ld	AL,#H'1F80
	st	AL,@(H'0002,Y)
	ld	AL,#H'0002
	st	AL,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,#(_spp_powertable)
	st	AL,@(H'0005,Y)
	ld	X,@H'fff8
	ld	AL,@(H'0001,X)
	bsr	$_ConnectionLinkPolicyResponse
?LBE_sppHandleLinkPolicyInd:
	leave	#7
	ENDMOD

;# Function pattern *movqi2 used[0] = 8 used[1] = 1 total = 9
;# Function pattern *movqi3 used[0] = 6 total = 6
;# Function pattern *call1 used[0] = 1 total = 1
	MODULE	sdp_search
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_PanicUnlessMalloc
;# import $_connectionGetCmTask
;# import $_MessageSend
;# end scan referenced symbols
	.CODE
$_ConnectionSdpOpenSearchRequest:
	enter	#5
?LBB_ConnectionSdpOpenSearchRequest:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB2:
?LBB3:
	ld	AH,#H'0005
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#H'002D
	bsr	$_MessageSend
?LBE3:
?LBE2:
?LBE_ConnectionSdpOpenSearchRequest:
	leave	#5
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionSdpCloseSearchRequest:
	enter	#4
?LBB_ConnectionSdpCloseSearchRequest:
	st	AH,@(H'0001,Y)
?LBB4:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	ld	AL,#H'002E
	bsr	$_MessageSend
?LBE4:
?LBE_ConnectionSdpCloseSearchRequest:
	leave	#4
;.stabn	192,0,0,?LBB4
;.stabn	224,0,0,?LBE4
;# begin scan referenced symbols
;# import $_memcpy
;# end scan referenced symbols
$_ConnectionSdpServiceSearchRequest:
	enter	#5
?LBB_ConnectionSdpServiceSearchRequest:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB5:
?LBB6:
	ld	AH,#H'0008
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0007,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0005,X)
	cmp	AL,#H'0000
	beq	?L4
	ld	AH,@$XAP_AL
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0006,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0006,X)
	ld	AL,@(H'0007,Y)
	bsr	$_memcpy
	bra	(?L5)
?L4:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0006,X)
?L5:
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#H'002F
	bsr	$_MessageSend
?LBE6:
?LBE5:
?LBE_ConnectionSdpServiceSearchRequest:
	leave	#5
;.stabn	192,0,0,?LBB6
;.stabn	224,0,0,?LBE6
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionSdpAttributeSearchRequest:
	enter	#5
?LBB_ConnectionSdpAttributeSearchRequest:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB7:
?LBB8:
	ld	AH,#H'000A
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	ld	AH,@(H'0006,Y)
	ld	AL,@(H'0007,Y)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0005,X)
	st	AL,@(H'0006,X)
	ld	AL,@(H'0008,Y)
	st	AL,@(H'0007,X)
	cmp	AL,#H'0000
	beq	?L7
	ld	AH,@$XAP_AL
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0008,X)
	ld	AL,@(H'0008,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0008,X)
	ld	AL,@(H'0009,Y)
	bsr	$_memcpy
	bra	(?L8)
?L7:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0008,X)
?L8:
	ld	AL,@(H'0005,Y)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0009,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0003,Y)
	st	X,@(0,Y)
	ld	AL,#H'0030
	bsr	$_MessageSend
?LBE8:
?LBE7:
?LBE_ConnectionSdpAttributeSearchRequest:
	leave	#5
;.stabn	192,0,0,?LBB8
;.stabn	224,0,0,?LBE8
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionSdpServiceSearchAttributeRequest:
	enter	#5
?LBB_ConnectionSdpServiceSearchAttributeRequest:
	st	AH,@(H'0001,Y)
	st	AL,@(H'0002,Y)
?LBB9:
?LBB10:
	ld	AH,#H'000A
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0003,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(0,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0001,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0001,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0002,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0002,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0003,X)
	ld	X,@(H'0002,Y)
	ld	AL,@(H'0003,X)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0004,X)
	ld	AL,@(H'0005,Y)
	st	AL,@(H'0005,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(H'0006,X)
	cmp	AL,#H'0000
	beq	?L10
	ld	AH,@$XAP_AL
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0007,X)
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0007,X)
	ld	AL,@(H'0007,Y)
	bsr	$_memcpy
	bra	(?L11)
?L10:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0007,X)
?L11:
	ld	AL,@(H'0008,Y)
	ld	X,@(H'0003,Y)
	st	AL,@(H'0008,X)
	cmp	AL,#H'0000
	beq	?L12
	ld	AH,@$XAP_AL
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	ld	X,@(H'0003,Y)
	st	AH,@(H'0009,X)
	ld	AL,@(H'0008,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0009,X)
	ld	AL,@(H'0009,Y)
	bsr	$_memcpy
	bra	(?L13)
?L12:
	ld	AL,#H'0000
	ld	X,@(H'0003,Y)
	st	AL,@(H'0009,X)
?L13:
	bsr	$_connectionGetCmTask
	ld	AL,@(H'0003,Y)
	st	AL,@(0,Y)
	ld	AL,#H'0031
	bsr	$_MessageSend
?LBE10:
?LBE9:
?LBE_ConnectionSdpServiceSearchAttributeRequest:
	leave	#5
;.stabn	192,0,0,?LBB10
;.stabn	224,0,0,?LBE10
;# begin scan referenced symbols
;# end scan referenced symbols
$_ConnectionSdpTerminatePrimitiveRequest:
	enter	#4
?LBB_ConnectionSdpTerminatePrimitiveRequest:
	st	AH,@(H'0001,Y)
?LBB11:
	ld	AH,#H'0001
;	bsr	$_PanicUnlessMalloc
	DC	((256*47)+9)
	st	AH,@(H'0002,Y)
	ld	AL,@(H'0001,Y)
	ld	X,@$XAP_AH
	st	AL,@(0,X)
	bsr	$_connectionGetCmTask
	ld	X,@(H'0002,Y)
	st	X,@(0,Y)
	ld	AL,#H'0032
	bsr	$_MessageSend
?LBE11:
?LBE_ConnectionSdpTerminatePrimitiveRequest:
	leave	#4
;.stabn	192,0,0,?LBB11
;.stabn	224,0,0,?LBE11
	ENDMOD

;# Function pattern *movqi2 used[0] = 70 used[1] = 4 total = 74
;# Function pattern *movqi3 used[0] = 96 total = 96
;# Function pattern *movhi used[2] = 1 used[3] = 1 total = 2
;# Function pattern jump used[0] = 4 total = 4
;# Function pattern *call1 used[0] = 6 total = 6
;# Function pattern *call_value1 used[0] = 20 total = 20
;# Function pattern movstrqi+2 used[0] = 3 total = 3
;# Function pattern movstrqi+3 used[0] = 4 total = 4
	MODULE	region_matches_uuid32
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
	.SEG	CONST
_uuid_suffix:
	dc	H'0000
	dc	H'0000
	dc	H'0010
	dc	H'0000
	dc	H'0080
	dc	H'0000
	dc	H'0000
	dc	H'0080
	dc	H'005F
	dc	H'009B
	dc	H'0034
	dc	H'00FB
;# begin scan referenced symbols
;# import $_RegionReadUnsigned
;# import _uuid_suffix
;# import $_memcmp
;# end scan referenced symbols
	.CODE
$_RegionMatchesUUID32:
	enter	#4
?LBB_RegionMatchesUUID32:
	st	AH,@(H'0001,Y)
	ld	AL,#H'0000
	st	AL,@(H'0002,Y)
	ld	AH,@(H'0001,Y)
	bsr	$_RegionReadUnsigned
	cmp	AH,@(H'0004,Y)
	bne	?L2
	cmp	AL,@(H'0005,Y)
	bne	?L2
	ld	X,@(H'0001,Y)
	ld	AL,@(H'0001,X)
	sub	AL,@(0,X)
	cmp	AL,#H'0010
	bne	?L3
	ld	AL,#H'000C
	st	AL,@(0,Y)
	ld	AH,#(_uuid_suffix)
	ld	AL,@(0,X)
	bsr	$_memcmp
	cmp	AH,#H'0000
	bne	?L2
?L3:
	ld	AL,#H'0001
	st	AL,@(H'0002,Y)
?L2:
	ld	AH,@(H'0002,Y)
?LBE_RegionMatchesUUID32:
	leave	#4
	ENDMOD

;# Function pattern *movqi2 used[0] = 4 used[1] = 2 total = 6
;# Function pattern *movqi3 used[0] = 7 total = 7
;# Function pattern *subqi3 used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 1 total = 1
;# Function pattern movstrqi+5 used[0] = 1 total = 1
;# Function pattern movstrqi+7 used[1] = 1 total = 1
	MODULE	region_read_unsigned
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
$_RegionReadUnsigned:
	enter	#3
?LBB_RegionReadUnsigned:
	st	AH,@H'fff8
?LBB2:
	ld	AH,#H'0000
	st	AH,@(H'0001,Y)
	st	AH,@(0,Y)
	ld	X,@H'fff8
	ld	X,@(0,X)
	st	X,@(-1,Y)
	ld	AH,@$XAP_UXL
	ld	X,@H'fff8
	cmp	AH,@(H'0001,X)
	beq	?L8
	ld	AL,@(H'0001,X)
	st	AL,@H'fffa
?L6:
	ld	AH,@(0,Y)
	ld	AL,@(1,Y)
	asl	#H'0008
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	X,@(-1,Y)
	ld	AH,#H'0000
	ld	AL,@(0,X)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AH,@(0,Y)
	ld	AL,@(1,Y)
	or	AL,@H'fff9
	or	AH,@H'fff8
	st	AH,@(0,Y)
	st	AL,@(1,Y)
	ld	AL,#H'0001
	add	AL,@(-1,Y)
	st	AL,@(-1,Y)
	cmp	AL,@H'fffa
	bne	?L6
?L8:
	ld	AH,@(0,Y)
	ld	AL,@(1,Y)
?LBE2:
?LBE_RegionReadUnsigned:
	leave	#3
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 7 used[1] = 3 total = 10
;# Function pattern *movqi3 used[0] = 2 total = 2
;# Function pattern *movqi8 used[0] = 1 total = 1
;# Function pattern *movhi used[2] = 3 used[3] = 3 total = 6
;# Function pattern *iorhi3 used[0] = 1 total = 1
;# Function pattern *addqi2 used[2] = 1 total = 1
;# Function pattern *ashlhi3 used[0] = 1 total = 1
;# Function pattern *zero_extendqihi2 used[0] = 1 total = 1
;# Function pattern movstrqi+5 used[0] = 2 total = 2
	MODULE	region_write_unsigned
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
$_RegionWriteUnsigned:
	enter	#1
?LBB_RegionWriteUnsigned:
	st	AH,@H'fffa
	ld	AH,@(H'0001,Y)
	ld	AL,@(H'0002,Y)
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,@H'fffa
?LBB2:
	ld	X,@(H'0001,X)
	st	X,@(-1,Y)
	ld	AL,@$XAP_UXL
	ld	X,@H'fffa
	cmp	AL,@(0,X)
	beq	?L7
?L5:
	ld	X,#-H'0001
	add	X,@(-1,Y)
	st	X,@(-1,Y)
	ld	AL,@H'fff9
	and	AL,#H'00FF
	st	AL,@(0,X)
	ld	AH,@H'fff8
	ld	AL,@H'fff9
	lsr	#H'0008
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	AL,@$XAP_UXL
	ld	X,@H'fffa
	cmp	AL,@(0,X)
	bne	?L5
?L7:
?LBE2:
?LBE_RegionWriteUnsigned:
	leave	#1
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 6 used[1] = 4 total = 10
;# Function pattern *movqi3 used[0] = 1 total = 1
;# Function pattern *movhi used[2] = 2 used[3] = 2 total = 4
;# Function pattern *addqi2 used[2] = 1 total = 1
;# Function pattern *andqi3 used[0] = 1 total = 1
;# Function pattern *lshrhi3 used[0] = 1 total = 1
;# Function pattern movstrqi+5 used[0] = 2 total = 2
	MODULE	service_find_attribute
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_ServiceNextAttribute
;# end scan referenced symbols
	.CODE
$_ServiceFindAttribute:
	enter	#6
?LBB_ServiceFindAttribute:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
?LBB2:
	bra	(?L2)
?L6:
	ld	AL,@(H'0002,Y)
	cmp	AL,@(H'0004,Y)
	bne	?L2
	ld	AH,#H'0001
	bra	(?L1)
?L2:
	ld	AL,@(H'0006,Y)
	st	AL,@(0,Y)
	ld	AL,@(H'0007,Y)
	st	AL,@(H'0001,Y)
	ld	AH,@(H'0003,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0002
	bsr	$_ServiceNextAttribute
	cmp	AH,#H'0000
	bne	?L6
	ld	AH,#H'0000
?L1:
?LBE2:
?LBE_ServiceFindAttribute:
	leave	#6
;.stabn	192,0,0,?LBB2
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 4 used[1] = 1 total = 5
;# Function pattern *movqi3 used[0] = 3 total = 3
;# Function pattern *movqi8 used[0] = 2 total = 2
;# Function pattern *addqi0 used[0] = 1 total = 1
;# Function pattern jump used[0] = 2 total = 2
;# Function pattern *call_value1 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 1 total = 1
;# Function pattern movstrqi+5 used[0] = 1 total = 1
	MODULE	service_get_value
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;#(clobber:QI (reg:QI 1 AL))
;#(clobber (reg:QI 3 X))
;#(clobber:QI (reg:QI 0 AH))
;# end scan referenced symbols
	.CODE
$_ServiceGetValue:
	enter	#1
?LBB_ServiceGetValue:
	st	AH,@H'fff8
	st	AL,@H'fff9
	ld	X,@$XAP_AH
?LBB2:
	ld	AL,@(H'0001,X)
	cmp	AL,@(0,X)
	beq	?L22
	ld	X,@$XAP_AH
	ld	X,@(0,X)
	ld	AH,@(0,X)
	st	AH,@(-1,Y)
	ld	AL,#H'0001
	add	AL,@$XAP_UXL
	ld	X,@H'fff8
	st	AL,@(0,X)
	lsr	#H'0003
	ld	X,@H'fff9
	st	AH,@(0,X)
	ld	AL,@(-1,Y)
	and	AL,#H'0007
	cmp	AL,#(H'0001+H'0007)
	bcc	?L5
	ld	X,@$XAP_AL
	ld	X,@(?JTBASE19,X)
	brxl
	.SEG	CONST
?JTBASE19:
	.CODE
?L19:
	.SEG	CONST
	dc	?L5-?L19
	dc	?L7-?L19
	dc	?L8-?L19
	dc	?L9-?L19
	dc	?L10-?L19
	dc	?L11-?L19
	dc	?L13-?L19
	dc	?L16-?L19
	.CODE
?L5:
	ld	X,@H'fff9
	ld	AH,@(0,X)
	cmp	AH,#H'0000
	beq	?L3
	ld	AH,#H'0001
	bra	(?L3)
?L7:
	ld	AH,#H'0002
	bra	(?L3)
?L8:
	ld	AH,#H'0004
	bra	(?L3)
?L9:
	ld	AH,#H'0008
	bra	(?L3)
?L10:
	ld	AH,#H'0010
	bra	(?L3)
?L11:
	ld	X,@H'fff8
	ld	AL,@(H'0001,X)
	cmp	AL,@(0,X)
	beq	?L22
	ld	X,@H'fff8
	ld	X,@(0,X)
	ld	AH,@(0,X)
	ld	AL,#H'0001
	add	AL,@$XAP_UXL
	bra	(?L21)
?L13:
	ld	X,@H'fff8
	ld	AL,@(H'0001,X)
	sub	AL,@(0,X)
	cmp	AL,#H'0001
	bcz	?L22
?Ltext1:
	ld	X,@H'fff8
?LBB3:
	ld	X,@(0,X)
	ld	AL,@(0,X)
	asl	#H'0008
	ld	AH,@$XAP_AL
	or	AH,@(H'0001,X)
?Ltext2:
?LBE3:
	ld	AL,#H'0002
	add	AL,@$XAP_UXL
	bra	(?L21)
?L16:
	ld	X,@H'fff8
	ld	AL,@(H'0001,X)
	sub	AL,@(0,X)
	cmp	AL,#H'0003
	bcz	?L22
?Ltext3:
	ld	X,@H'fff8
?LBB4:
	ld	X,@(0,X)
?LBB5:
	ld	AH,#H'0000
	ld	AL,@(0,X)
	asl	#H'0008
	st	AH,@H'fff9
	st	AL,@H'fffa
	ld	AH,#H'0000
	ld	AL,@(H'0001,X)
	or	AL,@H'fffa
	or	AH,@H'fff9
	asl	#H'0008
	st	AH,@H'fff9
	st	AL,@H'fffa
	ld	AH,#H'0000
	ld	AL,@(H'0002,X)
	or	AL,@H'fffa
	or	AH,@H'fff9
	asl	#H'0008
	st	AH,@H'fff9
	st	AL,@H'fffa
	ld	AH,#H'0000
	ld	AL,@(H'0003,X)
	or	AL,@H'fffa
	or	AH,@H'fff9
?LBE5:
?LBE4:
	ld	AH,@$XAP_AL
?Ltext4:
	ld	AL,#H'0004
	add	AL,@$XAP_UXL
?L21:
	ld	X,@H'fff8
	st	AL,@(0,X)
?L3:
	ld	X,@H'fff8
	ld	AL,@(H'0001,X)
	sub	AL,@(0,X)
	cmp	AL,@$XAP_AH
	bcc	?L20
?L22:
	ld	AH,#H'0000
	bra	(?L1)
?L20:
	ld	X,@H'fff8
	ld	AL,@(0,X)
	ld	X,@(H'0001,Y)
	st	AL,@(0,X)
	ld	X,@H'fff8
	ld	AL,@(0,X)
	add	AL,@$XAP_AH
	st	AL,@(0,X)
	ld	X,@(H'0001,Y)
	st	AL,@(H'0001,X)
	ld	AH,#H'0001
?L1:
?LBE2:
?LBE_ServiceGetValue:
	leave	#1
;.stabn	192,0,0,?LBB2
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;.stabn	192,0,0,?LBB4
;.stabn	192,0,0,?LBB5
;.stabn	224,0,0,?LBE5
;.stabn	224,0,0,?LBE4
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 14 used[1] = 14 total = 28
;# Function pattern *movqi3 used[0] = 23 total = 23
;# Function pattern *movhi used[3] = 3 total = 3
;# Function pattern *iorhi3 used[0] = 3 total = 3
;# Function pattern *addqi2 used[2] = 5 total = 5
;# Function pattern *andqi3 used[0] = 1 total = 1
;# Function pattern *iorqi3 used[0] = 1 total = 1
;# Function pattern *subqi3 used[0] = 3 total = 3
;# Function pattern *ashlhi3 used[0] = 3 total = 3
;# Function pattern *lshrqi3 used[0] = 1 total = 1
;# Function pattern *ashlqi3 used[0] = 1 total = 1
;# Function pattern *zero_extendqihi2 used[0] = 4 total = 4
;# Function pattern jump used[0] = 8 total = 8
;# Function pattern tablejump_1 used[0] = 1 total = 1
;# Function pattern movstrqi+3 used[0] = 1 total = 1
;# Function pattern movstrqi+4 used[1] = 1 total = 1
;# Function pattern movstrqi+5 used[0] = 5 total = 5
	MODULE	service_next_attribute
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# import $_ServiceGetValue
;#(clobber:QI (reg:QI 0 AH))
;# end scan referenced symbols
	.CODE
$_ServiceNextAttribute:
	enter	#6
?LBB_ServiceNextAttribute:
	st	AH,@(H'0003,Y)
	st	AL,@(H'0004,Y)
	ld	AL,@$XAP_UY
	add	AL,#H'0001
?LBB2:
	st	AL,@(0,Y)
	ld	AL,@(H'0006,Y)
	bsr	$_ServiceGetValue
	cmp	AH,#H'0000
	beq	?L2
	ld	X,@(H'0006,Y)
	ld	AL,@(0,X)
	cmp	AL,#H'0001
	bne	?L2
	ld	X,@$XAP_UY
	add	X,#H'0001
	ld	AL,@(H'0001,X)
	sub	AL,@(H'0001,Y)
	cmp	AL,#H'0002
	bne	?L2
?Ltext1:
?LBB3:
	ld	X,@(H'0001,Y)
	ld	AL,@(0,X)
	asl	#H'0008
	or	AL,@(H'0001,X)
	ld	X,@(H'0004,Y)
?LBE3:
	st	AL,@(0,X)
?Ltext2:
	ld	AL,@(H'0007,Y)
	st	AL,@(0,Y)
	ld	AH,@(H'0003,Y)
	ld	AL,@(H'0006,Y)
	bsr	$_ServiceGetValue
	bra	(?L1)
?L2:
	ld	AH,#H'0000
?L1:
?LBE2:
?LBE_ServiceNextAttribute:
	leave	#6
;.stabn	192,0,0,?LBB2
;.stabn	192,0,0,?LBB3
;.stabn	224,0,0,?LBE3
;.stabn	224,0,0,?LBE2
	ENDMOD

;# Function pattern *movqi2 used[0] = 5 used[1] = 3 total = 8
;# Function pattern *movqi3 used[0] = 8 total = 8
;# Function pattern *addqi0 used[0] = 2 total = 2
;# Function pattern *iorqi3 used[0] = 1 total = 1
;# Function pattern *subqi3 used[0] = 1 total = 1
;# Function pattern *ashlqi3 used[0] = 1 total = 1
;# Function pattern jump used[0] = 1 total = 1
;# Function pattern *call_value1 used[0] = 2 total = 2
;# Function pattern movstrqi+3 used[0] = 1 total = 1
;# Function pattern movstrqi+5 used[0] = 2 total = 2
	MODULE	bdaddr_is_same
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
$_BdaddrIsSame:
	enter	#1
?LBB_BdaddrIsSame:
	st	AL,@H'fff8
	ld	AL,#H'0000
	st	AL,@(-1,Y)
	ld	X,@$XAP_AH
	ld	AL,@(H'0003,X)
	ld	X,@H'fff8
	cmp	AL,@(H'0003,X)
	bne	?L2
	ld	X,@$XAP_AH
	ld	AL,@(H'0002,X)
	ld	X,@H'fff8
	cmp	AL,@(H'0002,X)
	bne	?L2
	ld	X,@$XAP_AH
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	ld	X,@H'fff8
	cmp	AH,@(0,X)
	bne	?L2
	cmp	AL,@(1,X)
	bne	?L2
	ld	AL,#H'0001
	st	AL,@(-1,Y)
?L2:
	ld	AH,@(-1,Y)
?LBE_BdaddrIsSame:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 6 used[1] = 4 total = 10
;# Function pattern *movqi3 used[0] = 4 total = 4
;# Function pattern *movhi used[2] = 1 total = 1
;# Function pattern movstrqi+5 used[0] = 2 total = 2
;# Function pattern movstrqi+7 used[1] = 1 total = 1
	MODULE	bdaddr_is_zero
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
$_BdaddrIsZero:
	enter	#1
?LBB_BdaddrIsZero:
	ld	X,@$XAP_AH
	ld	AL,#H'0000
	st	AL,@(-1,Y)
	tst	@(H'0003,X)
	bne	?L2
	tst	@(H'0002,X)
	bne	?L2
	ld	AH,@(0,X)
	ld	AL,@(1,X)
	cmp	AH,#H'0000
	bne	?L2
	cmp	AL,#H'0000
	bne	?L2
	ld	AL,#H'0001
	st	AL,@(-1,Y)
?L2:
	ld	AH,@(-1,Y)
?LBE_BdaddrIsZero:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 3 used[1] = 1 total = 4
;# Function pattern *movqi3 used[0] = 2 total = 2
;# Function pattern *movhi used[2] = 1 total = 1
;# Function pattern movstrqi+3 used[1] = 2 total = 2
;# Function pattern movstrqi+6 used[0] = 1 total = 1
	MODULE	bdaddr_set_zero
	.LARGE ; really small mode but we need space for debug symbols
; GNU C version 3.3.3 (BlueLab 3.6.2-release)
; 	compiled by GNU C version 3.2.3 (mingw special 20030504-1).
;# options passed:  -IF:\BlueLab\tools/include -iprefix -isystem
;# -D__GNUC__=3 -D__GNUC_MINOR__=3 -D__GNUC_PATCHLEVEL__=3 -MD -MQ
;# -mno-leaf-optim -ansi -auxbase-strip -g -O -pedantic -Wall
;# -Wmissing-prototypes -Wstrict-prototypes -Wsign-compare
;# -Wredundant-decls -Werror -ansi -fno-builtin-memcpy
;# options enabled:  -fdefer-pop -fthread-jumps -fpeephole -ffunction-cse
;# -fkeep-static-consts -fpcc-struct-return -fgcse-lm -fgcse-sm
;# -floop-optimize -fcrossjumping -fif-conversion -fif-conversion2
;# -fsched-interblock -fsched-spec -fbranch-count-reg -fcprop-registers
;# -fcommon -fgnu-linker -fargument-alias -fmerge-constants
;# -fzero-initialized-in-bss -fleading-underscore -fident
;# -fguess-branch-probability -fmath-errno -ftrapping-math -mpeephole
;# -mquiet-mode -minline-block-copy-mode -menhanced-mode -mload-cache-mode
;# -mbitfield-mode -mtest4

	.ENHANCED
;# begin scan referenced symbols
;# end scan referenced symbols
	.CODE
$_BdaddrSetZero:
	enter	#1
?LBB_BdaddrSetZero:
	ld	X,@$XAP_AH
	ld	AL,#H'0000
	st	AL,@(H'0003,X)
	st	AL,@(H'0002,X)
	st	AL,@(H'0001,X)
	st	AL,@(0,X)
?LBE_BdaddrSetZero:
	leave	#1
	ENDMOD

;# Function pattern *movqi2 used[0] = 5 total = 5
;# Function pattern *movqi3 used[0] = 1 total = 1
